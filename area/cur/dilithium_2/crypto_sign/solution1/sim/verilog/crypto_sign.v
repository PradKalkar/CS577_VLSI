// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="crypto_sign,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-fbg676-2,HLS_INPUT_CLOCK=10000.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=31.143429,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=71,HLS_SYN_DSP=88,HLS_SYN_FF=40269,HLS_SYN_LUT=205290,HLS_VERSION=2019_2}" *)

module crypto_sign (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sm_address0,
        sm_ce0,
        sm_we0,
        sm_d0,
        sm_q0,
        sm_address1,
        sm_ce1,
        sm_we1,
        sm_d1,
        smlen,
        smlen_ap_vld,
        m_address0,
        m_ce0,
        m_q0,
        mlen,
        sk_address0,
        sk_ce0,
        sk_q0,
        sk_address1,
        sk_ce1,
        sk_q1,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] sm_address0;
output   sm_ce0;
output   sm_we0;
output  [7:0] sm_d0;
input  [7:0] sm_q0;
output  [12:0] sm_address1;
output   sm_ce1;
output   sm_we1;
output  [7:0] sm_d1;
output  [63:0] smlen;
output   smlen_ap_vld;
output  [11:0] m_address0;
output   m_ce0;
input  [7:0] m_q0;
input  [63:0] mlen;
output  [11:0] sk_address0;
output   sk_ce0;
input  [7:0] sk_q0;
output  [11:0] sk_address1;
output   sk_ce1;
input  [7:0] sk_q1;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[12:0] sm_address0;
reg sm_ce0;
reg sm_we0;
reg[7:0] sm_d0;
reg sm_ce1;
reg sm_we1;
reg smlen_ap_vld;
reg[11:0] m_address0;
reg m_ce0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [12:0] add_ln208_fu_129_p2;
reg   [12:0] add_ln208_reg_239;
wire   [13:0] add_ln208_1_fu_139_p2;
reg   [13:0] add_ln208_1_reg_245;
wire   [12:0] trunc_ln206_fu_150_p1;
reg   [12:0] trunc_ln206_reg_254;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln206_fu_145_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln206_1_fu_195_p2;
wire   [13:0] sub_ln208_3_fu_210_p2;
reg   [13:0] sub_ln208_3_reg_272;
wire   [63:0] add_ln206_fu_215_p2;
reg   [63:0] add_ln206_reg_277;
wire    grp_crypto_sign_signatur_fu_112_ap_start;
wire    grp_crypto_sign_signatur_fu_112_ap_done;
wire    grp_crypto_sign_signatur_fu_112_ap_idle;
wire    grp_crypto_sign_signatur_fu_112_ap_ready;
wire   [12:0] grp_crypto_sign_signatur_fu_112_sig_address0;
wire    grp_crypto_sign_signatur_fu_112_sig_ce0;
wire    grp_crypto_sign_signatur_fu_112_sig_we0;
wire   [7:0] grp_crypto_sign_signatur_fu_112_sig_d0;
wire   [12:0] grp_crypto_sign_signatur_fu_112_sig_address1;
wire    grp_crypto_sign_signatur_fu_112_sig_ce1;
wire    grp_crypto_sign_signatur_fu_112_sig_we1;
wire   [7:0] grp_crypto_sign_signatur_fu_112_sig_d1;
wire   [11:0] grp_crypto_sign_signatur_fu_112_sk_address0;
wire    grp_crypto_sign_signatur_fu_112_sk_ce0;
wire   [11:0] grp_crypto_sign_signatur_fu_112_sk_address1;
wire    grp_crypto_sign_signatur_fu_112_sk_ce1;
reg   [63:0] i_0_0_reg_100;
wire    ap_CS_fsm_state4;
reg    grp_crypto_sign_signatur_fu_112_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln208_fu_159_p1;
wire   [63:0] zext_ln208_1_fu_173_p1;
wire   [63:0] zext_ln208_2_fu_205_p1;
wire   [63:0] zext_ln208_3_fu_221_p1;
wire   [12:0] trunc_ln208_fu_125_p1;
wire   [13:0] trunc_ln208_1_fu_135_p1;
wire   [12:0] sub_ln208_fu_154_p2;
wire   [13:0] trunc_ln206_1_fu_164_p1;
wire   [13:0] sub_ln208_1_fu_168_p2;
wire   [63:0] or_ln206_fu_178_p2;
wire   [12:0] or_ln206_2_fu_190_p2;
wire   [12:0] sub_ln208_2_fu_200_p2;
wire   [13:0] or_ln206_1_fu_184_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_crypto_sign_signatur_fu_112_ap_start_reg = 1'b0;
end

crypto_sign_signatur grp_crypto_sign_signatur_fu_112(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_crypto_sign_signatur_fu_112_ap_start),
    .ap_done(grp_crypto_sign_signatur_fu_112_ap_done),
    .ap_idle(grp_crypto_sign_signatur_fu_112_ap_idle),
    .ap_ready(grp_crypto_sign_signatur_fu_112_ap_ready),
    .sig_address0(grp_crypto_sign_signatur_fu_112_sig_address0),
    .sig_ce0(grp_crypto_sign_signatur_fu_112_sig_ce0),
    .sig_we0(grp_crypto_sign_signatur_fu_112_sig_we0),
    .sig_d0(grp_crypto_sign_signatur_fu_112_sig_d0),
    .sig_q0(sm_q0),
    .sig_address1(grp_crypto_sign_signatur_fu_112_sig_address1),
    .sig_ce1(grp_crypto_sign_signatur_fu_112_sig_ce1),
    .sig_we1(grp_crypto_sign_signatur_fu_112_sig_we1),
    .sig_d1(grp_crypto_sign_signatur_fu_112_sig_d1),
    .mlen(mlen),
    .sk_address0(grp_crypto_sign_signatur_fu_112_sk_address0),
    .sk_ce0(grp_crypto_sign_signatur_fu_112_sk_ce0),
    .sk_q0(sk_q0),
    .sk_address1(grp_crypto_sign_signatur_fu_112_sk_address1),
    .sk_ce1(grp_crypto_sign_signatur_fu_112_sk_ce1),
    .sk_q1(sk_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_crypto_sign_signatur_fu_112_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_crypto_sign_signatur_fu_112_ap_start_reg <= 1'b1;
        end else if ((grp_crypto_sign_signatur_fu_112_ap_ready == 1'b1)) begin
            grp_crypto_sign_signatur_fu_112_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_0_reg_100 <= add_ln206_reg_277;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_0_reg_100 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln206_1_fu_195_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln206_reg_277 <= add_ln206_fu_215_p2;
        sub_ln208_3_reg_272 <= sub_ln208_3_fu_210_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        add_ln208_1_reg_245 <= add_ln208_1_fu_139_p2;
        add_ln208_reg_239 <= add_ln208_fu_129_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln206_fu_145_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln206_reg_254 <= trunc_ln206_fu_150_p1;
    end
end

always @ (*) begin
    if (((grp_crypto_sign_signatur_fu_112_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_crypto_sign_signatur_fu_112_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        m_address0 = zext_ln208_2_fu_205_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        m_address0 = zext_ln208_fu_159_p1;
    end else begin
        m_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_ce0 = 1'b1;
    end else begin
        m_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sm_address0 = zext_ln208_3_fu_221_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sm_address0 = zext_ln208_1_fu_173_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sm_address0 = grp_crypto_sign_signatur_fu_112_sig_address0;
    end else begin
        sm_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        sm_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sm_ce0 = grp_crypto_sign_signatur_fu_112_sig_ce0;
    end else begin
        sm_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sm_ce1 = grp_crypto_sign_signatur_fu_112_sig_ce1;
    end else begin
        sm_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        sm_d0 = m_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sm_d0 = grp_crypto_sign_signatur_fu_112_sig_d0;
    end else begin
        sm_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        sm_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sm_we0 = grp_crypto_sign_signatur_fu_112_sig_we0;
    end else begin
        sm_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sm_we1 = grp_crypto_sign_signatur_fu_112_sig_we1;
    end else begin
        sm_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        smlen_ap_vld = 1'b1;
    end else begin
        smlen_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln206_fu_145_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln206_1_fu_195_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_crypto_sign_signatur_fu_112_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln206_fu_215_p2 = (i_0_0_reg_100 + 64'd2);

assign add_ln208_1_fu_139_p2 = (14'd2419 + trunc_ln208_1_fu_135_p1);

assign add_ln208_fu_129_p2 = ($signed(13'd8191) + $signed(trunc_ln208_fu_125_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_return = 32'd0;

assign grp_crypto_sign_signatur_fu_112_ap_start = grp_crypto_sign_signatur_fu_112_ap_start_reg;

assign icmp_ln206_1_fu_195_p2 = ((or_ln206_fu_178_p2 == mlen) ? 1'b1 : 1'b0);

assign icmp_ln206_fu_145_p2 = ((i_0_0_reg_100 == mlen) ? 1'b1 : 1'b0);

assign or_ln206_1_fu_184_p2 = (trunc_ln206_1_fu_164_p1 | 14'd1);

assign or_ln206_2_fu_190_p2 = (trunc_ln206_reg_254 | 13'd1);

assign or_ln206_fu_178_p2 = (i_0_0_reg_100 | 64'd1);

assign sk_address0 = grp_crypto_sign_signatur_fu_112_sk_address0;

assign sk_address1 = grp_crypto_sign_signatur_fu_112_sk_address1;

assign sk_ce0 = grp_crypto_sign_signatur_fu_112_sk_ce0;

assign sk_ce1 = grp_crypto_sign_signatur_fu_112_sk_ce1;

assign sm_address1 = grp_crypto_sign_signatur_fu_112_sig_address1;

assign sm_d1 = grp_crypto_sign_signatur_fu_112_sig_d1;

assign smlen = (mlen + 64'd2420);

assign sub_ln208_1_fu_168_p2 = (add_ln208_1_reg_245 - trunc_ln206_1_fu_164_p1);

assign sub_ln208_2_fu_200_p2 = (add_ln208_reg_239 - or_ln206_2_fu_190_p2);

assign sub_ln208_3_fu_210_p2 = (add_ln208_1_reg_245 - or_ln206_1_fu_184_p2);

assign sub_ln208_fu_154_p2 = (add_ln208_reg_239 - trunc_ln206_fu_150_p1);

assign trunc_ln206_1_fu_164_p1 = i_0_0_reg_100[13:0];

assign trunc_ln206_fu_150_p1 = i_0_0_reg_100[12:0];

assign trunc_ln208_1_fu_135_p1 = mlen[13:0];

assign trunc_ln208_fu_125_p1 = mlen[12:0];

assign zext_ln208_1_fu_173_p1 = sub_ln208_1_fu_168_p2;

assign zext_ln208_2_fu_205_p1 = sub_ln208_2_fu_200_p2;

assign zext_ln208_3_fu_221_p1 = sub_ln208_3_reg_272;

assign zext_ln208_fu_159_p1 = sub_ln208_fu_154_p2;

endmodule //crypto_sign
