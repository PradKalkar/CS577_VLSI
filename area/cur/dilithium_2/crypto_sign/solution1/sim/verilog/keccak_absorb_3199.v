// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module keccak_absorb_3199 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_address0,
        s_ce0,
        s_we0,
        s_d0,
        s_q0,
        m_address0,
        m_ce0,
        m_q0,
        m_offset
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] s_address0;
output   s_ce0;
output   s_we0;
output  [63:0] s_d0;
input  [63:0] s_q0;
output  [7:0] m_address0;
output   m_ce0;
input  [7:0] m_q0;
input  [7:0] m_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] s_address0;
reg s_ce0;
reg s_we0;
reg m_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] zext_ln416_fu_97_p1;
reg   [63:0] zext_ln416_reg_200;
wire    ap_CS_fsm_state2;
wire   [2:0] add_ln416_fu_107_p2;
reg   [2:0] add_ln416_reg_208;
wire   [5:0] shl_ln_fu_113_p3;
reg   [5:0] shl_ln_reg_213;
wire   [0:0] icmp_ln416_fu_101_p2;
wire   [3:0] i_fu_131_p2;
reg   [3:0] i_reg_221;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln30_fu_125_p2;
reg   [4:0] s_addr_reg_231;
wire   [63:0] r_fu_182_p2;
wire    ap_CS_fsm_state4;
reg   [2:0] i_3_reg_62;
wire    ap_CS_fsm_state5;
reg   [3:0] i_0_i1_reg_73;
reg   [63:0] r_0_i2_reg_85;
wire   [63:0] zext_ln31_7_fu_151_p1;
wire   [5:0] zext_ln30_fu_121_p1;
wire   [5:0] add_ln31_1_fu_137_p2;
wire   [7:0] zext_ln31_fu_142_p1;
wire   [7:0] add_ln31_fu_146_p2;
wire   [2:0] trunc_ln31_fu_160_p1;
wire   [5:0] shl_ln16_fu_164_p3;
wire   [63:0] zext_ln31_3_fu_156_p1;
wire   [63:0] zext_ln31_4_fu_172_p1;
wire   [63:0] shl_ln31_fu_176_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_i1_reg_73 <= i_reg_221;
    end else if (((icmp_ln416_fu_101_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_i1_reg_73 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_3_reg_62 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_3_reg_62 <= add_ln416_reg_208;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_0_i2_reg_85 <= r_fu_182_p2;
    end else if (((icmp_ln416_fu_101_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        r_0_i2_reg_85 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln416_reg_208 <= add_ln416_fu_107_p2;
        zext_ln416_reg_200[2 : 0] <= zext_ln416_fu_97_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_221 <= i_fu_131_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_125_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        s_addr_reg_231[2 : 0] <= zext_ln416_reg_200[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln416_fu_101_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shl_ln_reg_213[5 : 3] <= shl_ln_fu_113_p3[5 : 3];
    end
end

always @ (*) begin
    if ((((icmp_ln416_fu_101_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln416_fu_101_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        m_ce0 = 1'b1;
    end else begin
        m_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        s_address0 = s_addr_reg_231;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        s_address0 = zext_ln416_reg_200;
    end else begin
        s_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        s_ce0 = 1'b1;
    end else begin
        s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        s_we0 = 1'b1;
    end else begin
        s_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln416_fu_101_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln30_fu_125_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln31_1_fu_137_p2 = (zext_ln30_fu_121_p1 + shl_ln_reg_213);

assign add_ln31_fu_146_p2 = (m_offset + zext_ln31_fu_142_p1);

assign add_ln416_fu_107_p2 = (i_3_reg_62 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign i_fu_131_p2 = (i_0_i1_reg_73 + 4'd1);

assign icmp_ln30_fu_125_p2 = ((i_0_i1_reg_73 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln416_fu_101_p2 = ((i_3_reg_62 == 3'd6) ? 1'b1 : 1'b0);

assign m_address0 = zext_ln31_7_fu_151_p1;

assign r_fu_182_p2 = (shl_ln31_fu_176_p2 | r_0_i2_reg_85);

assign s_d0 = (s_q0 ^ r_0_i2_reg_85);

assign shl_ln16_fu_164_p3 = {{trunc_ln31_fu_160_p1}, {3'd0}};

assign shl_ln31_fu_176_p2 = zext_ln31_3_fu_156_p1 << zext_ln31_4_fu_172_p1;

assign shl_ln_fu_113_p3 = {{i_3_reg_62}, {3'd0}};

assign trunc_ln31_fu_160_p1 = i_0_i1_reg_73[2:0];

assign zext_ln30_fu_121_p1 = i_0_i1_reg_73;

assign zext_ln31_3_fu_156_p1 = m_q0;

assign zext_ln31_4_fu_172_p1 = shl_ln16_fu_164_p3;

assign zext_ln31_7_fu_151_p1 = add_ln31_fu_146_p2;

assign zext_ln31_fu_142_p1 = add_ln31_1_fu_137_p2;

assign zext_ln416_fu_97_p1 = i_3_reg_62;

always @ (posedge ap_clk) begin
    zext_ln416_reg_200[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    shl_ln_reg_213[2:0] <= 3'b000;
    s_addr_reg_231[4:3] <= 2'b00;
end

endmodule //keccak_absorb_3199
