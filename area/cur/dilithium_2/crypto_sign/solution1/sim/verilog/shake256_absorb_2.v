// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module shake256_absorb_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_s_address0,
        state_s_ce0,
        state_s_we0,
        state_s_d0,
        state_s_q0,
        in_0_read,
        in_1_read
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] state_s_address0;
output   state_s_ce0;
output   state_s_we0;
output  [63:0] state_s_d0;
input  [63:0] state_s_q0;
input  [7:0] in_0_read;
input  [7:0] in_1_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] state_s_address0;
reg state_s_ce0;
reg state_s_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] add_ln388_fu_167_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] i_fu_190_p2;
wire    ap_CS_fsm_state3;
wire   [1:0] i_15_fu_212_p2;
wire    ap_CS_fsm_state4;
wire   [3:0] i_16_fu_235_p2;
reg   [3:0] i_16_reg_322;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln30_fu_229_p2;
wire   [4:0] state_s_addr_reg_332;
wire   [63:0] r_fu_272_p2;
wire    ap_CS_fsm_state6;
reg   [2:0] t_address0;
reg    t_ce0;
reg    t_we0;
reg   [7:0] t_d0;
wire   [7:0] t_q0;
reg   [2:0] phi_ln388_reg_110;
wire   [0:0] icmp_ln388_fu_178_p2;
reg   [3:0] i_4_i_reg_121;
wire   [0:0] icmp_ln424_fu_184_p2;
reg   [1:0] i_5_i_reg_132;
wire   [0:0] icmp_ln426_fu_206_p2;
reg   [3:0] i_0_i2_reg_143;
reg   [63:0] r_0_i3_reg_155;
wire   [63:0] zext_ln388_fu_173_p1;
wire   [63:0] zext_ln425_fu_196_p1;
wire   [63:0] zext_ln426_fu_201_p1;
wire   [63:0] zext_ln31_fu_241_p1;
wire   [7:0] select_ln427_fu_222_p3;
wire    ap_CS_fsm_state7;
wire   [0:0] trunc_ln427_fu_218_p1;
wire   [2:0] trunc_ln31_fu_250_p1;
wire   [5:0] shl_ln_fu_254_p3;
wire   [63:0] zext_ln31_6_fu_246_p1;
wire   [63:0] zext_ln31_7_fu_262_p1;
wire   [63:0] shl_ln31_fu_266_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

shake256_absorb_4_t #(
    .DataWidth( 8 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
t_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(t_address0),
    .ce0(t_ce0),
    .we0(t_we0),
    .d0(t_d0),
    .q0(t_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln426_fu_206_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_i2_reg_143 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i_0_i2_reg_143 <= i_16_reg_322;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln388_fu_178_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_4_i_reg_121 <= 4'd0;
    end else if (((icmp_ln424_fu_184_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_4_i_reg_121 <= i_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln424_fu_184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_5_i_reg_132 <= 2'd0;
    end else if (((icmp_ln426_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_5_i_reg_132 <= i_15_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln388_fu_178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln388_reg_110 <= add_ln388_fu_167_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln388_reg_110 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln426_fu_206_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        r_0_i3_reg_155 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_0_i3_reg_155 <= r_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_16_reg_322 <= i_16_fu_235_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        state_s_address0 = state_s_addr_reg_332;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_s_address0 = 64'd6;
    end else begin
        state_s_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7))) begin
        state_s_ce0 = 1'b1;
    end else begin
        state_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        state_s_we0 = 1'b1;
    end else begin
        state_s_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        t_address0 = zext_ln31_fu_241_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        t_address0 = zext_ln426_fu_201_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        t_address0 = zext_ln425_fu_196_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        t_address0 = zext_ln388_fu_173_p1;
    end else begin
        t_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        t_ce0 = 1'b1;
    end else begin
        t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        t_d0 = select_ln427_fu_222_p3;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        t_d0 = 8'd0;
    end else begin
        t_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln426_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln424_fu_184_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        t_we0 = 1'b1;
    end else begin
        t_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln388_fu_178_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln424_fu_184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln426_fu_206_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln30_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln388_fu_167_p2 = (phi_ln388_reg_110 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign i_15_fu_212_p2 = (i_5_i_reg_132 + 2'd1);

assign i_16_fu_235_p2 = (i_0_i2_reg_143 + 4'd1);

assign i_fu_190_p2 = (i_4_i_reg_121 + 4'd1);

assign icmp_ln30_fu_229_p2 = ((i_0_i2_reg_143 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln388_fu_178_p2 = ((phi_ln388_reg_110 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln424_fu_184_p2 = ((i_4_i_reg_121 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln426_fu_206_p2 = ((i_5_i_reg_132 == 2'd2) ? 1'b1 : 1'b0);

assign r_fu_272_p2 = (shl_ln31_fu_266_p2 | r_0_i3_reg_155);

assign select_ln427_fu_222_p3 = ((trunc_ln427_fu_218_p1[0:0] === 1'b1) ? in_1_read : in_0_read);

assign shl_ln31_fu_266_p2 = zext_ln31_6_fu_246_p1 << zext_ln31_7_fu_262_p1;

assign shl_ln_fu_254_p3 = {{trunc_ln31_fu_250_p1}, {3'd0}};

assign state_s_addr_reg_332 = 64'd6;

assign state_s_d0 = (state_s_q0 ^ r_0_i3_reg_155);

assign trunc_ln31_fu_250_p1 = i_0_i2_reg_143[2:0];

assign trunc_ln427_fu_218_p1 = i_5_i_reg_132[0:0];

assign zext_ln31_6_fu_246_p1 = t_q0;

assign zext_ln31_7_fu_262_p1 = shl_ln_fu_254_p3;

assign zext_ln31_fu_241_p1 = i_0_i2_reg_143;

assign zext_ln388_fu_173_p1 = phi_ln388_reg_110;

assign zext_ln425_fu_196_p1 = i_4_i_reg_121;

assign zext_ln426_fu_201_p1 = i_5_i_reg_132;

endmodule //shake256_absorb_2
