// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "load64_2.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic load64_2::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic load64_2::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> load64_2::ap_ST_fsm_state1 = "1";
const sc_lv<3> load64_2::ap_ST_fsm_state2 = "10";
const sc_lv<3> load64_2::ap_ST_fsm_state3 = "100";
const sc_lv<32> load64_2::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> load64_2::ap_const_lv32_1 = "1";
const sc_lv<32> load64_2::ap_const_lv32_2 = "10";
const sc_lv<4> load64_2::ap_const_lv4_0 = "0000";
const sc_lv<64> load64_2::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<4> load64_2::ap_const_lv4_8 = "1000";
const sc_lv<4> load64_2::ap_const_lv4_1 = "1";
const sc_lv<3> load64_2::ap_const_lv3_0 = "000";
const sc_lv<1> load64_2::ap_const_lv1_1 = "1";
const bool load64_2::ap_const_boolean_1 = true;

load64_2::load64_2(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln31_fu_85_p2);
    sensitive << ( trunc_ln31_reg_127 );
    sensitive << ( zext_ln31_fu_81_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln30_fu_69_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln30_fu_69_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln30_fu_69_p2 );
    sensitive << ( r_0_reg_53 );
    sensitive << ( ap_return_preg );

    SC_METHOD(thread_i_fu_75_p2);
    sensitive << ( i_0_reg_41 );

    SC_METHOD(thread_icmp_ln30_fu_69_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_41 );

    SC_METHOD(thread_r_fu_121_p2);
    sensitive << ( r_0_reg_53 );
    sensitive << ( shl_ln31_fu_115_p2 );

    SC_METHOD(thread_shl_ln31_fu_115_p2);
    sensitive << ( zext_ln31_1_fu_95_p1 );
    sensitive << ( zext_ln31_2_fu_111_p1 );

    SC_METHOD(thread_shl_ln_fu_103_p3);
    sensitive << ( trunc_ln31_3_fu_99_p1 );

    SC_METHOD(thread_trunc_ln31_3_fu_99_p1);
    sensitive << ( i_0_reg_41 );

    SC_METHOD(thread_trunc_ln31_fu_65_p1);
    sensitive << ( x_offset );

    SC_METHOD(thread_x_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln31_9_fu_90_p1 );

    SC_METHOD(thread_x_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_zext_ln31_1_fu_95_p1);
    sensitive << ( x_q0 );

    SC_METHOD(thread_zext_ln31_2_fu_111_p1);
    sensitive << ( shl_ln_fu_103_p3 );

    SC_METHOD(thread_zext_ln31_9_fu_90_p1);
    sensitive << ( add_ln31_fu_85_p2 );

    SC_METHOD(thread_zext_ln31_fu_81_p1);
    sensitive << ( i_0_reg_41 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln30_fu_69_p2 );

    ap_CS_fsm = "001";
    ap_return_preg = "0000000000000000000000000000000000000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "load64_2_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x_address0, "(port)x_address0");
    sc_trace(mVcdFile, x_ce0, "(port)x_ce0");
    sc_trace(mVcdFile, x_q0, "(port)x_q0");
    sc_trace(mVcdFile, x_offset, "(port)x_offset");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, trunc_ln31_fu_65_p1, "trunc_ln31_fu_65_p1");
    sc_trace(mVcdFile, trunc_ln31_reg_127, "trunc_ln31_reg_127");
    sc_trace(mVcdFile, i_fu_75_p2, "i_fu_75_p2");
    sc_trace(mVcdFile, i_reg_135, "i_reg_135");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln30_fu_69_p2, "icmp_ln30_fu_69_p2");
    sc_trace(mVcdFile, r_fu_121_p2, "r_fu_121_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_0_reg_41, "i_0_reg_41");
    sc_trace(mVcdFile, r_0_reg_53, "r_0_reg_53");
    sc_trace(mVcdFile, zext_ln31_9_fu_90_p1, "zext_ln31_9_fu_90_p1");
    sc_trace(mVcdFile, zext_ln31_fu_81_p1, "zext_ln31_fu_81_p1");
    sc_trace(mVcdFile, add_ln31_fu_85_p2, "add_ln31_fu_85_p2");
    sc_trace(mVcdFile, trunc_ln31_3_fu_99_p1, "trunc_ln31_3_fu_99_p1");
    sc_trace(mVcdFile, shl_ln_fu_103_p3, "shl_ln_fu_103_p3");
    sc_trace(mVcdFile, zext_ln31_1_fu_95_p1, "zext_ln31_1_fu_95_p1");
    sc_trace(mVcdFile, zext_ln31_2_fu_111_p1, "zext_ln31_2_fu_111_p1");
    sc_trace(mVcdFile, shl_ln31_fu_115_p2, "shl_ln31_fu_115_p2");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

load64_2::~load64_2() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void load64_2::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv64_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(icmp_ln30_fu_69_p2.read(), ap_const_lv1_1))) {
            ap_return_preg = r_0_reg_53.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_0_reg_41 = i_reg_135.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_41 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        r_0_reg_53 = r_fu_121_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        r_0_reg_53 = ap_const_lv64_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_135 = i_fu_75_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        trunc_ln31_reg_127 = trunc_ln31_fu_65_p1.read();
    }
}

void load64_2::thread_add_ln31_fu_85_p2() {
    add_ln31_fu_85_p2 = (!trunc_ln31_reg_127.read().is_01() || !zext_ln31_fu_81_p1.read().is_01())? sc_lv<14>(): (sc_biguint<14>(trunc_ln31_reg_127.read()) + sc_biguint<14>(zext_ln31_fu_81_p1.read()));
}

void load64_2::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void load64_2::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void load64_2::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void load64_2::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln30_fu_69_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void load64_2::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void load64_2::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln30_fu_69_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void load64_2::thread_ap_return() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln30_fu_69_p2.read(), ap_const_lv1_1))) {
        ap_return = r_0_reg_53.read();
    } else {
        ap_return = ap_return_preg.read();
    }
}

void load64_2::thread_i_fu_75_p2() {
    i_fu_75_p2 = (!i_0_reg_41.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_0_reg_41.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void load64_2::thread_icmp_ln30_fu_69_p2() {
    icmp_ln30_fu_69_p2 = (!i_0_reg_41.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_41.read() == ap_const_lv4_8);
}

void load64_2::thread_r_fu_121_p2() {
    r_fu_121_p2 = (shl_ln31_fu_115_p2.read() | r_0_reg_53.read());
}

void load64_2::thread_shl_ln31_fu_115_p2() {
    shl_ln31_fu_115_p2 = (!zext_ln31_2_fu_111_p1.read().is_01())? sc_lv<64>(): zext_ln31_1_fu_95_p1.read() << (unsigned short)zext_ln31_2_fu_111_p1.read().to_uint();
}

void load64_2::thread_shl_ln_fu_103_p3() {
    shl_ln_fu_103_p3 = esl_concat<3,3>(trunc_ln31_3_fu_99_p1.read(), ap_const_lv3_0);
}

void load64_2::thread_trunc_ln31_3_fu_99_p1() {
    trunc_ln31_3_fu_99_p1 = i_0_reg_41.read().range(3-1, 0);
}

void load64_2::thread_trunc_ln31_fu_65_p1() {
    trunc_ln31_fu_65_p1 = x_offset.read().range(14-1, 0);
}

void load64_2::thread_x_address0() {
    x_address0 =  (sc_lv<13>) (zext_ln31_9_fu_90_p1.read());
}

void load64_2::thread_x_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        x_ce0 = ap_const_logic_1;
    } else {
        x_ce0 = ap_const_logic_0;
    }
}

void load64_2::thread_zext_ln31_1_fu_95_p1() {
    zext_ln31_1_fu_95_p1 = esl_zext<64,8>(x_q0.read());
}

void load64_2::thread_zext_ln31_2_fu_111_p1() {
    zext_ln31_2_fu_111_p1 = esl_zext<64,6>(shl_ln_fu_103_p3.read());
}

void load64_2::thread_zext_ln31_9_fu_90_p1() {
    zext_ln31_9_fu_90_p1 = esl_zext<64,14>(add_ln31_fu_85_p2.read());
}

void load64_2::thread_zext_ln31_fu_81_p1() {
    zext_ln31_fu_81_p1 = esl_zext<14,4>(i_0_reg_41.read());
}

void load64_2::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln30_fu_69_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

