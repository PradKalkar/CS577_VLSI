// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _load64_3_HH_
#define _load64_3_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct load64_3 : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > x_0_read;
    sc_in< sc_lv<8> > x_1_read;
    sc_in< sc_lv<64> > x_offset;
    sc_out< sc_lv<64> > ap_return;


    // Module declarations
    load64_3(sc_module_name name);
    SC_HAS_PROCESS(load64_3);

    ~load64_3();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > trunc_ln31_fu_66_p1;
    sc_signal< sc_lv<1> > trunc_ln31_reg_139;
    sc_signal< sc_lv<4> > i_fu_76_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<64> > r_fu_123_p2;
    sc_signal< sc_lv<1> > icmp_ln30_fu_70_p2;
    sc_signal< sc_lv<4> > i_0_reg_44;
    sc_signal< sc_lv<64> > r_0_reg_55;
    sc_signal< sc_lv<1> > trunc_ln31_1_fu_82_p1;
    sc_signal< sc_lv<1> > xor_ln31_fu_86_p2;
    sc_signal< sc_lv<8> > select_ln31_fu_91_p3;
    sc_signal< sc_lv<3> > trunc_ln31_2_fu_101_p1;
    sc_signal< sc_lv<6> > shl_ln_fu_105_p3;
    sc_signal< sc_lv<64> > zext_ln31_fu_97_p1;
    sc_signal< sc_lv<64> > zext_ln31_1_fu_113_p1;
    sc_signal< sc_lv<64> > shl_ln31_fu_117_p2;
    sc_signal< sc_lv<64> > ap_return_preg;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_i_fu_76_p2();
    void thread_icmp_ln30_fu_70_p2();
    void thread_r_fu_123_p2();
    void thread_select_ln31_fu_91_p3();
    void thread_shl_ln31_fu_117_p2();
    void thread_shl_ln_fu_105_p3();
    void thread_trunc_ln31_1_fu_82_p1();
    void thread_trunc_ln31_2_fu_101_p1();
    void thread_trunc_ln31_fu_66_p1();
    void thread_xor_ln31_fu_86_p2();
    void thread_zext_ln31_1_fu_113_p1();
    void thread_zext_ln31_fu_97_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
