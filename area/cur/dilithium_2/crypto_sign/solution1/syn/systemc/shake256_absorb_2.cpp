// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "shake256_absorb_2.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic shake256_absorb_2::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic shake256_absorb_2::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> shake256_absorb_2::ap_ST_fsm_state1 = "1";
const sc_lv<7> shake256_absorb_2::ap_ST_fsm_state2 = "10";
const sc_lv<7> shake256_absorb_2::ap_ST_fsm_state3 = "100";
const sc_lv<7> shake256_absorb_2::ap_ST_fsm_state4 = "1000";
const sc_lv<7> shake256_absorb_2::ap_ST_fsm_state5 = "10000";
const sc_lv<7> shake256_absorb_2::ap_ST_fsm_state6 = "100000";
const sc_lv<7> shake256_absorb_2::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> shake256_absorb_2::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> shake256_absorb_2::ap_const_lv32_1 = "1";
const sc_lv<32> shake256_absorb_2::ap_const_lv32_2 = "10";
const sc_lv<32> shake256_absorb_2::ap_const_lv32_3 = "11";
const sc_lv<32> shake256_absorb_2::ap_const_lv32_4 = "100";
const sc_lv<1> shake256_absorb_2::ap_const_lv1_0 = "0";
const sc_lv<1> shake256_absorb_2::ap_const_lv1_1 = "1";
const sc_lv<32> shake256_absorb_2::ap_const_lv32_5 = "101";
const sc_lv<3> shake256_absorb_2::ap_const_lv3_0 = "000";
const sc_lv<4> shake256_absorb_2::ap_const_lv4_0 = "0000";
const sc_lv<2> shake256_absorb_2::ap_const_lv2_0 = "00";
const sc_lv<64> shake256_absorb_2::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> shake256_absorb_2::ap_const_lv64_6 = "110";
const sc_lv<8> shake256_absorb_2::ap_const_lv8_0 = "00000000";
const sc_lv<32> shake256_absorb_2::ap_const_lv32_6 = "110";
const sc_lv<3> shake256_absorb_2::ap_const_lv3_1 = "1";
const sc_lv<3> shake256_absorb_2::ap_const_lv3_7 = "111";
const sc_lv<4> shake256_absorb_2::ap_const_lv4_8 = "1000";
const sc_lv<4> shake256_absorb_2::ap_const_lv4_1 = "1";
const sc_lv<2> shake256_absorb_2::ap_const_lv2_2 = "10";
const sc_lv<2> shake256_absorb_2::ap_const_lv2_1 = "1";
const bool shake256_absorb_2::ap_const_boolean_1 = true;

shake256_absorb_2::shake256_absorb_2(sc_module_name name) : sc_module(name), mVcdFile(0) {
    t_U = new shake256_absorb_4_t("t_U");
    t_U->clk(ap_clk);
    t_U->reset(ap_rst);
    t_U->address0(t_address0);
    t_U->ce0(t_ce0);
    t_U->we0(t_we0);
    t_U->d0(t_d0);
    t_U->q0(t_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln388_fu_167_p2);
    sensitive << ( phi_ln388_reg_110 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_i_15_fu_212_p2);
    sensitive << ( i_5_i_reg_132 );

    SC_METHOD(thread_i_16_fu_235_p2);
    sensitive << ( i_0_i2_reg_143 );

    SC_METHOD(thread_i_fu_190_p2);
    sensitive << ( i_4_i_reg_121 );

    SC_METHOD(thread_icmp_ln30_fu_229_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( i_0_i2_reg_143 );

    SC_METHOD(thread_icmp_ln388_fu_178_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( phi_ln388_reg_110 );

    SC_METHOD(thread_icmp_ln424_fu_184_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_4_i_reg_121 );

    SC_METHOD(thread_icmp_ln426_fu_206_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( i_5_i_reg_132 );

    SC_METHOD(thread_r_fu_272_p2);
    sensitive << ( r_0_i3_reg_155 );
    sensitive << ( shl_ln31_fu_266_p2 );

    SC_METHOD(thread_select_ln427_fu_222_p3);
    sensitive << ( in_0_read );
    sensitive << ( in_1_read );
    sensitive << ( trunc_ln427_fu_218_p1 );

    SC_METHOD(thread_shl_ln31_fu_266_p2);
    sensitive << ( zext_ln31_6_fu_246_p1 );
    sensitive << ( zext_ln31_7_fu_262_p1 );

    SC_METHOD(thread_shl_ln_fu_254_p3);
    sensitive << ( trunc_ln31_fu_250_p1 );

    SC_METHOD(thread_state_s_addr_reg_332);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln30_fu_229_p2 );

    SC_METHOD(thread_state_s_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( state_s_addr_reg_332 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_state_s_ce0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_state_s_d0);
    sensitive << ( state_s_q0 );
    sensitive << ( r_0_i3_reg_155 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_state_s_we0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_t_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( zext_ln388_fu_173_p1 );
    sensitive << ( zext_ln425_fu_196_p1 );
    sensitive << ( zext_ln426_fu_201_p1 );
    sensitive << ( zext_ln31_fu_241_p1 );

    SC_METHOD(thread_t_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_t_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( select_ln427_fu_222_p3 );

    SC_METHOD(thread_t_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln424_fu_184_p2 );
    sensitive << ( icmp_ln426_fu_206_p2 );

    SC_METHOD(thread_trunc_ln31_fu_250_p1);
    sensitive << ( i_0_i2_reg_143 );

    SC_METHOD(thread_trunc_ln427_fu_218_p1);
    sensitive << ( i_5_i_reg_132 );

    SC_METHOD(thread_zext_ln31_6_fu_246_p1);
    sensitive << ( t_q0 );

    SC_METHOD(thread_zext_ln31_7_fu_262_p1);
    sensitive << ( shl_ln_fu_254_p3 );

    SC_METHOD(thread_zext_ln31_fu_241_p1);
    sensitive << ( i_0_i2_reg_143 );

    SC_METHOD(thread_zext_ln388_fu_173_p1);
    sensitive << ( phi_ln388_reg_110 );

    SC_METHOD(thread_zext_ln425_fu_196_p1);
    sensitive << ( i_4_i_reg_121 );

    SC_METHOD(thread_zext_ln426_fu_201_p1);
    sensitive << ( i_5_i_reg_132 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln30_fu_229_p2 );
    sensitive << ( icmp_ln388_fu_178_p2 );
    sensitive << ( icmp_ln424_fu_184_p2 );
    sensitive << ( icmp_ln426_fu_206_p2 );

    ap_CS_fsm = "0000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "shake256_absorb_2_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, state_s_address0, "(port)state_s_address0");
    sc_trace(mVcdFile, state_s_ce0, "(port)state_s_ce0");
    sc_trace(mVcdFile, state_s_we0, "(port)state_s_we0");
    sc_trace(mVcdFile, state_s_d0, "(port)state_s_d0");
    sc_trace(mVcdFile, state_s_q0, "(port)state_s_q0");
    sc_trace(mVcdFile, in_0_read, "(port)in_0_read");
    sc_trace(mVcdFile, in_1_read, "(port)in_1_read");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, add_ln388_fu_167_p2, "add_ln388_fu_167_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_fu_190_p2, "i_fu_190_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_15_fu_212_p2, "i_15_fu_212_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_16_fu_235_p2, "i_16_fu_235_p2");
    sc_trace(mVcdFile, i_16_reg_322, "i_16_reg_322");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, icmp_ln30_fu_229_p2, "icmp_ln30_fu_229_p2");
    sc_trace(mVcdFile, state_s_addr_reg_332, "state_s_addr_reg_332");
    sc_trace(mVcdFile, r_fu_272_p2, "r_fu_272_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, t_address0, "t_address0");
    sc_trace(mVcdFile, t_ce0, "t_ce0");
    sc_trace(mVcdFile, t_we0, "t_we0");
    sc_trace(mVcdFile, t_d0, "t_d0");
    sc_trace(mVcdFile, t_q0, "t_q0");
    sc_trace(mVcdFile, phi_ln388_reg_110, "phi_ln388_reg_110");
    sc_trace(mVcdFile, icmp_ln388_fu_178_p2, "icmp_ln388_fu_178_p2");
    sc_trace(mVcdFile, i_4_i_reg_121, "i_4_i_reg_121");
    sc_trace(mVcdFile, icmp_ln424_fu_184_p2, "icmp_ln424_fu_184_p2");
    sc_trace(mVcdFile, i_5_i_reg_132, "i_5_i_reg_132");
    sc_trace(mVcdFile, icmp_ln426_fu_206_p2, "icmp_ln426_fu_206_p2");
    sc_trace(mVcdFile, i_0_i2_reg_143, "i_0_i2_reg_143");
    sc_trace(mVcdFile, r_0_i3_reg_155, "r_0_i3_reg_155");
    sc_trace(mVcdFile, zext_ln388_fu_173_p1, "zext_ln388_fu_173_p1");
    sc_trace(mVcdFile, zext_ln425_fu_196_p1, "zext_ln425_fu_196_p1");
    sc_trace(mVcdFile, zext_ln426_fu_201_p1, "zext_ln426_fu_201_p1");
    sc_trace(mVcdFile, zext_ln31_fu_241_p1, "zext_ln31_fu_241_p1");
    sc_trace(mVcdFile, select_ln427_fu_222_p3, "select_ln427_fu_222_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, trunc_ln427_fu_218_p1, "trunc_ln427_fu_218_p1");
    sc_trace(mVcdFile, trunc_ln31_fu_250_p1, "trunc_ln31_fu_250_p1");
    sc_trace(mVcdFile, shl_ln_fu_254_p3, "shl_ln_fu_254_p3");
    sc_trace(mVcdFile, zext_ln31_6_fu_246_p1, "zext_ln31_6_fu_246_p1");
    sc_trace(mVcdFile, zext_ln31_7_fu_262_p1, "zext_ln31_7_fu_262_p1");
    sc_trace(mVcdFile, shl_ln31_fu_266_p2, "shl_ln31_fu_266_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

shake256_absorb_2::~shake256_absorb_2() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete t_U;
}

void shake256_absorb_2::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln426_fu_206_p2.read()))) {
        i_0_i2_reg_143 = ap_const_lv4_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        i_0_i2_reg_143 = i_16_reg_322.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln388_fu_178_p2.read()))) {
        i_4_i_reg_121 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln424_fu_184_p2.read()))) {
        i_4_i_reg_121 = i_fu_190_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln424_fu_184_p2.read()))) {
        i_5_i_reg_132 = ap_const_lv2_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln426_fu_206_p2.read()))) {
        i_5_i_reg_132 = i_15_fu_212_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln388_fu_178_p2.read()))) {
        phi_ln388_reg_110 = add_ln388_fu_167_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        phi_ln388_reg_110 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln426_fu_206_p2.read()))) {
        r_0_i3_reg_155 = ap_const_lv64_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        r_0_i3_reg_155 = r_fu_272_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_16_reg_322 = i_16_fu_235_p2.read();
    }
}

void shake256_absorb_2::thread_add_ln388_fu_167_p2() {
    add_ln388_fu_167_p2 = (!phi_ln388_reg_110.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(phi_ln388_reg_110.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void shake256_absorb_2::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void shake256_absorb_2::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void shake256_absorb_2::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void shake256_absorb_2::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void shake256_absorb_2::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void shake256_absorb_2::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void shake256_absorb_2::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void shake256_absorb_2::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void shake256_absorb_2::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void shake256_absorb_2::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void shake256_absorb_2::thread_i_15_fu_212_p2() {
    i_15_fu_212_p2 = (!i_5_i_reg_132.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i_5_i_reg_132.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void shake256_absorb_2::thread_i_16_fu_235_p2() {
    i_16_fu_235_p2 = (!i_0_i2_reg_143.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_0_i2_reg_143.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void shake256_absorb_2::thread_i_fu_190_p2() {
    i_fu_190_p2 = (!i_4_i_reg_121.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_4_i_reg_121.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void shake256_absorb_2::thread_icmp_ln30_fu_229_p2() {
    icmp_ln30_fu_229_p2 = (!i_0_i2_reg_143.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i2_reg_143.read() == ap_const_lv4_8);
}

void shake256_absorb_2::thread_icmp_ln388_fu_178_p2() {
    icmp_ln388_fu_178_p2 = (!phi_ln388_reg_110.read().is_01() || !ap_const_lv3_7.is_01())? sc_lv<1>(): sc_lv<1>(phi_ln388_reg_110.read() == ap_const_lv3_7);
}

void shake256_absorb_2::thread_icmp_ln424_fu_184_p2() {
    icmp_ln424_fu_184_p2 = (!i_4_i_reg_121.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i_4_i_reg_121.read() == ap_const_lv4_8);
}

void shake256_absorb_2::thread_icmp_ln426_fu_206_p2() {
    icmp_ln426_fu_206_p2 = (!i_5_i_reg_132.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(i_5_i_reg_132.read() == ap_const_lv2_2);
}

void shake256_absorb_2::thread_r_fu_272_p2() {
    r_fu_272_p2 = (shl_ln31_fu_266_p2.read() | r_0_i3_reg_155.read());
}

void shake256_absorb_2::thread_select_ln427_fu_222_p3() {
    select_ln427_fu_222_p3 = (!trunc_ln427_fu_218_p1.read()[0].is_01())? sc_lv<8>(): ((trunc_ln427_fu_218_p1.read()[0].to_bool())? in_1_read.read(): in_0_read.read());
}

void shake256_absorb_2::thread_shl_ln31_fu_266_p2() {
    shl_ln31_fu_266_p2 = (!zext_ln31_7_fu_262_p1.read().is_01())? sc_lv<64>(): zext_ln31_6_fu_246_p1.read() << (unsigned short)zext_ln31_7_fu_262_p1.read().to_uint();
}

void shake256_absorb_2::thread_shl_ln_fu_254_p3() {
    shl_ln_fu_254_p3 = esl_concat<3,3>(trunc_ln31_fu_250_p1.read(), ap_const_lv3_0);
}

void shake256_absorb_2::thread_state_s_addr_reg_332() {
    state_s_addr_reg_332 =  (sc_lv<5>) (ap_const_lv64_6);
}

void shake256_absorb_2::thread_state_s_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_s_address0 = state_s_addr_reg_332.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_s_address0 =  (sc_lv<5>) (ap_const_lv64_6);
    } else {
        state_s_address0 = "XXXXX";
    }
}

void shake256_absorb_2::thread_state_s_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        state_s_ce0 = ap_const_logic_1;
    } else {
        state_s_ce0 = ap_const_logic_0;
    }
}

void shake256_absorb_2::thread_state_s_d0() {
    state_s_d0 = (state_s_q0.read() ^ r_0_i3_reg_155.read());
}

void shake256_absorb_2::thread_state_s_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_s_we0 = ap_const_logic_1;
    } else {
        state_s_we0 = ap_const_logic_0;
    }
}

void shake256_absorb_2::thread_t_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        t_address0 =  (sc_lv<3>) (zext_ln31_fu_241_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        t_address0 =  (sc_lv<3>) (zext_ln426_fu_201_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        t_address0 =  (sc_lv<3>) (zext_ln425_fu_196_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        t_address0 =  (sc_lv<3>) (zext_ln388_fu_173_p1.read());
    } else {
        t_address0 =  (sc_lv<3>) ("XXX");
    }
}

void shake256_absorb_2::thread_t_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        t_ce0 = ap_const_logic_1;
    } else {
        t_ce0 = ap_const_logic_0;
    }
}

void shake256_absorb_2::thread_t_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        t_d0 = select_ln427_fu_222_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        t_d0 = ap_const_lv8_0;
    } else {
        t_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void shake256_absorb_2::thread_t_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln424_fu_184_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln426_fu_206_p2.read())))) {
        t_we0 = ap_const_logic_1;
    } else {
        t_we0 = ap_const_logic_0;
    }
}

void shake256_absorb_2::thread_trunc_ln31_fu_250_p1() {
    trunc_ln31_fu_250_p1 = i_0_i2_reg_143.read().range(3-1, 0);
}

void shake256_absorb_2::thread_trunc_ln427_fu_218_p1() {
    trunc_ln427_fu_218_p1 = i_5_i_reg_132.read().range(1-1, 0);
}

void shake256_absorb_2::thread_zext_ln31_6_fu_246_p1() {
    zext_ln31_6_fu_246_p1 = esl_zext<64,8>(t_q0.read());
}

void shake256_absorb_2::thread_zext_ln31_7_fu_262_p1() {
    zext_ln31_7_fu_262_p1 = esl_zext<64,6>(shl_ln_fu_254_p3.read());
}

void shake256_absorb_2::thread_zext_ln31_fu_241_p1() {
    zext_ln31_fu_241_p1 = esl_zext<64,4>(i_0_i2_reg_143.read());
}

void shake256_absorb_2::thread_zext_ln388_fu_173_p1() {
    zext_ln388_fu_173_p1 = esl_zext<64,3>(phi_ln388_reg_110.read());
}

void shake256_absorb_2::thread_zext_ln425_fu_196_p1() {
    zext_ln425_fu_196_p1 = esl_zext<64,4>(i_4_i_reg_121.read());
}

void shake256_absorb_2::thread_zext_ln426_fu_201_p1() {
    zext_ln426_fu_201_p1 = esl_zext<64,2>(i_5_i_reg_132.read());
}

void shake256_absorb_2::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln388_fu_178_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln424_fu_184_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln426_fu_206_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(icmp_ln30_fu_229_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<7>) ("XXXXXXX");
            break;
    }
}

}

