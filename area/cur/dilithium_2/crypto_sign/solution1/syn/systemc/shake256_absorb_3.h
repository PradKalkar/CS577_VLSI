// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _shake256_absorb_3_HH_
#define _shake256_absorb_3_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct shake256_absorb_3 : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<5> > state_s_address0;
    sc_out< sc_logic > state_s_ce0;
    sc_out< sc_logic > state_s_we0;
    sc_out< sc_lv<64> > state_s_d0;
    sc_in< sc_lv<64> > state_s_q0;
    sc_out< sc_lv<8> > in_r_address0;
    sc_out< sc_logic > in_r_ce0;
    sc_in< sc_lv<8> > in_r_q0;
    sc_in< sc_lv<8> > in_offset;


    // Module declarations
    shake256_absorb_3(sc_module_name name);
    SC_HAS_PROCESS(shake256_absorb_3);

    ~shake256_absorb_3();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<64> > zext_ln417_fu_97_p1;
    sc_signal< sc_lv<64> > zext_ln417_reg_200;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<3> > add_ln417_fu_107_p2;
    sc_signal< sc_lv<3> > add_ln417_reg_208;
    sc_signal< sc_lv<6> > shl_ln_fu_113_p3;
    sc_signal< sc_lv<6> > shl_ln_reg_213;
    sc_signal< sc_lv<1> > icmp_ln417_fu_101_p2;
    sc_signal< sc_lv<4> > i_fu_131_p2;
    sc_signal< sc_lv<4> > i_reg_221;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > icmp_ln30_fu_125_p2;
    sc_signal< sc_lv<5> > state_s_addr_2_reg_231;
    sc_signal< sc_lv<64> > r_fu_182_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > i_3_i_reg_62;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<4> > i_0_i1_reg_73;
    sc_signal< sc_lv<64> > r_0_i2_reg_85;
    sc_signal< sc_lv<64> > zext_ln31_3_fu_151_p1;
    sc_signal< sc_lv<6> > zext_ln30_fu_121_p1;
    sc_signal< sc_lv<6> > add_ln31_1_fu_137_p2;
    sc_signal< sc_lv<8> > zext_ln31_fu_142_p1;
    sc_signal< sc_lv<8> > add_ln31_fu_146_p2;
    sc_signal< sc_lv<3> > trunc_ln31_fu_160_p1;
    sc_signal< sc_lv<6> > shl_ln5_fu_164_p3;
    sc_signal< sc_lv<64> > zext_ln31_4_fu_156_p1;
    sc_signal< sc_lv<64> > zext_ln31_5_fu_172_p1;
    sc_signal< sc_lv<64> > shl_ln31_fu_176_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<3> ap_const_lv3_6;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln31_1_fu_137_p2();
    void thread_add_ln31_fu_146_p2();
    void thread_add_ln417_fu_107_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_fu_131_p2();
    void thread_icmp_ln30_fu_125_p2();
    void thread_icmp_ln417_fu_101_p2();
    void thread_in_r_address0();
    void thread_in_r_ce0();
    void thread_r_fu_182_p2();
    void thread_shl_ln31_fu_176_p2();
    void thread_shl_ln5_fu_164_p3();
    void thread_shl_ln_fu_113_p3();
    void thread_state_s_address0();
    void thread_state_s_ce0();
    void thread_state_s_d0();
    void thread_state_s_we0();
    void thread_trunc_ln31_fu_160_p1();
    void thread_zext_ln30_fu_121_p1();
    void thread_zext_ln31_3_fu_151_p1();
    void thread_zext_ln31_4_fu_156_p1();
    void thread_zext_ln31_5_fu_172_p1();
    void thread_zext_ln31_fu_142_p1();
    void thread_zext_ln417_fu_97_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
