-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dilithium_shake128_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    state_s_ce0 : OUT STD_LOGIC;
    state_s_we0 : OUT STD_LOGIC;
    state_s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    state_s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    state_s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    state_s_ce1 : OUT STD_LOGIC;
    state_s_we1 : OUT STD_LOGIC;
    state_s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    state_s_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    seed_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    seed_ce0 : OUT STD_LOGIC;
    seed_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    nonce : IN STD_LOGIC_VECTOR (9 downto 0) );
end;


architecture behav of dilithium_shake128_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv64_1F0000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000111110000000000000000";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_280_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln417_fu_291_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln417_reg_547 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln417_fu_301_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln417_reg_555 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_311_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_reg_560 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln417_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_29_fu_325_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_29_reg_568 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln30_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_s_addr_1_reg_578 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_fu_371_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln388_fu_384_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_30_fu_407_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_31_fu_429_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_32_fu_470_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_32_reg_615 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln30_2_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_2_fu_507_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_ce0 : STD_LOGIC;
    signal t_we0 : STD_LOGIC;
    signal t_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_i_i1_reg_171 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln362_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_i_i31_reg_182 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_0_i_reg_193 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_0_i_reg_205 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_ln388_reg_217 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln388_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_i_i_reg_228 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln424_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_i_i_reg_239 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln426_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i29_reg_250 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_0_i30_reg_262 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln363_fu_286_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_8_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln388_fu_390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln425_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln426_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_11_fu_476_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln418_fu_377_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal xor_ln452_fu_526_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln427_fu_455_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln418_fu_307_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln31_fu_331_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln31_fu_335_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln31_fu_349_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln13_fu_353_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_9_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_10_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln31_fu_365_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_439_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln427_fu_435_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln427_fu_448_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln427_2_fu_452_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln31_3_fu_485_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln31_5_fu_489_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_12_fu_481_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_13_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln31_2_fu_501_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln428_fu_513_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component dilithium_shake12dEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    t_U : component dilithium_shake12dEe
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t_address0,
        ce0 => t_ce0,
        we0 => t_we0,
        d0 => t_d0,
        q0 => t_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_i29_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln426_fu_423_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_0_i29_reg_250 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_0_i29_reg_250 <= i_32_reg_615;
            end if; 
        end if;
    end process;

    i_0_i_i1_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln362_fu_274_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_i_i1_reg_171 <= i_fu_280_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_i_i1_reg_171 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_i_reg_193 <= i_29_reg_568;
            elsif (((icmp_ln417_fu_295_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_i_reg_193 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_3_i_i31_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln362_fu_274_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_3_i_i31_reg_182 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_3_i_i31_reg_182 <= add_ln417_reg_555;
            end if; 
        end if;
    end process;

    i_4_i_i_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln388_fu_395_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_4_i_i_reg_228 <= ap_const_lv4_0;
            elsif (((icmp_ln424_fu_401_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_4_i_i_reg_228 <= i_30_fu_407_p2;
            end if; 
        end if;
    end process;

    i_5_i_i_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln424_fu_401_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_5_i_i_reg_239 <= ap_const_lv2_0;
            elsif (((icmp_ln426_fu_423_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_5_i_i_reg_239 <= i_31_fu_429_p2;
            end if; 
        end if;
    end process;

    phi_ln388_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln417_fu_295_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln388_reg_217 <= ap_const_lv3_0;
            elsif (((icmp_ln388_fu_395_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                phi_ln388_reg_217 <= add_ln388_fu_384_p2;
            end if; 
        end if;
    end process;

    r_0_i30_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln426_fu_423_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                r_0_i30_reg_262 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                r_0_i30_reg_262 <= r_2_fu_507_p2;
            end if; 
        end if;
    end process;

    r_0_i_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                r_0_i_reg_205 <= r_fu_371_p2;
            elsif (((icmp_ln417_fu_295_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_0_i_reg_205 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln417_reg_555 <= add_ln417_fu_301_p2;
                    zext_ln417_reg_547(2 downto 0) <= zext_ln417_fu_291_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_29_reg_568 <= i_29_fu_325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_32_reg_615 <= i_32_fu_470_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln417_fu_295_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    shl_ln_reg_560(4 downto 3) <= shl_ln_fu_311_p3(4 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_319_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    state_s_addr_1_reg_578(2 downto 0) <= zext_ln417_reg_547(5 - 1 downto 0)(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln417_reg_547(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    shl_ln_reg_560(2 downto 0) <= "000";
    state_s_addr_1_reg_578(4 downto 3) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln417_fu_295_p2, ap_CS_fsm_state4, icmp_ln30_fu_319_p2, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, icmp_ln30_2_fu_464_p2, icmp_ln362_fu_274_p2, icmp_ln388_fu_395_p2, icmp_ln424_fu_401_p2, icmp_ln426_fu_423_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln362_fu_274_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln417_fu_295_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln30_fu_319_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln388_fu_395_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln424_fu_401_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln426_fu_423_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln30_2_fu_464_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln31_fu_335_p2 <= std_logic_vector(unsigned(shl_ln_reg_560) + unsigned(zext_ln31_fu_331_p1));
    add_ln388_fu_384_p2 <= std_logic_vector(unsigned(phi_ln388_reg_217) + unsigned(ap_const_lv3_1));
    add_ln417_fu_301_p2 <= std_logic_vector(unsigned(i_3_i_i31_reg_182) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_29_fu_325_p2 <= std_logic_vector(unsigned(i_0_i_reg_193) + unsigned(ap_const_lv4_1));
    i_30_fu_407_p2 <= std_logic_vector(unsigned(i_4_i_i_reg_228) + unsigned(ap_const_lv4_1));
    i_31_fu_429_p2 <= std_logic_vector(unsigned(i_5_i_i_reg_239) + unsigned(ap_const_lv2_1));
    i_32_fu_470_p2 <= std_logic_vector(unsigned(i_0_i29_reg_250) + unsigned(ap_const_lv4_1));
    i_fu_280_p2 <= std_logic_vector(unsigned(i_0_i_i1_reg_171) + unsigned(ap_const_lv5_1));
    icmp_ln30_2_fu_464_p2 <= "1" when (i_0_i29_reg_250 = ap_const_lv4_8) else "0";
    icmp_ln30_fu_319_p2 <= "1" when (i_0_i_reg_193 = ap_const_lv4_8) else "0";
    icmp_ln362_fu_274_p2 <= "1" when (i_0_i_i1_reg_171 = ap_const_lv5_19) else "0";
    icmp_ln388_fu_395_p2 <= "1" when (phi_ln388_reg_217 = ap_const_lv3_7) else "0";
    icmp_ln417_fu_295_p2 <= "1" when (i_3_i_i31_reg_182 = ap_const_lv3_4) else "0";
    icmp_ln424_fu_401_p2 <= "1" when (i_4_i_i_reg_228 = ap_const_lv4_8) else "0";
    icmp_ln426_fu_423_p2 <= "1" when (i_5_i_i_reg_239 = ap_const_lv2_2) else "0";
    r_2_fu_507_p2 <= (shl_ln31_2_fu_501_p2 or r_0_i30_reg_262);
    r_fu_371_p2 <= (shl_ln31_fu_365_p2 or r_0_i_reg_205);
    seed_address0 <= zext_ln31_8_fu_340_p1(8 - 1 downto 0);

    seed_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            seed_ce0 <= ap_const_logic_1;
        else 
            seed_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln427_fu_455_p3 <= 
        zext_ln427_fu_448_p1 when (trunc_ln427_fu_435_p1(0) = '1') else 
        trunc_ln427_2_fu_452_p1;
    shl_ln13_fu_353_p3 <= (trunc_ln31_fu_349_p1 & ap_const_lv3_0);
    shl_ln31_2_fu_501_p2 <= std_logic_vector(shift_left(unsigned(zext_ln31_12_fu_481_p1),to_integer(unsigned('0' & zext_ln31_13_fu_497_p1(31-1 downto 0)))));
    shl_ln31_5_fu_489_p3 <= (trunc_ln31_3_fu_485_p1 & ap_const_lv3_0);
    shl_ln31_fu_365_p2 <= std_logic_vector(shift_left(unsigned(zext_ln31_9_fu_345_p1),to_integer(unsigned('0' & zext_ln31_10_fu_361_p1(31-1 downto 0)))));
    shl_ln_fu_311_p3 <= (trunc_ln418_fu_307_p1 & ap_const_lv3_0);

    state_s_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln417_reg_547, ap_CS_fsm_state4, state_s_addr_1_reg_578, ap_CS_fsm_state10, ap_CS_fsm_state6, zext_ln363_fu_286_p1, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_s_address0 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_s_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_s_address0 <= state_s_addr_1_reg_578;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_s_address0 <= zext_ln417_reg_547(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_s_address0 <= zext_ln363_fu_286_p1(5 - 1 downto 0);
        else 
            state_s_address0 <= "XXXXX";
        end if; 
    end process;


    state_s_address1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_s_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_s_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        else 
            state_s_address1 <= "XXXXX";
        end if; 
    end process;


    state_s_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_s_ce0 <= ap_const_logic_1;
        else 
            state_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_s_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_s_ce1 <= ap_const_logic_1;
        else 
            state_s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_s_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, xor_ln418_fu_377_p2, ap_CS_fsm_state12, xor_ln452_fu_526_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_s_d0 <= xor_ln452_fu_526_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_s_d0 <= xor_ln418_fu_377_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_s_d0 <= ap_const_lv64_0;
        else 
            state_s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    state_s_d1 <= (xor_ln428_fu_513_p2 xor ap_const_lv64_1F0000);

    state_s_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln362_fu_274_p2, ap_CS_fsm_state6, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln362_fu_274_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            state_s_we0 <= ap_const_logic_1;
        else 
            state_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_s_we1_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_s_we1 <= ap_const_logic_1;
        else 
            state_s_we1 <= ap_const_logic_0;
        end if; 
    end process;


    t_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, zext_ln388_fu_390_p1, zext_ln425_fu_413_p1, zext_ln426_fu_418_p1, zext_ln31_11_fu_476_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            t_address0 <= zext_ln31_11_fu_476_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            t_address0 <= zext_ln426_fu_418_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            t_address0 <= zext_ln425_fu_413_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            t_address0 <= zext_ln388_fu_390_p1(3 - 1 downto 0);
        else 
            t_address0 <= "XXX";
        end if; 
    end process;


    t_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            t_ce0 <= ap_const_logic_1;
        else 
            t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t_d0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, select_ln427_fu_455_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            t_d0 <= select_ln427_fu_455_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            t_d0 <= ap_const_lv8_0;
        else 
            t_d0 <= "XXXXXXXX";
        end if; 
    end process;


    t_we0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, icmp_ln424_fu_401_p2, icmp_ln426_fu_423_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((icmp_ln426_fu_423_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((icmp_ln424_fu_401_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            t_we0 <= ap_const_logic_1;
        else 
            t_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_s_fu_439_p4 <= nonce(9 downto 8);
    trunc_ln31_3_fu_485_p1 <= i_0_i29_reg_250(3 - 1 downto 0);
    trunc_ln31_fu_349_p1 <= i_0_i_reg_193(3 - 1 downto 0);
    trunc_ln418_fu_307_p1 <= i_3_i_i31_reg_182(2 - 1 downto 0);
    trunc_ln427_2_fu_452_p1 <= nonce(8 - 1 downto 0);
    trunc_ln427_fu_435_p1 <= i_5_i_i_reg_239(1 - 1 downto 0);
    xor_ln418_fu_377_p2 <= (state_s_q0 xor r_0_i_reg_205);
    xor_ln428_fu_513_p2 <= (state_s_q0 xor r_0_i30_reg_262);
    xor_ln452_fu_526_p2 <= (state_s_q1 xor ap_const_lv64_8000000000000000);
    zext_ln31_10_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln13_fu_353_p3),64));
    zext_ln31_11_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i29_reg_250),64));
    zext_ln31_12_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_q0),64));
    zext_ln31_13_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln31_5_fu_489_p3),64));
    zext_ln31_8_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_fu_335_p2),64));
    zext_ln31_9_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(seed_q0),64));
    zext_ln31_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_193),5));
    zext_ln363_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i1_reg_171),64));
    zext_ln388_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln388_reg_217),64));
    zext_ln417_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_i_i31_reg_182),64));
    zext_ln425_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_i_i_reg_228),64));
    zext_ln426_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_i_i_reg_239),64));
    zext_ln427_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_439_p4),8));
end behav;
