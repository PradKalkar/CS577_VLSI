-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity keccak_absorb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce0 : OUT STD_LOGIC;
    s_we0 : OUT STD_LOGIC;
    s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce1 : OUT STD_LOGIC;
    s_we1 : OUT STD_LOGIC;
    s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    r : IN STD_LOGIC_VECTOR (8 downto 0);
    pos_r : IN STD_LOGIC_VECTOR (6 downto 0);
    m_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    m_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of keccak_absorb is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal empty_fu_454_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_reg_1100 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_69_fu_458_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_69_reg_1106 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln387_fu_462_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln389_fu_482_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln387_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln389_1_fu_486_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln389_1_reg_1124 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln391_2_fu_530_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln391_2_reg_1132 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln389_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln391_fu_536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln391_reg_1137 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast6_fu_540_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_cast6_reg_1142 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln393_fu_552_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln393_reg_1147 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln394_fu_558_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln394_reg_1152 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln392_fu_572_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_fu_585_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_38_fu_602_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_38_reg_1174 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln30_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_addr_reg_1184 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_2_fu_667_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sext_ln399_fu_684_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln399_reg_1194 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln399_fu_688_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln399_reg_1199 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln399_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln399_reg_1206 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln399_fu_702_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln399_reg_1210 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln399_1_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln399_1_reg_1216 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln402_fu_722_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln402_reg_1220 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_KeccakF1600_StatePer_1_fu_432_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_432_ap_done : STD_LOGIC;
    signal ap_predicate_op112_call_state8 : BOOLEAN;
    signal ap_block_state8_on_subcall_done : BOOLEAN;
    signal sext_ln402_fu_730_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln402_fu_734_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln402_reg_1230 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln402_2_fu_738_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln402_2_reg_1235 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln402_1_fu_747_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln402_1_reg_1240 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_75_fu_751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_75_reg_1246 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_1253 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln416_2_fu_778_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln416_2_reg_1261 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln408_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_reg_1266 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_39_fu_797_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_39_reg_1275 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln410_3_fu_821_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln410_3_reg_1280 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln409_fu_792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_addr_6_reg_1285 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln411_fu_832_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln411_reg_1290 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln414_fu_837_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln414_reg_1295 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln416_fu_851_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln416_reg_1303 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln417_3_fu_875_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln417_3_reg_1308 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln416_fu_846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_addr_5_reg_1313 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln419_fu_906_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln419_reg_1318 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln419_fu_912_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln419_reg_1323 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln420_fu_916_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln420_reg_1328 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln420_fu_921_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln420_reg_1333 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln422_fu_925_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln422_reg_1339 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_40_fu_937_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal trunc_ln426_fu_948_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln426_reg_1351 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln423_fu_931_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln426_fu_952_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln426_reg_1356 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_41_fu_970_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal i_42_fu_1003_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_42_reg_1372 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal icmp_ln30_2_fu_997_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_addr_7_reg_1382 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln428_fu_1028_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln428_reg_1387 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_3_fu_1057_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_ce0 : STD_LOGIC;
    signal t_we0 : STD_LOGIC;
    signal t_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_432_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_432_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_432_state_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_432_state_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_432_state_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_432_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_432_state_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_432_state_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_432_state_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_432_state_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_load64_3_fu_440_ap_start : STD_LOGIC;
    signal grp_load64_3_fu_440_ap_done : STD_LOGIC;
    signal grp_load64_3_fu_440_ap_idle : STD_LOGIC;
    signal grp_load64_3_fu_440_ap_ready : STD_LOGIC;
    signal grp_load64_3_fu_440_x_offset : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_load64_3_fu_440_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_ln387_reg_205 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_05_rec_reg_216 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_reg_227 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_236 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_0_i_reg_248 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_1620_reg_260 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal p_12_reg_272 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_1_reg_282 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_p_2722_phi_fu_297_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_2722_reg_293 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_p_23_phi_fu_310_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_23_reg_307 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln403_fu_716_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_p_2_phi_fu_325_p6 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_2_reg_322 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvars_iv_reg_333 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal p_38_rec_reg_343 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_reg_355 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_3_reg_366 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_4_reg_377 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_reg_388 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln425_fu_965_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i1_reg_399 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_0_i2_reg_411 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln428_fu_1070_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_p_34_phi_fu_426_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_34_reg_423 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_KeccakF1600_StatePer_1_fu_432_ap_start_reg : STD_LOGIC := '0';
    signal grp_load64_3_fu_440_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln387_fu_468_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln392_fu_591_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_fu_608_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln396_fu_636_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln410_1_fu_827_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln417_1_fu_886_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln424_fu_943_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln425_fu_956_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_15_fu_1009_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln427_fu_1023_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln392_fu_578_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln426_fu_990_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln396_fu_673_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_447_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln427_fu_1063_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln389_fu_479_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln391_fu_496_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln391_fu_500_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_71_fu_506_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_72_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln391_1_fu_510_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal umax_fu_522_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln393_fu_548_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln393_fu_544_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_73_fu_563_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln390_fu_613_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln396_fu_617_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln396_fu_621_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_626_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln31_fu_645_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln22_fu_649_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_13_fu_641_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_14_fu_657_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln31_fu_661_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln399_1_fu_680_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln399_2_fu_692_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln403_fu_713_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln402_1_fu_726_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln402_fu_742_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_fu_768_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln23_fu_803_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln410_fu_811_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln410_fu_815_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_857_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln417_fu_865_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln417_fu_869_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln416_fu_842_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln417_1_fu_881_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal and_ln_fu_891_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln418_fu_902_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln418_2_fu_898_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln425_2_fu_961_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln426_1_fu_976_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln426_1_fu_980_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln426_2_fu_985_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_1014_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln31_5_fu_1035_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln31_7_fu_1039_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_16_fu_1031_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_17_fu_1047_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln31_2_fu_1051_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);

    component KeccakF1600_StatePer_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component load64_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        x_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        x_offset : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keccak_absorb_2_t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    t_U : component keccak_absorb_2_t
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t_address0,
        ce0 => t_ce0,
        we0 => t_we0,
        d0 => t_d0,
        q0 => t_q0);

    grp_KeccakF1600_StatePer_1_fu_432 : component KeccakF1600_StatePer_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePer_1_fu_432_ap_start,
        ap_done => grp_KeccakF1600_StatePer_1_fu_432_ap_done,
        ap_idle => grp_KeccakF1600_StatePer_1_fu_432_ap_idle,
        ap_ready => grp_KeccakF1600_StatePer_1_fu_432_ap_ready,
        state_address0 => grp_KeccakF1600_StatePer_1_fu_432_state_address0,
        state_ce0 => grp_KeccakF1600_StatePer_1_fu_432_state_ce0,
        state_we0 => grp_KeccakF1600_StatePer_1_fu_432_state_we0,
        state_d0 => grp_KeccakF1600_StatePer_1_fu_432_state_d0,
        state_q0 => s_q0,
        state_address1 => grp_KeccakF1600_StatePer_1_fu_432_state_address1,
        state_ce1 => grp_KeccakF1600_StatePer_1_fu_432_state_ce1,
        state_we1 => grp_KeccakF1600_StatePer_1_fu_432_state_we1,
        state_d1 => grp_KeccakF1600_StatePer_1_fu_432_state_d1,
        state_q1 => s_q1);

    grp_load64_3_fu_440 : component load64_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_load64_3_fu_440_ap_start,
        ap_done => grp_load64_3_fu_440_ap_done,
        ap_idle => grp_load64_3_fu_440_ap_idle,
        ap_ready => grp_load64_3_fu_440_ap_ready,
        x_0_read => m_0_read,
        x_1_read => m_1_read,
        x_offset => grp_load64_3_fu_440_x_offset,
        ap_return => grp_load64_3_fu_440_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_return_preg <= ap_phi_mux_p_34_phi_fu_426_p4;
                end if; 
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_1_fu_432_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_1_fu_432_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln409_fu_792_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((icmp_ln399_1_fu_707_p2 = ap_const_lv1_0) and (icmp_ln399_fu_696_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
                    grp_KeccakF1600_StatePer_1_fu_432_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_1_fu_432_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_1_fu_432_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_load64_3_fu_440_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_load64_3_fu_440_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln416_fu_846_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln409_fu_792_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
                    grp_load64_3_fu_440_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_load64_3_fu_440_ap_ready = ap_const_logic_1)) then 
                    grp_load64_3_fu_440_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i1_reg_399_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln425_fu_965_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                i_0_i1_reg_399 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                i_0_i1_reg_399 <= i_42_reg_1372;
            end if; 
        end if;
    end process;

    i_0_i_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_567_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_i_reg_236 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_i_reg_236 <= i_38_reg_1174;
            end if; 
        end if;
    end process;

    i_0_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_567_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_227 <= i_fu_585_p2;
            elsif (((icmp_ln389_fu_490_p2 = ap_const_lv1_0) and (icmp_ln387_fu_473_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_227 <= zext_ln389_fu_482_p1;
            end if; 
        end if;
    end process;

    i_2_reg_355_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln408_fu_763_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_2_reg_355 <= ap_const_lv5_0;
            elsif (((grp_load64_3_fu_440_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i_2_reg_355 <= i_39_reg_1275;
            end if; 
        end if;
    end process;

    i_3_reg_366_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_load64_3_fu_440_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                i_3_reg_366 <= add_ln416_reg_1303;
            elsif (((icmp_ln408_fu_763_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_3_reg_366 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_4_reg_377_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln422_fu_925_p2 = ap_const_lv1_0) and (icmp_ln416_fu_846_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                i_4_reg_377 <= ap_const_lv4_0;
            elsif (((icmp_ln423_fu_931_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                i_4_reg_377 <= i_40_fu_937_p2;
            end if; 
        end if;
    end process;

    i_5_reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln423_fu_931_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                i_5_reg_388 <= ap_const_lv32_0;
            elsif (((icmp_ln425_fu_965_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                i_5_reg_388 <= i_41_fu_970_p2;
            end if; 
        end if;
    end process;

    indvars_iv_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8_on_subcall_done))) then 
                indvars_iv_reg_333 <= sext_ln402_fu_730_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_KeccakF1600_StatePer_1_fu_432_ap_done = ap_const_logic_1))) then 
                indvars_iv_reg_333 <= sub_ln414_reg_1295;
            end if; 
        end if;
    end process;

    p_05_rec_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_567_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_05_rec_reg_216 <= add_ln392_fu_572_p2;
            elsif (((icmp_ln389_fu_490_p2 = ap_const_lv1_0) and (icmp_ln387_fu_473_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_05_rec_reg_216 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    p_12_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln389_fu_490_p2 = ap_const_lv1_1) and (icmp_ln387_fu_473_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_12_reg_272 <= empty_reg_1100;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_12_reg_272 <= add_ln394_reg_1152;
            end if; 
        end if;
    end process;

    p_1620_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln389_fu_490_p2 = ap_const_lv1_1) and (icmp_ln387_fu_473_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_1620_reg_260 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_1620_reg_260 <= xor_ln391_2_reg_1132;
            end if; 
        end if;
    end process;

    p_1_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln389_fu_490_p2 = ap_const_lv1_1) and (icmp_ln387_fu_473_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_1_reg_282 <= ap_const_lv2_2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_1_reg_282 <= add_ln393_reg_1147;
            end if; 
        end if;
    end process;

    p_23_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln399_fu_696_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln399_fu_696_p2 = ap_const_lv1_0) and (icmp_ln399_1_fu_707_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
                p_23_reg_307 <= p_12_reg_272;
            elsif (((icmp_ln399_1_reg_1216 = ap_const_lv1_0) and (icmp_ln399_reg_1206 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8_on_subcall_done))) then 
                p_23_reg_307 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    p_2722_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln399_fu_696_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln399_fu_696_p2 = ap_const_lv1_0) and (icmp_ln399_1_fu_707_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
                p_2722_reg_293 <= ap_const_lv8_0;
            elsif (((icmp_ln399_1_reg_1216 = ap_const_lv1_0) and (icmp_ln399_reg_1206 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8_on_subcall_done))) then 
                p_2722_reg_293 <= sub_ln399_reg_1210;
            end if; 
        end if;
    end process;

    p_2_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln399_fu_696_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln399_fu_696_p2 = ap_const_lv1_0) and (icmp_ln399_1_fu_707_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
                p_2_reg_322 <= zext_ln399_fu_688_p1;
            elsif (((icmp_ln399_1_reg_1216 = ap_const_lv1_0) and (icmp_ln399_reg_1206 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8_on_subcall_done))) then 
                p_2_reg_322 <= sub_ln403_fu_716_p2;
            end if; 
        end if;
    end process;

    p_34_reg_423_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln422_fu_925_p2 = ap_const_lv1_1) and (icmp_ln416_fu_846_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                p_34_reg_423 <= zext_ln420_fu_921_p1;
            elsif (((icmp_ln422_reg_1339 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                p_34_reg_423 <= add_ln428_fu_1070_p2;
            end if; 
        end if;
    end process;

    p_38_rec_reg_343_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8_on_subcall_done))) then 
                p_38_rec_reg_343 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_KeccakF1600_StatePer_1_fu_432_ap_done = ap_const_logic_1))) then 
                p_38_rec_reg_343 <= add_ln411_reg_1290;
            end if; 
        end if;
    end process;

    phi_ln387_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln387_fu_473_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln387_reg_205 <= add_ln387_fu_462_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln387_reg_205 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    r_0_i2_reg_411_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln425_fu_965_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                r_0_i2_reg_411 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                r_0_i2_reg_411 <= r_3_fu_1057_p2;
            end if; 
        end if;
    end process;

    r_0_i_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_567_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_0_i_reg_248 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                r_0_i_reg_248 <= r_2_fu_667_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln389_fu_490_p2 = ap_const_lv1_0) and (icmp_ln387_fu_473_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln393_reg_1147 <= add_ln393_fu_552_p2;
                add_ln394_reg_1152 <= add_ln394_fu_558_p2;
                p_cast6_reg_1142 <= p_cast6_fu_540_p1;
                sext_ln391_reg_1137 <= sext_ln391_fu_536_p1;
                xor_ln391_2_reg_1132 <= xor_ln391_2_fu_530_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln409_fu_792_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                add_ln410_3_reg_1280 <= add_ln410_3_fu_821_p2;
                s_addr_6_reg_1285 <= zext_ln410_1_fu_827_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln409_fu_792_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                add_ln411_reg_1290 <= add_ln411_fu_832_p2;
                sub_ln414_reg_1295 <= sub_ln414_fu_837_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln416_reg_1303 <= add_ln416_fu_851_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln416_fu_846_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                add_ln417_3_reg_1308 <= add_ln417_3_fu_875_p2;
                s_addr_5_reg_1313 <= zext_ln417_1_fu_886_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln416_fu_846_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                add_ln420_reg_1328 <= add_ln420_fu_916_p2;
                icmp_ln422_reg_1339 <= icmp_ln422_fu_925_p2;
                sub_ln419_reg_1318 <= sub_ln419_fu_906_p2;
                trunc_ln419_reg_1323 <= trunc_ln419_fu_912_p1;
                    zext_ln420_reg_1333(8 downto 0) <= zext_ln420_fu_921_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_69_reg_1106 <= empty_69_fu_458_p1;
                empty_reg_1100 <= empty_fu_454_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8_on_subcall_done))) then
                    empty_75_reg_1246(8 downto 0) <= empty_75_fu_751_p1(8 downto 0);
                sext_ln402_1_reg_1240 <= sext_ln402_1_fu_747_p1;
                tmp_s_reg_1253 <= r(7 downto 3);
                trunc_ln402_2_reg_1235 <= trunc_ln402_2_fu_738_p1;
                trunc_ln402_reg_1230 <= trunc_ln402_fu_734_p1;
                    zext_ln402_reg_1220(5 downto 0) <= zext_ln402_fu_722_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_38_reg_1174 <= i_38_fu_602_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_39_reg_1275 <= i_39_fu_797_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                i_42_reg_1372 <= i_42_fu_1003_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln399_fu_696_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                icmp_ln399_1_reg_1216 <= icmp_ln399_1_fu_707_p2;
                sub_ln399_reg_1210 <= sub_ln399_fu_702_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                icmp_ln399_reg_1206 <= icmp_ln399_fu_696_p2;
                sext_ln399_reg_1194 <= sext_ln399_fu_684_p1;
                    zext_ln399_reg_1199(1 downto 0) <= zext_ln399_fu_688_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_2_fu_997_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                s_addr_7_reg_1382 <= zext_ln427_fu_1023_p1(5 - 1 downto 0);
                trunc_ln428_reg_1387 <= trunc_ln428_fu_1028_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_596_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    s_addr_reg_1184(2 downto 0) <= zext_ln396_fu_636_p1(5 - 1 downto 0)(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln408_fu_763_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                tmp_32_reg_1266 <= indvars_iv_reg_333(7 downto 3);
                    zext_ln416_2_reg_1261(2 downto 0) <= zext_ln416_2_fu_778_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln423_fu_931_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                trunc_ln426_reg_1351 <= trunc_ln426_fu_948_p1;
                xor_ln426_reg_1356 <= xor_ln426_fu_952_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln387_fu_473_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln389_1_reg_1124(2 downto 0) <= zext_ln389_1_fu_486_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln389_1_reg_1124(4 downto 3) <= "00";
    s_addr_reg_1184(4 downto 3) <= "00";
    zext_ln399_reg_1199(2) <= '0';
    zext_ln402_reg_1220(8 downto 6) <= "000";
    empty_75_reg_1246(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln416_2_reg_1261(29 downto 3) <= "000000000000000000000000000";
    zext_ln420_reg_1333(31 downto 9) <= "00000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln387_fu_473_p2, icmp_ln389_fu_490_p2, ap_CS_fsm_state3, exitcond_fu_567_p2, ap_CS_fsm_state4, icmp_ln30_fu_596_p2, ap_CS_fsm_state8, grp_KeccakF1600_StatePer_1_fu_432_ap_done, ap_block_state8_on_subcall_done, ap_CS_fsm_state9, icmp_ln408_fu_763_p2, ap_CS_fsm_state10, icmp_ln409_fu_792_p2, ap_CS_fsm_state13, icmp_ln416_fu_846_p2, icmp_ln422_fu_925_p2, ap_CS_fsm_state15, icmp_ln423_fu_931_p2, ap_CS_fsm_state16, ap_CS_fsm_state17, icmp_ln30_2_fu_997_p2, grp_load64_3_fu_440_ap_done, ap_CS_fsm_state12, ap_CS_fsm_state11, ap_CS_fsm_state14, icmp_ln425_fu_965_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln389_fu_490_p2 = ap_const_lv1_0) and (icmp_ln387_fu_473_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((icmp_ln389_fu_490_p2 = ap_const_lv1_1) and (icmp_ln387_fu_473_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond_fu_567_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln30_fu_596_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln408_fu_763_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln409_fu_792_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((grp_load64_3_fu_440_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_KeccakF1600_StatePer_1_fu_432_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln422_fu_925_p2 = ap_const_lv1_0) and (icmp_ln416_fu_846_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                elsif (((icmp_ln422_fu_925_p2 = ap_const_lv1_1) and (icmp_ln416_fu_846_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((grp_load64_3_fu_440_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln423_fu_931_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((icmp_ln425_fu_965_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((icmp_ln30_2_fu_997_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln387_fu_462_p2 <= std_logic_vector(unsigned(phi_ln387_reg_205) + unsigned(ap_const_lv3_1));
    add_ln390_fu_613_p2 <= std_logic_vector(signed(p_cast6_reg_1142) + signed(zext_ln389_1_reg_1124));
    add_ln392_fu_572_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(p_05_rec_reg_216));
    add_ln393_fu_552_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(trunc_ln393_fu_548_p1));
    add_ln394_fu_558_p2 <= std_logic_vector(signed(sext_ln393_fu_544_p1) + signed(empty_reg_1100));
    add_ln402_fu_742_p2 <= std_logic_vector(unsigned(zext_ln402_1_fu_726_p1) + unsigned(sext_ln399_reg_1194));
    add_ln410_3_fu_821_p2 <= std_logic_vector(signed(sext_ln402_1_reg_1240) + signed(add_ln410_fu_815_p2));
    add_ln410_fu_815_p2 <= std_logic_vector(unsigned(zext_ln410_fu_811_p1) + unsigned(p_38_rec_reg_343));
    add_ln411_fu_832_p2 <= std_logic_vector(unsigned(empty_75_reg_1246) + unsigned(p_38_rec_reg_343));
    add_ln416_fu_851_p2 <= std_logic_vector(unsigned(i_3_reg_366) + unsigned(ap_const_lv5_1));
    add_ln417_1_fu_881_p2 <= std_logic_vector(unsigned(zext_ln416_2_reg_1261) + unsigned(zext_ln416_fu_842_p1));
    add_ln417_3_fu_875_p2 <= std_logic_vector(signed(sext_ln402_1_reg_1240) + signed(add_ln417_fu_869_p2));
    add_ln417_fu_869_p2 <= std_logic_vector(unsigned(zext_ln417_fu_865_p1) + unsigned(p_38_rec_reg_343));
    add_ln420_fu_916_p2 <= std_logic_vector(unsigned(zext_ln402_reg_1220) + unsigned(zext_ln418_2_fu_898_p1));
    add_ln428_fu_1070_p2 <= std_logic_vector(unsigned(trunc_ln428_reg_1387) + unsigned(zext_ln420_reg_1333));
    and_ln_fu_891_p3 <= (tmp_32_reg_1266 & ap_const_lv3_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state8_on_subcall_done_assign_proc : process(grp_KeccakF1600_StatePer_1_fu_432_ap_done, ap_predicate_op112_call_state8)
    begin
                ap_block_state8_on_subcall_done <= ((grp_KeccakF1600_StatePer_1_fu_432_ap_done = ap_const_logic_0) and (ap_predicate_op112_call_state8 = ap_const_boolean_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_23_phi_fu_310_p6_assign_proc : process(icmp_ln399_reg_1206, icmp_ln399_1_reg_1216, ap_CS_fsm_state8, p_23_reg_307)
    begin
        if (((icmp_ln399_1_reg_1216 = ap_const_lv1_0) and (icmp_ln399_reg_1206 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_phi_mux_p_23_phi_fu_310_p6 <= ap_const_lv6_0;
        else 
            ap_phi_mux_p_23_phi_fu_310_p6 <= p_23_reg_307;
        end if; 
    end process;


    ap_phi_mux_p_2722_phi_fu_297_p6_assign_proc : process(icmp_ln399_reg_1206, sub_ln399_reg_1210, icmp_ln399_1_reg_1216, ap_CS_fsm_state8, p_2722_reg_293)
    begin
        if (((icmp_ln399_1_reg_1216 = ap_const_lv1_0) and (icmp_ln399_reg_1206 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_phi_mux_p_2722_phi_fu_297_p6 <= sub_ln399_reg_1210;
        else 
            ap_phi_mux_p_2722_phi_fu_297_p6 <= p_2722_reg_293;
        end if; 
    end process;


    ap_phi_mux_p_2_phi_fu_325_p6_assign_proc : process(icmp_ln399_reg_1206, icmp_ln399_1_reg_1216, ap_CS_fsm_state8, sub_ln403_fu_716_p2, p_2_reg_322)
    begin
        if (((icmp_ln399_1_reg_1216 = ap_const_lv1_0) and (icmp_ln399_reg_1206 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_phi_mux_p_2_phi_fu_325_p6 <= sub_ln403_fu_716_p2;
        else 
            ap_phi_mux_p_2_phi_fu_325_p6 <= p_2_reg_322;
        end if; 
    end process;


    ap_phi_mux_p_34_phi_fu_426_p4_assign_proc : process(icmp_ln422_reg_1339, add_ln428_fu_1070_p2, p_34_reg_423, ap_CS_fsm_state19)
    begin
        if (((icmp_ln422_reg_1339 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            ap_phi_mux_p_34_phi_fu_426_p4 <= add_ln428_fu_1070_p2;
        else 
            ap_phi_mux_p_34_phi_fu_426_p4 <= p_34_reg_423;
        end if; 
    end process;


    ap_predicate_op112_call_state8_assign_proc : process(icmp_ln399_reg_1206, icmp_ln399_1_reg_1216)
    begin
                ap_predicate_op112_call_state8 <= ((icmp_ln399_1_reg_1216 = ap_const_lv1_0) and (icmp_ln399_reg_1206 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_p_34_phi_fu_426_p4, ap_CS_fsm_state19, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_return <= ap_phi_mux_p_34_phi_fu_426_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    empty_69_fu_458_p1 <= r(8 - 1 downto 0);
    empty_71_fu_506_p1 <= sub_ln391_fu_500_p2(3 - 1 downto 0);
    empty_72_fu_516_p2 <= "1" when (unsigned(sub_ln391_fu_500_p2) > unsigned(ap_const_lv4_2)) else "0";
    empty_73_fu_563_p1 <= p_05_rec_reg_216(1 - 1 downto 0);
    empty_75_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r),64));
    empty_fu_454_p1 <= pos_r(6 - 1 downto 0);
    exitcond_fu_567_p2 <= "1" when (p_05_rec_reg_216 = sext_ln391_reg_1137) else "0";
    grp_KeccakF1600_StatePer_1_fu_432_ap_start <= grp_KeccakF1600_StatePer_1_fu_432_ap_start_reg;
    grp_fu_447_p2 <= (s_q0 xor grp_load64_3_fu_440_ap_return);
    grp_load64_3_fu_440_ap_start <= grp_load64_3_fu_440_ap_start_reg;

    grp_load64_3_fu_440_x_offset_assign_proc : process(add_ln410_3_reg_1280, add_ln417_3_reg_1308, ap_CS_fsm_state11, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_load64_3_fu_440_x_offset <= add_ln417_3_reg_1308;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_load64_3_fu_440_x_offset <= add_ln410_3_reg_1280;
        else 
            grp_load64_3_fu_440_x_offset <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_38_fu_602_p2 <= std_logic_vector(unsigned(i_0_i_reg_236) + unsigned(ap_const_lv4_1));
    i_39_fu_797_p2 <= std_logic_vector(unsigned(i_2_reg_355) + unsigned(ap_const_lv5_1));
    i_40_fu_937_p2 <= std_logic_vector(unsigned(i_4_reg_377) + unsigned(ap_const_lv4_1));
    i_41_fu_970_p2 <= std_logic_vector(unsigned(i_5_reg_388) + unsigned(ap_const_lv32_1));
    i_42_fu_1003_p2 <= std_logic_vector(unsigned(i_0_i1_reg_399) + unsigned(ap_const_lv4_1));
    i_fu_585_p2 <= std_logic_vector(unsigned(i_0_reg_227) + unsigned(ap_const_lv32_1));
    icmp_ln30_2_fu_997_p2 <= "1" when (i_0_i1_reg_399 = ap_const_lv4_8) else "0";
    icmp_ln30_fu_596_p2 <= "1" when (i_0_i_reg_236 = ap_const_lv4_8) else "0";
    icmp_ln387_fu_473_p2 <= "1" when (phi_ln387_reg_205 = ap_const_lv3_7) else "0";
    icmp_ln389_fu_490_p2 <= "1" when (trunc_ln389_fu_479_p1 = ap_const_lv3_0) else "0";
    icmp_ln399_1_fu_707_p2 <= "1" when (unsigned(zext_ln399_2_fu_692_p1) < unsigned(sub_ln399_fu_702_p2)) else "0";
    icmp_ln399_fu_696_p2 <= "1" when (p_12_reg_272 = ap_const_lv6_0) else "0";
    icmp_ln408_fu_763_p2 <= "1" when (unsigned(indvars_iv_reg_333) < unsigned(empty_75_reg_1246)) else "0";
    icmp_ln409_fu_792_p2 <= "1" when (i_2_reg_355 = tmp_s_reg_1253) else "0";
    icmp_ln416_fu_846_p2 <= "1" when (i_3_reg_366 = tmp_32_reg_1266) else "0";
    icmp_ln422_fu_925_p2 <= "1" when (indvars_iv_reg_333 = zext_ln418_fu_902_p1) else "0";
    icmp_ln423_fu_931_p2 <= "1" when (i_4_reg_377 = ap_const_lv4_8) else "0";
    icmp_ln425_fu_965_p2 <= "1" when (unsigned(zext_ln425_2_fu_961_p1) < unsigned(trunc_ln419_reg_1323)) else "0";
        p_cast6_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln391_2_fu_530_p2),5));

    r_2_fu_667_p2 <= (shl_ln31_fu_661_p2 or r_0_i_reg_248);
    r_3_fu_1057_p2 <= (shl_ln31_2_fu_1051_p2 or r_0_i2_reg_411);

    s_address0_assign_proc : process(ap_CS_fsm_state4, s_addr_reg_1184, ap_CS_fsm_state8, ap_predicate_op112_call_state8, ap_CS_fsm_state10, icmp_ln409_fu_792_p2, s_addr_6_reg_1285, ap_CS_fsm_state13, s_addr_5_reg_1313, ap_CS_fsm_state17, s_addr_7_reg_1382, grp_KeccakF1600_StatePer_1_fu_432_state_address0, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state19, zext_ln396_fu_636_p1, zext_ln410_1_fu_827_p1, zext_ln417_1_fu_886_p1, zext_ln427_fu_1023_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            s_address0 <= s_addr_7_reg_1382;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            s_address0 <= zext_ln427_fu_1023_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            s_address0 <= s_addr_5_reg_1313;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            s_address0 <= zext_ln417_1_fu_886_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            s_address0 <= s_addr_6_reg_1285;
        elsif (((icmp_ln409_fu_792_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            s_address0 <= zext_ln410_1_fu_827_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            s_address0 <= s_addr_reg_1184;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s_address0 <= zext_ln396_fu_636_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_predicate_op112_call_state8 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            s_address0 <= grp_KeccakF1600_StatePer_1_fu_432_state_address0;
        else 
            s_address0 <= "XXXXX";
        end if; 
    end process;

    s_address1 <= grp_KeccakF1600_StatePer_1_fu_432_state_address1;

    s_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, ap_predicate_op112_call_state8, ap_CS_fsm_state10, icmp_ln409_fu_792_p2, ap_CS_fsm_state13, ap_CS_fsm_state17, grp_KeccakF1600_StatePer_1_fu_432_state_ce0, grp_load64_3_fu_440_ap_done, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((grp_load64_3_fu_440_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((grp_load64_3_fu_440_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((icmp_ln409_fu_792_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            s_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_predicate_op112_call_state8 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            s_ce0 <= grp_KeccakF1600_StatePer_1_fu_432_state_ce0;
        else 
            s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_ce1_assign_proc : process(ap_CS_fsm_state8, ap_predicate_op112_call_state8, grp_KeccakF1600_StatePer_1_fu_432_state_ce1, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_predicate_op112_call_state8 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            s_ce1 <= grp_KeccakF1600_StatePer_1_fu_432_state_ce1;
        else 
            s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_d0_assign_proc : process(ap_CS_fsm_state8, ap_predicate_op112_call_state8, grp_KeccakF1600_StatePer_1_fu_432_state_d0, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state19, xor_ln396_fu_673_p2, grp_fu_447_p2, xor_ln427_fu_1063_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            s_d0 <= xor_ln427_fu_1063_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            s_d0 <= grp_fu_447_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            s_d0 <= xor_ln396_fu_673_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_predicate_op112_call_state8 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            s_d0 <= grp_KeccakF1600_StatePer_1_fu_432_state_d0;
        else 
            s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    s_d1 <= grp_KeccakF1600_StatePer_1_fu_432_state_d1;

    s_we0_assign_proc : process(ap_CS_fsm_state8, ap_predicate_op112_call_state8, icmp_ln422_reg_1339, grp_KeccakF1600_StatePer_1_fu_432_state_we0, grp_load64_3_fu_440_ap_done, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln422_reg_1339 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((grp_load64_3_fu_440_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((grp_load64_3_fu_440_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            s_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_predicate_op112_call_state8 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            s_we0 <= grp_KeccakF1600_StatePer_1_fu_432_state_we0;
        else 
            s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s_we1_assign_proc : process(ap_CS_fsm_state8, ap_predicate_op112_call_state8, grp_KeccakF1600_StatePer_1_fu_432_state_we1, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_predicate_op112_call_state8 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            s_we1 <= grp_KeccakF1600_StatePer_1_fu_432_state_we1;
        else 
            s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln392_fu_578_p3 <= 
        m_1_read when (empty_73_fu_563_p1(0) = '1') else 
        m_0_read;
    select_ln426_fu_990_p3 <= 
        m_1_read when (xor_ln426_2_fu_985_p2(0) = '1') else 
        m_0_read;
        sext_ln391_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln391_2_fu_530_p2),64));

        sext_ln393_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln391_2_fu_530_p2),6));

        sext_ln396_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln390_fu_613_p2),6));

        sext_ln399_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_1620_reg_260),9));

        sext_ln402_1_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln402_fu_742_p2),64));

        sext_ln402_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_p_2_phi_fu_325_p6),64));

    shl_ln22_fu_649_p3 <= (trunc_ln31_fu_645_p1 & ap_const_lv3_0);
    shl_ln23_fu_803_p3 <= (i_2_reg_355 & ap_const_lv3_0);
    shl_ln31_2_fu_1051_p2 <= std_logic_vector(shift_left(unsigned(zext_ln31_16_fu_1031_p1),to_integer(unsigned('0' & zext_ln31_17_fu_1047_p1(31-1 downto 0)))));
    shl_ln31_7_fu_1039_p3 <= (trunc_ln31_5_fu_1035_p1 & ap_const_lv3_0);
    shl_ln31_fu_661_p2 <= std_logic_vector(shift_left(unsigned(zext_ln31_13_fu_641_p1),to_integer(unsigned('0' & zext_ln31_14_fu_657_p1(31-1 downto 0)))));
    shl_ln_fu_857_p3 <= (i_3_reg_366 & ap_const_lv3_0);
    sub_ln391_fu_500_p2 <= std_logic_vector(signed(ap_const_lv4_8) - signed(zext_ln391_fu_496_p1));
    sub_ln396_fu_621_p2 <= std_logic_vector(unsigned(add_ln394_reg_1152) - unsigned(sext_ln396_fu_617_p1));
    sub_ln399_fu_702_p2 <= std_logic_vector(unsigned(empty_69_reg_1106) - unsigned(zext_ln399_1_fu_680_p1));
    sub_ln403_fu_716_p2 <= std_logic_vector(unsigned(zext_ln399_reg_1199) - unsigned(trunc_ln403_fu_713_p1));
    sub_ln414_fu_837_p2 <= std_logic_vector(unsigned(indvars_iv_reg_333) - unsigned(empty_75_reg_1246));
    sub_ln419_fu_906_p2 <= std_logic_vector(unsigned(indvars_iv_reg_333) - unsigned(zext_ln418_fu_902_p1));

    t_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, zext_ln387_fu_468_p1, zext_ln392_fu_591_p1, zext_ln31_fu_608_p1, zext_ln424_fu_943_p1, zext_ln425_fu_956_p1, zext_ln31_15_fu_1009_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            t_address0 <= zext_ln31_15_fu_1009_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            t_address0 <= zext_ln425_fu_956_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            t_address0 <= zext_ln424_fu_943_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_address0 <= zext_ln31_fu_608_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            t_address0 <= zext_ln392_fu_591_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_address0 <= zext_ln387_fu_468_p1(3 - 1 downto 0);
        else 
            t_address0 <= "XXX";
        end if; 
    end process;


    t_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            t_ce0 <= ap_const_logic_1;
        else 
            t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state15, ap_CS_fsm_state16, select_ln392_fu_578_p3, select_ln426_fu_990_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            t_d0 <= select_ln426_fu_990_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            t_d0 <= select_ln392_fu_578_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            t_d0 <= ap_const_lv8_0;
        else 
            t_d0 <= "XXXXXXXX";
        end if; 
    end process;


    t_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond_fu_567_p2, ap_CS_fsm_state15, icmp_ln423_fu_931_p2, ap_CS_fsm_state16, icmp_ln425_fu_965_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((icmp_ln425_fu_965_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((icmp_ln423_fu_931_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((exitcond_fu_567_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            t_we0 <= ap_const_logic_1;
        else 
            t_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_1014_p4 <= add_ln420_reg_1328(8 downto 3);
    tmp_9_fu_768_p4 <= p_23_reg_307(5 downto 3);
    tmp_fu_626_p4 <= sub_ln396_fu_621_p2(5 downto 3);
    trunc_ln31_5_fu_1035_p1 <= i_0_i1_reg_399(3 - 1 downto 0);
    trunc_ln31_fu_645_p1 <= i_0_i_reg_236(3 - 1 downto 0);
    trunc_ln389_fu_479_p1 <= pos_r(3 - 1 downto 0);
    trunc_ln393_fu_548_p1 <= umax_fu_522_p3(2 - 1 downto 0);
    trunc_ln402_2_fu_738_p1 <= p_1620_reg_260(1 - 1 downto 0);
    trunc_ln402_fu_734_p1 <= ap_phi_mux_p_2722_phi_fu_297_p6(1 - 1 downto 0);
    trunc_ln403_fu_713_p1 <= sub_ln399_reg_1210(3 - 1 downto 0);
    trunc_ln419_fu_912_p1 <= sub_ln419_fu_906_p2(33 - 1 downto 0);
    trunc_ln426_1_fu_976_p1 <= i_5_reg_388(1 - 1 downto 0);
    trunc_ln426_fu_948_p1 <= p_38_rec_reg_343(1 - 1 downto 0);
    trunc_ln428_fu_1028_p1 <= sub_ln419_reg_1318(32 - 1 downto 0);
    umax_fu_522_p3 <= 
        ap_const_lv3_5 when (empty_72_fu_516_p2(0) = '1') else 
        xor_ln391_1_fu_510_p2;
    xor_ln391_1_fu_510_p2 <= (empty_71_fu_506_p1 xor ap_const_lv3_7);
    xor_ln391_2_fu_530_p2 <= (umax_fu_522_p3 xor ap_const_lv3_7);
    xor_ln396_fu_673_p2 <= (s_q0 xor r_0_i_reg_248);
    xor_ln426_1_fu_980_p2 <= (trunc_ln426_reg_1351 xor trunc_ln426_1_fu_976_p1);
    xor_ln426_2_fu_985_p2 <= (xor_ln426_reg_1356 xor xor_ln426_1_fu_980_p2);
    xor_ln426_fu_952_p2 <= (trunc_ln402_reg_1230 xor trunc_ln402_2_reg_1235);
    xor_ln427_fu_1063_p2 <= (s_q0 xor r_0_i2_reg_411);
    zext_ln31_13_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_q0),64));
    zext_ln31_14_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln22_fu_649_p3),64));
    zext_ln31_15_fu_1009_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i1_reg_399),64));
    zext_ln31_16_fu_1031_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_q0),64));
    zext_ln31_17_fu_1047_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln31_7_fu_1039_p3),64));
    zext_ln31_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_236),64));
    zext_ln387_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln387_reg_205),64));
    zext_ln389_1_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln389_fu_479_p1),5));
    zext_ln389_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln389_fu_479_p1),32));
    zext_ln391_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln389_fu_479_p1),4));
    zext_ln392_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_227),64));
    zext_ln396_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_626_p4),64));
    zext_ln399_1_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_12_reg_272),8));
    zext_ln399_2_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_1_reg_282),8));
    zext_ln399_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_1_reg_282),3));
    zext_ln402_1_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_2722_phi_fu_297_p6),9));
    zext_ln402_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_23_phi_fu_310_p6),9));
    zext_ln410_1_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_355),64));
    zext_ln410_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln23_fu_803_p3),64));
    zext_ln416_2_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_768_p4),30));
    zext_ln416_fu_842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_366),30));
    zext_ln417_1_fu_886_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln417_1_fu_881_p2),64));
    zext_ln417_fu_865_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_857_p3),64));
    zext_ln418_2_fu_898_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_891_p3),9));
    zext_ln418_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_891_p3),64));
    zext_ln420_fu_921_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln420_fu_916_p2),32));
    zext_ln424_fu_943_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_377),64));
    zext_ln425_2_fu_961_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_388),33));
    zext_ln425_fu_956_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_388),64));
    zext_ln427_fu_1023_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_1014_p4),64));
end behav;
