-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity crypto_sign is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sm_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    sm_ce0 : OUT STD_LOGIC;
    sm_we0 : OUT STD_LOGIC;
    sm_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sm_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sm_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    sm_ce1 : OUT STD_LOGIC;
    sm_we1 : OUT STD_LOGIC;
    sm_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    smlen : OUT STD_LOGIC_VECTOR (63 downto 0);
    smlen_ap_vld : OUT STD_LOGIC;
    m_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    m_ce0 : OUT STD_LOGIC;
    m_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    mlen : IN STD_LOGIC_VECTOR (63 downto 0);
    sk_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sk_ce0 : OUT STD_LOGIC;
    sk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sk_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sk_ce1 : OUT STD_LOGIC;
    sk_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of crypto_sign is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "crypto_sign,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-fbg676-2,HLS_INPUT_CLOCK=10000.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=31.143429,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=69,HLS_SYN_DSP=88,HLS_SYN_FF=33691,HLS_SYN_LUT=162704,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (119 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (119 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (119 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (119 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (119 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (119 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (119 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (119 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (119 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (119 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (119 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (119 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_75 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110101";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv13_974 : STD_LOGIC_VECTOR (12 downto 0) := "0100101110100";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv64_300 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001100000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv8_20 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_const_lv8_70 : STD_LOGIC_VECTOR (7 downto 0) := "01110000";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv18_173B2 : STD_LOGIC_VECTOR (17 downto 0) := "010111001110110010";
    constant ap_const_lv18_17400 : STD_LOGIC_VECTOR (17 downto 0) := "010111010000000000";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv13_1FFF : STD_LOGIC_VECTOR (12 downto 0) := "1111111111111";
    constant ap_const_lv14_973 : STD_LOGIC_VECTOR (13 downto 0) := "00100101110011";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv8_A0 : STD_LOGIC_VECTOR (7 downto 0) := "10100000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv56_1 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv56_2 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv56_3 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv9_2B : STD_LOGIC_VECTOR (8 downto 0) := "000101011";
    constant ap_const_lv32_3FF000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001111111111000000000000";
    constant ap_const_lv32_7FE001 : STD_LOGIC_VECTOR (31 downto 0) := "00000000011111111110000000000001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv32_3802001 : STD_LOGIC_VECTOR (31 downto 0) := "00000011100000000010000000000001";
    constant ap_const_lv55_7FFFFFFF801FFF : STD_LOGIC_VECTOR (54 downto 0) := "1111111111111111111111111111111100000000001111111111111";
    constant ap_const_lv32_400000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_1FFB2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000011111111110110010";
    constant ap_const_lv11_50 : STD_LOGIC_VECTOR (10 downto 0) := "00001010000";
    constant ap_const_lv64_974 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101110100";
    constant ap_const_lv32_17401 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010111010000000001";
    constant ap_const_lv32_7E6C01 : STD_LOGIC_VECTOR (31 downto 0) := "00000000011111100110110000000001";
    constant ap_const_lv32_2C0B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010110000001011";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv27_7FD1800 : STD_LOGIC_VECTOR (26 downto 0) := "111111111010001100000000000";
    constant ap_const_lv32_FF801FFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111100000000001111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_keccak_absorb_3_fu_1369_ap_return : STD_LOGIC_VECTOR (9 downto 0);
    signal reg_1598 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_keccak_absorb_3_fu_1369_ap_ready : STD_LOGIC;
    signal grp_keccak_absorb_3_fu_1369_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal reg_1602 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal reg_1608 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_1614 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_1620 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_1626 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_1632 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln208_fu_1642_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln208_reg_3479 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln208_1_fu_1652_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln208_1_reg_3484 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_fu_1671_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_3492 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln207_fu_1666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln208_1_fu_1687_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln208_1_reg_3502 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_42_fu_1702_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal state_s_addr_reg_3515 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_s_addr_10_reg_3520 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal add_ln540_fu_1762_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln540_reg_3528 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal icmp_ln540_fu_1756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln25_fu_1773_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln25_reg_3538 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_43_fu_1943_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal zext_ln416_fu_1954_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln416_reg_3556 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal add_ln416_fu_1964_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln416_reg_3564 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_fu_1978_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln26_reg_3569 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln416_fu_1958_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_44_fu_1988_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_44_reg_3589 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal icmp_ln30_fu_1982_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_0_s_addr_4_reg_3599 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_fu_2042_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal add_ln540_1_fu_2080_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln540_1_reg_3613 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal icmp_ln540_1_fu_2074_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln541_1_fu_2091_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln541_1_reg_3623 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal trunc_ln543_1_reg_3633 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln544_1_reg_3638 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln545_1_reg_3643 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln546_1_reg_3648 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln547_1_reg_3653 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln548_1_reg_3658 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_46_fu_2332_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_46_reg_3666 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal j_fu_2344_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_3674 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal add_ln_fu_2354_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln_reg_3679 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln21_fu_2338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_69_fu_2371_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_69_reg_3687 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal i_70_fu_2383_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_70_reg_3695 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal i_71_fu_2395_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_71_reg_3703 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal nonce_fu_2401_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal nonce_reg_3708 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal add_ln125_fu_2407_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln125_reg_3713 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal zext_ln125_fu_2413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln125_reg_3718 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln125_fu_2418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln125_reg_3728 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln125_1_fu_2429_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln125_1_reg_3732 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal tmp_12_fu_2435_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_reg_3737 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln125_1_fu_2444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln125_1_reg_3747 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln125_2_fu_2455_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln125_2_reg_3751 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal tmp_13_fu_2461_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_reg_3756 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln125_2_fu_2470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln125_2_reg_3766 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln125_3_fu_2481_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln125_3_reg_3770 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal tmp_14_fu_2487_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_reg_3775 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln125_3_fu_2496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln125_3_reg_3785 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_72_fu_2513_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_72_reg_3792 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal i_73_fu_2525_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_73_reg_3800 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal i_74_fu_2537_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_74_reg_3808 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal zext_ln221_fu_2551_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln221_reg_3813 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln371_fu_2531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_76_fu_2561_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_76_reg_3821 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal zext_ln226_1_fu_2576_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln226_1_reg_3826 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln225_fu_2555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w1_vec_coeffs_addr_reg_3831 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_75_fu_2690_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal state_s_addr_13_reg_3844 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln540_2_fu_2750_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln540_2_reg_3852 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal icmp_ln540_2_fu_2744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln541_3_fu_2756_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln541_3_reg_3862 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln541_2_fu_2765_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln541_2_reg_3867 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_77_fu_2854_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_77_reg_3880 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal zext_ln176_fu_2868_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln176_reg_3885 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln114_fu_2848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_79_fu_2878_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_79_reg_3893 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal zext_ln181_17_fu_2898_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln181_17_reg_3898 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln180_fu_2872_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_78_fu_2964_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_78_reg_3916 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal i_80_fu_2976_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_80_reg_3924 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal zext_ln83_fu_2990_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln83_reg_3929 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln85_fu_2970_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_82_fu_3000_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_82_reg_3937 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal icmp_ln87_fu_2994_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_vec_coeffs_addr_5_reg_3947 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_81_fu_3038_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_81_reg_3955 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal zext_ln28_fu_3052_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln28_reg_3960 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln53_fu_3032_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_84_fu_3062_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_84_reg_3968 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal z_vec_coeffs_addr_6_reg_3973 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln32_fu_3056_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln158_fu_3102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln158_reg_3978 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal i_83_fu_3108_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_83_reg_3982 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln287_fu_3122_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln287_reg_3987 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_86_fu_3132_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_86_reg_3995 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal icmp_ln298_fu_3126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_85_fu_3198_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_85_reg_4011 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal zext_ln104_fu_3212_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln104_reg_4016 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln252_fu_3192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_87_fu_3222_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_87_reg_4024 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal w0_vec_coeffs_addr_1_reg_4029 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln108_fu_3216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_polyveck_chknorm_fu_1491_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_4039 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal grp_polyveck_chknorm_fu_1491_ap_ready : STD_LOGIC;
    signal grp_polyveck_chknorm_fu_1491_ap_done : STD_LOGIC;
    signal tmp_5_reg_4043 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal i_88_fu_3256_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_88_reg_4050 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state113 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state113 : signal is "none";
    signal zext_ln83_1_fu_3270_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln83_1_reg_4055 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln234_fu_3250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_89_fu_3280_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_89_reg_4063 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state114 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state114 : signal is "none";
    signal w0_vec_coeffs_addr_2_reg_4068 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln87_1_fu_3274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_90_fu_3314_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_90_reg_4081 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal zext_ln244_fu_3328_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln244_reg_4086 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln392_fu_3308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_91_fu_3350_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_91_reg_4097 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state118 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state118 : signal is "none";
    signal zext_ln249_1_fu_3365_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln249_1_reg_4102 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln248_fu_3344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_fu_3375_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal s_1_fu_3438_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state119 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state119 : signal is "none";
    signal state_0_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_0_s_ce0 : STD_LOGIC;
    signal state_0_s_we0 : STD_LOGIC;
    signal state_0_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_0_s_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_0_s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_0_s_ce1 : STD_LOGIC;
    signal state_0_s_we1 : STD_LOGIC;
    signal state_0_s_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_0_s_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal seedbuf_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal seedbuf_ce0 : STD_LOGIC;
    signal seedbuf_we0 : STD_LOGIC;
    signal seedbuf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal seedbuf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal seedbuf_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal seedbuf_ce1 : STD_LOGIC;
    signal seedbuf_we1 : STD_LOGIC;
    signal seedbuf_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mat_vec_coeffs_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mat_vec_coeffs_ce0 : STD_LOGIC;
    signal mat_vec_coeffs_we0 : STD_LOGIC;
    signal mat_vec_coeffs_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal s1_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal s1_vec_coeffs_ce0 : STD_LOGIC;
    signal s1_vec_coeffs_we0 : STD_LOGIC;
    signal s1_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s1_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s1_vec_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal s1_vec_coeffs_ce1 : STD_LOGIC;
    signal s1_vec_coeffs_we1 : STD_LOGIC;
    signal s1_vec_coeffs_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_vec_coeffs_ce0 : STD_LOGIC;
    signal y_vec_coeffs_we0 : STD_LOGIC;
    signal y_vec_coeffs_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal z_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal z_vec_coeffs_ce0 : STD_LOGIC;
    signal z_vec_coeffs_we0 : STD_LOGIC;
    signal z_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_vec_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal z_vec_coeffs_ce1 : STD_LOGIC;
    signal z_vec_coeffs_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t0_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal t0_vec_coeffs_ce0 : STD_LOGIC;
    signal t0_vec_coeffs_we0 : STD_LOGIC;
    signal t0_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal t0_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal t0_vec_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal t0_vec_coeffs_ce1 : STD_LOGIC;
    signal t0_vec_coeffs_we1 : STD_LOGIC;
    signal t0_vec_coeffs_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal s2_vec_coeffs_ce0 : STD_LOGIC;
    signal s2_vec_coeffs_we0 : STD_LOGIC;
    signal s2_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_vec_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal s2_vec_coeffs_ce1 : STD_LOGIC;
    signal s2_vec_coeffs_we1 : STD_LOGIC;
    signal s2_vec_coeffs_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w1_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal w1_vec_coeffs_ce0 : STD_LOGIC;
    signal w1_vec_coeffs_we0 : STD_LOGIC;
    signal w1_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w1_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w1_vec_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal w1_vec_coeffs_ce1 : STD_LOGIC;
    signal w1_vec_coeffs_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w0_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal w0_vec_coeffs_ce0 : STD_LOGIC;
    signal w0_vec_coeffs_we0 : STD_LOGIC;
    signal w0_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w0_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_vec_coeffs_ce0 : STD_LOGIC;
    signal h_vec_coeffs_we0 : STD_LOGIC;
    signal h_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_vec_coeffs_ce1 : STD_LOGIC;
    signal h_vec_coeffs_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cp_coeffs_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cp_coeffs_ce0 : STD_LOGIC;
    signal cp_coeffs_we0 : STD_LOGIC;
    signal cp_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cp_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cp_coeffs_ce1 : STD_LOGIC;
    signal cp_coeffs_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_s_ce0 : STD_LOGIC;
    signal state_s_we0 : STD_LOGIC;
    signal state_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_s_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_s_ce1 : STD_LOGIC;
    signal state_s_we1 : STD_LOGIC;
    signal state_s_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_s_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_uniform_fu_1346_ap_start : STD_LOGIC;
    signal grp_poly_uniform_fu_1346_ap_done : STD_LOGIC;
    signal grp_poly_uniform_fu_1346_ap_idle : STD_LOGIC;
    signal grp_poly_uniform_fu_1346_ap_ready : STD_LOGIC;
    signal grp_poly_uniform_fu_1346_a_coeffs_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_poly_uniform_fu_1346_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_uniform_fu_1346_a_coeffs_we0 : STD_LOGIC;
    signal grp_poly_uniform_fu_1346_a_coeffs_d0 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_poly_uniform_fu_1346_seed_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_poly_uniform_fu_1346_seed_ce0 : STD_LOGIC;
    signal grp_polyvecl_uniform_gam_fu_1359_ap_start : STD_LOGIC;
    signal grp_polyvecl_uniform_gam_fu_1359_ap_done : STD_LOGIC;
    signal grp_polyvecl_uniform_gam_fu_1359_ap_idle : STD_LOGIC;
    signal grp_polyvecl_uniform_gam_fu_1359_ap_ready : STD_LOGIC;
    signal grp_polyvecl_uniform_gam_fu_1359_v_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_polyvecl_uniform_gam_fu_1359_v_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyvecl_uniform_gam_fu_1359_v_vec_coeffs_we0 : STD_LOGIC;
    signal grp_polyvecl_uniform_gam_fu_1359_v_vec_coeffs_d0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_polyvecl_uniform_gam_fu_1359_seed_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_polyvecl_uniform_gam_fu_1359_seed_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_3_fu_1369_ap_start : STD_LOGIC;
    signal grp_keccak_absorb_3_fu_1369_ap_idle : STD_LOGIC;
    signal grp_keccak_absorb_3_fu_1369_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_absorb_3_fu_1369_s_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_3_fu_1369_s_we0 : STD_LOGIC;
    signal grp_keccak_absorb_3_fu_1369_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_3_fu_1369_s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_absorb_3_fu_1369_s_ce1 : STD_LOGIC;
    signal grp_keccak_absorb_3_fu_1369_s_we1 : STD_LOGIC;
    signal grp_keccak_absorb_3_fu_1369_s_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_3_fu_1369_m_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_keccak_absorb_3_fu_1369_m_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_3_fu_1369_m_offset : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_keccak_absorb_3_fu_1369_mlen : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_challenge_fu_1383_ap_start : STD_LOGIC;
    signal grp_poly_challenge_fu_1383_ap_done : STD_LOGIC;
    signal grp_poly_challenge_fu_1383_ap_idle : STD_LOGIC;
    signal grp_poly_challenge_fu_1383_ap_ready : STD_LOGIC;
    signal grp_poly_challenge_fu_1383_c_coeffs_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_poly_challenge_fu_1383_c_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_challenge_fu_1383_c_coeffs_we0 : STD_LOGIC;
    signal grp_poly_challenge_fu_1383_c_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_poly_challenge_fu_1383_seed_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_poly_challenge_fu_1383_seed_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_1392_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_1392_ap_done : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_1392_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_1392_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_1392_state_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_1392_state_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_1392_state_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_1392_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_1392_state_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_1392_state_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_1392_state_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_1392_state_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_1399_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_1399_ap_done : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_1399_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_1399_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_1399_state_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_1399_state_0_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_1399_state_0_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_1399_state_0_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_1399_state_0_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_1399_state_0_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_1399_state_0_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_1399_state_0_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_unpack_sk_fu_1406_ap_start : STD_LOGIC;
    signal grp_unpack_sk_fu_1406_ap_done : STD_LOGIC;
    signal grp_unpack_sk_fu_1406_ap_idle : STD_LOGIC;
    signal grp_unpack_sk_fu_1406_ap_ready : STD_LOGIC;
    signal grp_unpack_sk_fu_1406_rho_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_unpack_sk_fu_1406_rho_ce0 : STD_LOGIC;
    signal grp_unpack_sk_fu_1406_rho_we0 : STD_LOGIC;
    signal grp_unpack_sk_fu_1406_rho_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_unpack_sk_fu_1406_t0_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_unpack_sk_fu_1406_t0_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_unpack_sk_fu_1406_t0_vec_coeffs_we0 : STD_LOGIC;
    signal grp_unpack_sk_fu_1406_t0_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_unpack_sk_fu_1406_t0_vec_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_unpack_sk_fu_1406_t0_vec_coeffs_ce1 : STD_LOGIC;
    signal grp_unpack_sk_fu_1406_t0_vec_coeffs_we1 : STD_LOGIC;
    signal grp_unpack_sk_fu_1406_t0_vec_coeffs_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_unpack_sk_fu_1406_s1_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_unpack_sk_fu_1406_s1_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_unpack_sk_fu_1406_s1_vec_coeffs_we0 : STD_LOGIC;
    signal grp_unpack_sk_fu_1406_s1_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_unpack_sk_fu_1406_s1_vec_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_unpack_sk_fu_1406_s1_vec_coeffs_ce1 : STD_LOGIC;
    signal grp_unpack_sk_fu_1406_s1_vec_coeffs_we1 : STD_LOGIC;
    signal grp_unpack_sk_fu_1406_s1_vec_coeffs_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_unpack_sk_fu_1406_s2_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_unpack_sk_fu_1406_s2_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_unpack_sk_fu_1406_s2_vec_coeffs_we0 : STD_LOGIC;
    signal grp_unpack_sk_fu_1406_s2_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_unpack_sk_fu_1406_s2_vec_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_unpack_sk_fu_1406_s2_vec_coeffs_ce1 : STD_LOGIC;
    signal grp_unpack_sk_fu_1406_s2_vec_coeffs_we1 : STD_LOGIC;
    signal grp_unpack_sk_fu_1406_s2_vec_coeffs_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_unpack_sk_fu_1406_sk_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_unpack_sk_fu_1406_sk_ce0 : STD_LOGIC;
    signal grp_unpack_sk_fu_1406_sk_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_unpack_sk_fu_1406_sk_ce1 : STD_LOGIC;
    signal grp_polyveck_invntt_tomo_fu_1416_ap_start : STD_LOGIC;
    signal grp_polyveck_invntt_tomo_fu_1416_ap_done : STD_LOGIC;
    signal grp_polyveck_invntt_tomo_fu_1416_ap_idle : STD_LOGIC;
    signal grp_polyveck_invntt_tomo_fu_1416_ap_ready : STD_LOGIC;
    signal grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_we0 : STD_LOGIC;
    signal grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_ce1 : STD_LOGIC;
    signal grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_invntt_tomont_fu_1423_ap_start : STD_LOGIC;
    signal grp_invntt_tomont_fu_1423_ap_done : STD_LOGIC;
    signal grp_invntt_tomont_fu_1423_ap_idle : STD_LOGIC;
    signal grp_invntt_tomont_fu_1423_ap_ready : STD_LOGIC;
    signal grp_invntt_tomont_fu_1423_a_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_invntt_tomont_fu_1423_a_ce0 : STD_LOGIC;
    signal grp_invntt_tomont_fu_1423_a_we0 : STD_LOGIC;
    signal grp_invntt_tomont_fu_1423_a_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_invntt_tomont_fu_1423_a_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_invntt_tomont_fu_1423_a_ce1 : STD_LOGIC;
    signal grp_pack_sig_fu_1432_ap_start : STD_LOGIC;
    signal grp_pack_sig_fu_1432_ap_done : STD_LOGIC;
    signal grp_pack_sig_fu_1432_ap_idle : STD_LOGIC;
    signal grp_pack_sig_fu_1432_ap_ready : STD_LOGIC;
    signal grp_pack_sig_fu_1432_sig_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_pack_sig_fu_1432_sig_ce0 : STD_LOGIC;
    signal grp_pack_sig_fu_1432_sig_we0 : STD_LOGIC;
    signal grp_pack_sig_fu_1432_sig_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_pack_sig_fu_1432_z_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pack_sig_fu_1432_z_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_pack_sig_fu_1432_h_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pack_sig_fu_1432_h_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_ntt_1_fu_1440_ap_start : STD_LOGIC;
    signal grp_ntt_1_fu_1440_ap_done : STD_LOGIC;
    signal grp_ntt_1_fu_1440_ap_idle : STD_LOGIC;
    signal grp_ntt_1_fu_1440_ap_ready : STD_LOGIC;
    signal grp_ntt_1_fu_1440_a_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ntt_1_fu_1440_a_ce0 : STD_LOGIC;
    signal grp_ntt_1_fu_1440_a_we0 : STD_LOGIC;
    signal grp_ntt_1_fu_1440_a_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ntt_1_fu_1440_a_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ntt_1_fu_1440_a_ce1 : STD_LOGIC;
    signal grp_ntt_fu_1447_ap_start : STD_LOGIC;
    signal grp_ntt_fu_1447_ap_done : STD_LOGIC;
    signal grp_ntt_fu_1447_ap_idle : STD_LOGIC;
    signal grp_ntt_fu_1447_ap_ready : STD_LOGIC;
    signal grp_ntt_fu_1447_a_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_ntt_fu_1447_a_ce0 : STD_LOGIC;
    signal grp_ntt_fu_1447_a_we0 : STD_LOGIC;
    signal grp_ntt_fu_1447_a_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ntt_fu_1447_a_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ntt_fu_1447_a_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_ntt_fu_1447_a_ce1 : STD_LOGIC;
    signal grp_ntt_fu_1447_a_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ntt_fu_1447_a_offset : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_polyvecl_pointwise_a_fu_1459_ap_start : STD_LOGIC;
    signal grp_polyvecl_pointwise_a_fu_1459_ap_done : STD_LOGIC;
    signal grp_polyvecl_pointwise_a_fu_1459_ap_idle : STD_LOGIC;
    signal grp_polyvecl_pointwise_a_fu_1459_ap_ready : STD_LOGIC;
    signal grp_polyvecl_pointwise_a_fu_1459_w_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_polyvecl_pointwise_a_fu_1459_w_coeffs_ce0 : STD_LOGIC;
    signal grp_polyvecl_pointwise_a_fu_1459_w_coeffs_we0 : STD_LOGIC;
    signal grp_polyvecl_pointwise_a_fu_1459_w_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_polyvecl_pointwise_a_fu_1459_u_vec_coeffs_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_polyvecl_pointwise_a_fu_1459_u_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyvecl_pointwise_a_fu_1459_v_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_polyvecl_pointwise_a_fu_1459_v_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_4203_fu_1468_ap_start : STD_LOGIC;
    signal grp_keccak_absorb_4203_fu_1468_ap_done : STD_LOGIC;
    signal grp_keccak_absorb_4203_fu_1468_ap_idle : STD_LOGIC;
    signal grp_keccak_absorb_4203_fu_1468_ap_ready : STD_LOGIC;
    signal grp_keccak_absorb_4203_fu_1468_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_absorb_4203_fu_1468_s_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_4203_fu_1468_s_we0 : STD_LOGIC;
    signal grp_keccak_absorb_4203_fu_1468_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_4203_fu_1468_m_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_keccak_absorb_4203_fu_1468_m_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_4203_fu_1468_m_offset : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_polyveck_pack_w1_fu_1477_ap_start : STD_LOGIC;
    signal grp_polyveck_pack_w1_fu_1477_ap_done : STD_LOGIC;
    signal grp_polyveck_pack_w1_fu_1477_ap_idle : STD_LOGIC;
    signal grp_polyveck_pack_w1_fu_1477_ap_ready : STD_LOGIC;
    signal grp_polyveck_pack_w1_fu_1477_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_polyveck_pack_w1_fu_1477_r_ce0 : STD_LOGIC;
    signal grp_polyveck_pack_w1_fu_1477_r_we0 : STD_LOGIC;
    signal grp_polyveck_pack_w1_fu_1477_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_polyveck_pack_w1_fu_1477_r_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_polyveck_pack_w1_fu_1477_r_ce1 : STD_LOGIC;
    signal grp_polyveck_pack_w1_fu_1477_r_we1 : STD_LOGIC;
    signal grp_polyveck_pack_w1_fu_1477_r_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_polyveck_pack_w1_fu_1477_w1_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_polyveck_pack_w1_fu_1477_w1_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyveck_pack_w1_fu_1477_w1_vec_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_polyveck_pack_w1_fu_1477_w1_vec_coeffs_ce1 : STD_LOGIC;
    signal grp_polyveck_pointwise_p_fu_1484_ap_start : STD_LOGIC;
    signal grp_polyveck_pointwise_p_fu_1484_ap_done : STD_LOGIC;
    signal grp_polyveck_pointwise_p_fu_1484_ap_idle : STD_LOGIC;
    signal grp_polyveck_pointwise_p_fu_1484_ap_ready : STD_LOGIC;
    signal grp_polyveck_pointwise_p_fu_1484_r_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_polyveck_pointwise_p_fu_1484_r_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyveck_pointwise_p_fu_1484_r_vec_coeffs_we0 : STD_LOGIC;
    signal grp_polyveck_pointwise_p_fu_1484_r_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_polyveck_pointwise_p_fu_1484_a_coeffs_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_polyveck_pointwise_p_fu_1484_a_coeffs_ce0 : STD_LOGIC;
    signal grp_polyveck_pointwise_p_fu_1484_v_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_polyveck_pointwise_p_fu_1484_v_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyveck_pointwise_p_fu_1484_v_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_polyveck_chknorm_fu_1491_ap_start : STD_LOGIC;
    signal grp_polyveck_chknorm_fu_1491_ap_idle : STD_LOGIC;
    signal grp_polyveck_chknorm_fu_1491_v_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_polyveck_chknorm_fu_1491_v_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyveck_chknorm_fu_1491_v_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_polyveck_chknorm_fu_1491_bound : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_polyveck_caddq_fu_1499_ap_start : STD_LOGIC;
    signal grp_polyveck_caddq_fu_1499_ap_done : STD_LOGIC;
    signal grp_polyveck_caddq_fu_1499_ap_idle : STD_LOGIC;
    signal grp_polyveck_caddq_fu_1499_ap_ready : STD_LOGIC;
    signal grp_polyveck_caddq_fu_1499_v_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_polyveck_caddq_fu_1499_v_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyveck_caddq_fu_1499_v_vec_coeffs_we0 : STD_LOGIC;
    signal grp_polyveck_caddq_fu_1499_v_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_polyveck_caddq_fu_1499_v_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_polyveck_reduce_fu_1504_ap_start : STD_LOGIC;
    signal grp_polyveck_reduce_fu_1504_ap_done : STD_LOGIC;
    signal grp_polyveck_reduce_fu_1504_ap_idle : STD_LOGIC;
    signal grp_polyveck_reduce_fu_1504_ap_ready : STD_LOGIC;
    signal grp_polyveck_reduce_fu_1504_v_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_polyveck_reduce_fu_1504_v_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyveck_reduce_fu_1504_v_vec_coeffs_we0 : STD_LOGIC;
    signal grp_polyveck_reduce_fu_1504_v_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_polyveck_reduce_fu_1504_v_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_880 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_0_i_i_reg_891 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln362_fu_1696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_i_reg_902 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal i_0_i_i_i_reg_914 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln362_1_fu_1937_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_i1_reg_925 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal i_0_i5_i_reg_936 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_0_i6_i_reg_948 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_i3_reg_960 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal i_0_i_reg_972 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_0_i_reg_984 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal icmp_ln20_fu_2326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i38_reg_996 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal i_0_i40_reg_1008 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal icmp_ln100_fu_2365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i42_reg_1020 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal icmp_ln282_fu_2377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nonce_0_i_reg_1032 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln173_fu_3332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_1_fu_2389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln125_reg_1044 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal phi_ln125_1_reg_1055 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal phi_ln125_2_reg_1066 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal phi_ln125_3_reg_1077 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal i_0_i47_reg_1088 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal i_0_i52_reg_1100 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal icmp_ln100_1_fu_2507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i54_reg_1112 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal i_0_i_i55_reg_1123 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal i_0_i_i58_reg_1134 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal icmp_ln362_2_fu_2684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_i47_reg_1145 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal i_0_i78_reg_1156 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal i_0_i_i79_reg_1167 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal i_0_i84_reg_1178 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal i_0_i86_reg_1190 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln107_fu_2958_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i_i87_reg_1201 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal i_0_i94_reg_1212 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_0_i_i95_reg_1223 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal i_0_i85_reg_1234 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_0_i_i86_reg_1245 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal icmp_ln303_fu_3186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i101_reg_1256 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal i_0_i_i102_reg_1267 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal i_0_i109_reg_1278 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_0_i_i110_reg_1289 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state115 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state115 : signal is "none";
    signal i_0_i87_reg_1300 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal n_reg_1311 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_0_i_i88_reg_1323 : STD_LOGIC_VECTOR (8 downto 0);
    signal s_0_i_i_reg_1334 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_uniform_fu_1346_ap_start_reg : STD_LOGIC := '0';
    signal grp_polyvecl_uniform_gam_fu_1359_ap_start_reg : STD_LOGIC := '0';
    signal grp_keccak_absorb_3_fu_1369_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal grp_poly_challenge_fu_1383_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal grp_KeccakF1600_StatePer_1_fu_1392_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal grp_KeccakF1600_StatePer_fu_1399_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_unpack_sk_fu_1406_ap_start_reg : STD_LOGIC := '0';
    signal grp_polyveck_invntt_tomo_fu_1416_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal grp_invntt_tomont_fu_1423_ap_start_reg : STD_LOGIC := '0';
    signal grp_pack_sig_fu_1432_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state120 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state120 : signal is "none";
    signal grp_ntt_1_fu_1440_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal grp_ntt_fu_1447_ap_start_reg : STD_LOGIC := '0';
    signal grp_polyvecl_pointwise_a_fu_1459_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln28_fu_2519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_keccak_absorb_4203_fu_1468_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal grp_polyveck_pack_w1_fu_1477_ap_start_reg : STD_LOGIC := '0';
    signal grp_polyveck_pointwise_p_fu_1484_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal grp_polyveck_chknorm_fu_1491_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal ap_CS_fsm_state111 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state111 : signal is "none";
    signal grp_polyveck_caddq_fu_1499_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal grp_polyveck_reduce_fu_1504_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal zext_ln208_fu_1682_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln208_1_fu_1692_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln363_fu_1708_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln450_3_fu_1717_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln540_fu_1751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_1_fu_1791_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln542_1_fu_1812_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln543_1_fu_1832_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln544_1_fu_1852_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln545_1_fu_1872_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln546_1_fu_1892_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln547_1_fu_1912_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln548_1_fu_1932_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln363_1_fu_1949_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_18_fu_2011_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln540_1_fu_2069_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_3_fu_2109_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln542_3_fu_2141_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln543_3_fu_2221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal zext_ln544_3_fu_2241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln545_3_fu_2261_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal zext_ln546_3_fu_2281_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln547_3_fu_2301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln548_3_fu_2321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln363_2_fu_2696_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln450_5_fu_2705_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln540_2_fu_2739_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_4_fu_2772_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln542_4_fu_2783_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln543_4_fu_2793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal zext_ln544_4_fu_2803_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln545_4_fu_2813_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal zext_ln546_4_fu_2823_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln547_4_fu_2833_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln548_4_fu_2843_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln181_fu_2884_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln88_4_fu_3015_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_2_fu_3077_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln300_2_fu_3147_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln109_1_fu_3237_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln88_6_fu_3295_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln541_2_fu_2760_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal xor_ln450_fu_1744_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_1519_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal xor_ln450_2_fu_2732_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal trunc_ln541_fu_1768_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln541_1_fu_2086_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln417_fu_2048_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal xor_ln450_1_fu_2055_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln451_1_fu_2062_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln125_fu_2424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln125_1_fu_2450_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln125_2_fu_2476_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln125_3_fu_2502_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln88_fu_3025_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_3463_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln48_1_fu_2652_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln52_1_fu_2678_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of sub_ln52_1_fu_2678_p2 : signal is "no";
    signal sub_ln109_fu_3243_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln88_2_fu_3301_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln69_1_fu_3433_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln208_fu_1638_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln208_1_fu_1648_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln207_1_fu_1662_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln208_fu_1677_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln207_fu_1658_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1509_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln448_fu_1713_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln450_fu_1722_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_1726_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln450_fu_1734_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln450_fu_1738_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_fu_1781_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln541_fu_1785_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln542_fu_1796_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln542_fu_1802_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln542_fu_1806_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln543_fu_1817_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln543_fu_1822_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln543_fu_1826_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln544_fu_1837_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln544_fu_1842_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln544_fu_1846_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln545_fu_1857_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln545_fu_1862_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln545_fu_1866_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln546_fu_1877_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln546_fu_1882_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln546_fu_1886_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln547_fu_1897_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln547_fu_1902_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln547_fu_1906_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln548_fu_1917_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln548_fu_1922_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln548_fu_1926_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln26_fu_1970_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln_fu_1994_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln31_fu_2002_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_fu_2006_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln31_fu_2020_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln27_fu_2024_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_19_fu_2016_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_20_fu_2032_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln31_fu_2036_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_2_fu_2099_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln541_1_fu_2103_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln542_1_fu_2125_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln542_2_fu_2131_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln542_1_fu_2135_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln543_1_fu_2206_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln543_2_fu_2211_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln543_1_fu_2215_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln544_1_fu_2226_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln544_2_fu_2231_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln544_1_fu_2235_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln545_1_fu_2246_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln545_2_fu_2251_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln545_1_fu_2255_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln546_1_fu_2266_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln546_2_fu_2271_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln546_1_fu_2275_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln547_1_fu_2286_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln547_2_fu_2291_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln547_1_fu_2295_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln548_1_fu_2306_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln548_2_fu_2311_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln548_1_fu_2315_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln22_fu_2350_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_fu_2543_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln226_fu_2567_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln226_fu_2571_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln42_fu_2581_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln11_fu_2587_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_3444_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln12_fu_2601_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln47_fu_2610_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln48_fu_2614_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_2620_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln48_fu_2628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln48_fu_2634_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal a1_1_fu_2642_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_3453_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln52_fu_2657_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 of sub_ln52_fu_2657_p2 : signal is "no";
    signal tmp_34_fu_2662_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_fu_2670_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln448_1_fu_2701_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln450_1_fu_2710_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln450_4_fu_2714_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln450_4_fu_2722_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln450_1_fu_2726_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln542_2_fu_2777_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln543_2_fu_2788_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln544_2_fu_2798_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln545_2_fu_2808_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln546_2_fu_2818_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln547_2_fu_2828_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln548_2_fu_2838_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_fu_2860_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln181_16_fu_2889_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln181_fu_2893_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln181_fu_2911_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln181_fu_2911_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln181_fu_2911_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln18_fu_2917_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_fu_2921_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln19_fu_2931_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln19_fu_2931_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal sext_ln19_14_fu_2937_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln19_fu_2941_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_2982_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln88_fu_3006_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln88_3_fu_3010_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln88_fu_3021_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_3044_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln33_fu_3068_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln33_fu_3072_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln36_fu_3082_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln13_fu_3088_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_19_fu_3114_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln300_fu_3138_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln300_fu_3142_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_35_fu_3152_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln301_fu_3168_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_16_fu_3160_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln301_fu_3174_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_17_fu_3180_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_3204_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln109_fu_3228_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln109_fu_3232_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_21_fu_3262_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln88_5_fu_3286_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln88_4_fu_3290_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_22_fu_3320_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln249_fu_3356_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln249_fu_3360_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln248_fu_3371_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln69_2_fu_3393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_3_fu_3399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_1_fu_3387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln69_fu_3405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln69_fu_3411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_fu_3381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln69_1_fu_3417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln69_fu_3423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln69_fu_3429_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_3444_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_3444_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_3453_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_3463_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (119 downto 0);

    component poly_uniform IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_we0 : OUT STD_LOGIC;
        a_coeffs_d0 : OUT STD_LOGIC_VECTOR (22 downto 0);
        a_coeffs_offset : IN STD_LOGIC_VECTOR (2 downto 0);
        a_coeffs_offset1 : IN STD_LOGIC_VECTOR (2 downto 0);
        seed_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        seed_ce0 : OUT STD_LOGIC;
        seed_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        nonce : IN STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component polyvecl_uniform_gam IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        v_vec_coeffs_ce0 : OUT STD_LOGIC;
        v_vec_coeffs_we0 : OUT STD_LOGIC;
        v_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        seed_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        seed_ce0 : OUT STD_LOGIC;
        seed_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        nonce : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component keccak_absorb_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce0 : OUT STD_LOGIC;
        s_we0 : OUT STD_LOGIC;
        s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce1 : OUT STD_LOGIC;
        s_we1 : OUT STD_LOGIC;
        s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        m_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        m_ce0 : OUT STD_LOGIC;
        m_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        m_offset : IN STD_LOGIC_VECTOR (12 downto 0);
        mlen : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component poly_challenge IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        c_coeffs_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        c_coeffs_ce0 : OUT STD_LOGIC;
        c_coeffs_we0 : OUT STD_LOGIC;
        c_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        seed_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        seed_ce0 : OUT STD_LOGIC;
        seed_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component KeccakF1600_StatePer_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component KeccakF1600_StatePer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_0_ce0 : OUT STD_LOGIC;
        state_0_we0 : OUT STD_LOGIC;
        state_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_0_ce1 : OUT STD_LOGIC;
        state_0_we1 : OUT STD_LOGIC;
        state_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component unpack_sk IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rho_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rho_ce0 : OUT STD_LOGIC;
        rho_we0 : OUT STD_LOGIC;
        rho_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        t0_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        t0_vec_coeffs_ce0 : OUT STD_LOGIC;
        t0_vec_coeffs_we0 : OUT STD_LOGIC;
        t0_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t0_vec_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        t0_vec_coeffs_ce1 : OUT STD_LOGIC;
        t0_vec_coeffs_we1 : OUT STD_LOGIC;
        t0_vec_coeffs_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        s1_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        s1_vec_coeffs_ce0 : OUT STD_LOGIC;
        s1_vec_coeffs_we0 : OUT STD_LOGIC;
        s1_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        s1_vec_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        s1_vec_coeffs_ce1 : OUT STD_LOGIC;
        s1_vec_coeffs_we1 : OUT STD_LOGIC;
        s1_vec_coeffs_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        s2_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        s2_vec_coeffs_ce0 : OUT STD_LOGIC;
        s2_vec_coeffs_we0 : OUT STD_LOGIC;
        s2_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        s2_vec_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        s2_vec_coeffs_ce1 : OUT STD_LOGIC;
        s2_vec_coeffs_we1 : OUT STD_LOGIC;
        s2_vec_coeffs_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        sk_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        sk_ce0 : OUT STD_LOGIC;
        sk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sk_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        sk_ce1 : OUT STD_LOGIC;
        sk_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component polyveck_invntt_tomo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        v_vec_coeffs_ce0 : OUT STD_LOGIC;
        v_vec_coeffs_we0 : OUT STD_LOGIC;
        v_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        v_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        v_vec_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        v_vec_coeffs_ce1 : OUT STD_LOGIC;
        v_vec_coeffs_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component invntt_tomont IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_we0 : OUT STD_LOGIC;
        a_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_ce1 : OUT STD_LOGIC;
        a_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_offset : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component pack_sig IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sig_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        sig_ce0 : OUT STD_LOGIC;
        sig_we0 : OUT STD_LOGIC;
        sig_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        z_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        z_vec_coeffs_ce0 : OUT STD_LOGIC;
        z_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        h_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        h_vec_coeffs_ce0 : OUT STD_LOGIC;
        h_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ntt_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_we0 : OUT STD_LOGIC;
        a_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_ce1 : OUT STD_LOGIC;
        a_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ntt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_we0 : OUT STD_LOGIC;
        a_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_ce1 : OUT STD_LOGIC;
        a_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_offset : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component polyvecl_pointwise_a IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        w_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        w_coeffs_ce0 : OUT STD_LOGIC;
        w_coeffs_we0 : OUT STD_LOGIC;
        w_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_coeffs_offset : IN STD_LOGIC_VECTOR (2 downto 0);
        u_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        u_vec_coeffs_ce0 : OUT STD_LOGIC;
        u_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (22 downto 0);
        v_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        v_vec_coeffs_ce0 : OUT STD_LOGIC;
        v_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component keccak_absorb_4203 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce0 : OUT STD_LOGIC;
        s_we0 : OUT STD_LOGIC;
        s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        m_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_ce0 : OUT STD_LOGIC;
        m_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        m_offset : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component polyveck_pack_w1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        r_ce0 : OUT STD_LOGIC;
        r_we0 : OUT STD_LOGIC;
        r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        r_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        r_ce1 : OUT STD_LOGIC;
        r_we1 : OUT STD_LOGIC;
        r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        w1_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        w1_vec_coeffs_ce0 : OUT STD_LOGIC;
        w1_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w1_vec_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        w1_vec_coeffs_ce1 : OUT STD_LOGIC;
        w1_vec_coeffs_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component polyveck_pointwise_p IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_vec_coeffs_ce0 : OUT STD_LOGIC;
        r_vec_coeffs_we0 : OUT STD_LOGIC;
        r_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        v_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        v_vec_coeffs_ce0 : OUT STD_LOGIC;
        v_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component polyveck_chknorm IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        v_vec_coeffs_ce0 : OUT STD_LOGIC;
        v_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bound : IN STD_LOGIC_VECTOR (17 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component polyveck_caddq IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        v_vec_coeffs_ce0 : OUT STD_LOGIC;
        v_vec_coeffs_we0 : OUT STD_LOGIC;
        v_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        v_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component polyveck_reduce IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        v_vec_coeffs_ce0 : OUT STD_LOGIC;
        v_vec_coeffs_we0 : OUT STD_LOGIC;
        v_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        v_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_mac_mvdy IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        din2 : IN STD_LOGIC_VECTOR (24 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_mac_mwdI IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_mac_mibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component poly_uniform_statdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component crypto_sign_seedbuf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_sign_mat_vlbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (22 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component crypto_sign_s1_vemb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_y_vecncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (18 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component crypto_sign_z_vecocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_w0_vesc4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_cp_coudo IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    state_0_s_U : component poly_uniform_statdEe
    generic map (
        DataWidth => 64,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => state_0_s_address0,
        ce0 => state_0_s_ce0,
        we0 => state_0_s_we0,
        d0 => state_0_s_d0,
        q0 => state_0_s_q0,
        address1 => state_0_s_address1,
        ce1 => state_0_s_ce1,
        we1 => state_0_s_we1,
        d1 => state_0_s_d1,
        q1 => state_0_s_q1);

    seedbuf_U : component crypto_sign_seedbuf
    generic map (
        DataWidth => 8,
        AddressRange => 208,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => seedbuf_address0,
        ce0 => seedbuf_ce0,
        we0 => seedbuf_we0,
        d0 => seedbuf_d0,
        q0 => seedbuf_q0,
        address1 => seedbuf_address1,
        ce1 => seedbuf_ce1,
        we1 => seedbuf_we1,
        d1 => seedbuf_d1);

    mat_vec_coeffs_U : component crypto_sign_mat_vlbW
    generic map (
        DataWidth => 23,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mat_vec_coeffs_address0,
        ce0 => mat_vec_coeffs_ce0,
        we0 => mat_vec_coeffs_we0,
        d0 => grp_poly_uniform_fu_1346_a_coeffs_d0,
        q0 => mat_vec_coeffs_q0);

    s1_vec_coeffs_U : component crypto_sign_s1_vemb6
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => s1_vec_coeffs_address0,
        ce0 => s1_vec_coeffs_ce0,
        we0 => s1_vec_coeffs_we0,
        d0 => s1_vec_coeffs_d0,
        q0 => s1_vec_coeffs_q0,
        address1 => s1_vec_coeffs_address1,
        ce1 => s1_vec_coeffs_ce1,
        we1 => s1_vec_coeffs_we1,
        d1 => grp_unpack_sk_fu_1406_s1_vec_coeffs_d1,
        q1 => s1_vec_coeffs_q1);

    y_vec_coeffs_U : component crypto_sign_y_vecncg
    generic map (
        DataWidth => 19,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_vec_coeffs_address0,
        ce0 => y_vec_coeffs_ce0,
        we0 => y_vec_coeffs_we0,
        d0 => grp_polyvecl_uniform_gam_fu_1359_v_vec_coeffs_d0,
        q0 => y_vec_coeffs_q0);

    z_vec_coeffs_U : component crypto_sign_z_vecocq
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => z_vec_coeffs_address0,
        ce0 => z_vec_coeffs_ce0,
        we0 => z_vec_coeffs_we0,
        d0 => z_vec_coeffs_d0,
        q0 => z_vec_coeffs_q0,
        address1 => z_vec_coeffs_address1,
        ce1 => z_vec_coeffs_ce1,
        q1 => z_vec_coeffs_q1);

    t0_vec_coeffs_U : component crypto_sign_s1_vemb6
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t0_vec_coeffs_address0,
        ce0 => t0_vec_coeffs_ce0,
        we0 => t0_vec_coeffs_we0,
        d0 => t0_vec_coeffs_d0,
        q0 => t0_vec_coeffs_q0,
        address1 => t0_vec_coeffs_address1,
        ce1 => t0_vec_coeffs_ce1,
        we1 => t0_vec_coeffs_we1,
        d1 => grp_unpack_sk_fu_1406_t0_vec_coeffs_d1,
        q1 => t0_vec_coeffs_q1);

    s2_vec_coeffs_U : component crypto_sign_s1_vemb6
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => s2_vec_coeffs_address0,
        ce0 => s2_vec_coeffs_ce0,
        we0 => s2_vec_coeffs_we0,
        d0 => s2_vec_coeffs_d0,
        q0 => s2_vec_coeffs_q0,
        address1 => s2_vec_coeffs_address1,
        ce1 => s2_vec_coeffs_ce1,
        we1 => s2_vec_coeffs_we1,
        d1 => grp_unpack_sk_fu_1406_s2_vec_coeffs_d1,
        q1 => s2_vec_coeffs_q1);

    w1_vec_coeffs_U : component crypto_sign_z_vecocq
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w1_vec_coeffs_address0,
        ce0 => w1_vec_coeffs_ce0,
        we0 => w1_vec_coeffs_we0,
        d0 => w1_vec_coeffs_d0,
        q0 => w1_vec_coeffs_q0,
        address1 => w1_vec_coeffs_address1,
        ce1 => w1_vec_coeffs_ce1,
        q1 => w1_vec_coeffs_q1);

    w0_vec_coeffs_U : component crypto_sign_w0_vesc4
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w0_vec_coeffs_address0,
        ce0 => w0_vec_coeffs_ce0,
        we0 => w0_vec_coeffs_we0,
        d0 => w0_vec_coeffs_d0,
        q0 => w0_vec_coeffs_q0);

    h_vec_coeffs_U : component crypto_sign_z_vecocq
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => h_vec_coeffs_address0,
        ce0 => h_vec_coeffs_ce0,
        we0 => h_vec_coeffs_we0,
        d0 => h_vec_coeffs_d0,
        q0 => h_vec_coeffs_q0,
        address1 => grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_address1,
        ce1 => h_vec_coeffs_ce1,
        q1 => h_vec_coeffs_q1);

    cp_coeffs_U : component crypto_sign_cp_coudo
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cp_coeffs_address0,
        ce0 => cp_coeffs_ce0,
        we0 => cp_coeffs_we0,
        d0 => cp_coeffs_d0,
        q0 => cp_coeffs_q0,
        address1 => grp_ntt_1_fu_1440_a_address1,
        ce1 => cp_coeffs_ce1,
        q1 => cp_coeffs_q1);

    state_s_U : component poly_uniform_statdEe
    generic map (
        DataWidth => 64,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => state_s_address0,
        ce0 => state_s_ce0,
        we0 => state_s_we0,
        d0 => state_s_d0,
        q0 => state_s_q0,
        address1 => state_s_address1,
        ce1 => state_s_ce1,
        we1 => state_s_we1,
        d1 => state_s_d1,
        q1 => state_s_q1);

    grp_poly_uniform_fu_1346 : component poly_uniform
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_uniform_fu_1346_ap_start,
        ap_done => grp_poly_uniform_fu_1346_ap_done,
        ap_idle => grp_poly_uniform_fu_1346_ap_idle,
        ap_ready => grp_poly_uniform_fu_1346_ap_ready,
        a_coeffs_address0 => grp_poly_uniform_fu_1346_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_uniform_fu_1346_a_coeffs_ce0,
        a_coeffs_we0 => grp_poly_uniform_fu_1346_a_coeffs_we0,
        a_coeffs_d0 => grp_poly_uniform_fu_1346_a_coeffs_d0,
        a_coeffs_offset => i_0_i_reg_972,
        a_coeffs_offset1 => j_0_i_reg_984,
        seed_address0 => grp_poly_uniform_fu_1346_seed_address0,
        seed_ce0 => grp_poly_uniform_fu_1346_seed_ce0,
        seed_q0 => seedbuf_q0,
        nonce => add_ln_reg_3679);

    grp_polyvecl_uniform_gam_fu_1359 : component polyvecl_uniform_gam
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_polyvecl_uniform_gam_fu_1359_ap_start,
        ap_done => grp_polyvecl_uniform_gam_fu_1359_ap_done,
        ap_idle => grp_polyvecl_uniform_gam_fu_1359_ap_idle,
        ap_ready => grp_polyvecl_uniform_gam_fu_1359_ap_ready,
        v_vec_coeffs_address0 => grp_polyvecl_uniform_gam_fu_1359_v_vec_coeffs_address0,
        v_vec_coeffs_ce0 => grp_polyvecl_uniform_gam_fu_1359_v_vec_coeffs_ce0,
        v_vec_coeffs_we0 => grp_polyvecl_uniform_gam_fu_1359_v_vec_coeffs_we0,
        v_vec_coeffs_d0 => grp_polyvecl_uniform_gam_fu_1359_v_vec_coeffs_d0,
        seed_address0 => grp_polyvecl_uniform_gam_fu_1359_seed_address0,
        seed_ce0 => grp_polyvecl_uniform_gam_fu_1359_seed_ce0,
        seed_q0 => seedbuf_q0,
        nonce => nonce_0_i_reg_1032);

    grp_keccak_absorb_3_fu_1369 : component keccak_absorb_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_keccak_absorb_3_fu_1369_ap_start,
        ap_done => grp_keccak_absorb_3_fu_1369_ap_done,
        ap_idle => grp_keccak_absorb_3_fu_1369_ap_idle,
        ap_ready => grp_keccak_absorb_3_fu_1369_ap_ready,
        s_address0 => grp_keccak_absorb_3_fu_1369_s_address0,
        s_ce0 => grp_keccak_absorb_3_fu_1369_s_ce0,
        s_we0 => grp_keccak_absorb_3_fu_1369_s_we0,
        s_d0 => grp_keccak_absorb_3_fu_1369_s_d0,
        s_q0 => state_s_q0,
        s_address1 => grp_keccak_absorb_3_fu_1369_s_address1,
        s_ce1 => grp_keccak_absorb_3_fu_1369_s_ce1,
        s_we1 => grp_keccak_absorb_3_fu_1369_s_we1,
        s_d1 => grp_keccak_absorb_3_fu_1369_s_d1,
        s_q1 => state_s_q1,
        m_address0 => grp_keccak_absorb_3_fu_1369_m_address0,
        m_ce0 => grp_keccak_absorb_3_fu_1369_m_ce0,
        m_q0 => sm_q0,
        m_offset => grp_keccak_absorb_3_fu_1369_m_offset,
        mlen => grp_keccak_absorb_3_fu_1369_mlen,
        ap_return => grp_keccak_absorb_3_fu_1369_ap_return);

    grp_poly_challenge_fu_1383 : component poly_challenge
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_challenge_fu_1383_ap_start,
        ap_done => grp_poly_challenge_fu_1383_ap_done,
        ap_idle => grp_poly_challenge_fu_1383_ap_idle,
        ap_ready => grp_poly_challenge_fu_1383_ap_ready,
        c_coeffs_address0 => grp_poly_challenge_fu_1383_c_coeffs_address0,
        c_coeffs_ce0 => grp_poly_challenge_fu_1383_c_coeffs_ce0,
        c_coeffs_we0 => grp_poly_challenge_fu_1383_c_coeffs_we0,
        c_coeffs_d0 => grp_poly_challenge_fu_1383_c_coeffs_d0,
        c_coeffs_q0 => cp_coeffs_q0,
        seed_address0 => grp_poly_challenge_fu_1383_seed_address0,
        seed_ce0 => grp_poly_challenge_fu_1383_seed_ce0,
        seed_q0 => sm_q0);

    grp_KeccakF1600_StatePer_1_fu_1392 : component KeccakF1600_StatePer_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePer_1_fu_1392_ap_start,
        ap_done => grp_KeccakF1600_StatePer_1_fu_1392_ap_done,
        ap_idle => grp_KeccakF1600_StatePer_1_fu_1392_ap_idle,
        ap_ready => grp_KeccakF1600_StatePer_1_fu_1392_ap_ready,
        state_address0 => grp_KeccakF1600_StatePer_1_fu_1392_state_address0,
        state_ce0 => grp_KeccakF1600_StatePer_1_fu_1392_state_ce0,
        state_we0 => grp_KeccakF1600_StatePer_1_fu_1392_state_we0,
        state_d0 => grp_KeccakF1600_StatePer_1_fu_1392_state_d0,
        state_q0 => state_s_q0,
        state_address1 => grp_KeccakF1600_StatePer_1_fu_1392_state_address1,
        state_ce1 => grp_KeccakF1600_StatePer_1_fu_1392_state_ce1,
        state_we1 => grp_KeccakF1600_StatePer_1_fu_1392_state_we1,
        state_d1 => grp_KeccakF1600_StatePer_1_fu_1392_state_d1,
        state_q1 => state_s_q1);

    grp_KeccakF1600_StatePer_fu_1399 : component KeccakF1600_StatePer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePer_fu_1399_ap_start,
        ap_done => grp_KeccakF1600_StatePer_fu_1399_ap_done,
        ap_idle => grp_KeccakF1600_StatePer_fu_1399_ap_idle,
        ap_ready => grp_KeccakF1600_StatePer_fu_1399_ap_ready,
        state_0_address0 => grp_KeccakF1600_StatePer_fu_1399_state_0_address0,
        state_0_ce0 => grp_KeccakF1600_StatePer_fu_1399_state_0_ce0,
        state_0_we0 => grp_KeccakF1600_StatePer_fu_1399_state_0_we0,
        state_0_d0 => grp_KeccakF1600_StatePer_fu_1399_state_0_d0,
        state_0_q0 => state_0_s_q0,
        state_0_address1 => grp_KeccakF1600_StatePer_fu_1399_state_0_address1,
        state_0_ce1 => grp_KeccakF1600_StatePer_fu_1399_state_0_ce1,
        state_0_we1 => grp_KeccakF1600_StatePer_fu_1399_state_0_we1,
        state_0_d1 => grp_KeccakF1600_StatePer_fu_1399_state_0_d1,
        state_0_q1 => state_0_s_q1);

    grp_unpack_sk_fu_1406 : component unpack_sk
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_unpack_sk_fu_1406_ap_start,
        ap_done => grp_unpack_sk_fu_1406_ap_done,
        ap_idle => grp_unpack_sk_fu_1406_ap_idle,
        ap_ready => grp_unpack_sk_fu_1406_ap_ready,
        rho_address0 => grp_unpack_sk_fu_1406_rho_address0,
        rho_ce0 => grp_unpack_sk_fu_1406_rho_ce0,
        rho_we0 => grp_unpack_sk_fu_1406_rho_we0,
        rho_d0 => grp_unpack_sk_fu_1406_rho_d0,
        t0_vec_coeffs_address0 => grp_unpack_sk_fu_1406_t0_vec_coeffs_address0,
        t0_vec_coeffs_ce0 => grp_unpack_sk_fu_1406_t0_vec_coeffs_ce0,
        t0_vec_coeffs_we0 => grp_unpack_sk_fu_1406_t0_vec_coeffs_we0,
        t0_vec_coeffs_d0 => grp_unpack_sk_fu_1406_t0_vec_coeffs_d0,
        t0_vec_coeffs_address1 => grp_unpack_sk_fu_1406_t0_vec_coeffs_address1,
        t0_vec_coeffs_ce1 => grp_unpack_sk_fu_1406_t0_vec_coeffs_ce1,
        t0_vec_coeffs_we1 => grp_unpack_sk_fu_1406_t0_vec_coeffs_we1,
        t0_vec_coeffs_d1 => grp_unpack_sk_fu_1406_t0_vec_coeffs_d1,
        s1_vec_coeffs_address0 => grp_unpack_sk_fu_1406_s1_vec_coeffs_address0,
        s1_vec_coeffs_ce0 => grp_unpack_sk_fu_1406_s1_vec_coeffs_ce0,
        s1_vec_coeffs_we0 => grp_unpack_sk_fu_1406_s1_vec_coeffs_we0,
        s1_vec_coeffs_d0 => grp_unpack_sk_fu_1406_s1_vec_coeffs_d0,
        s1_vec_coeffs_address1 => grp_unpack_sk_fu_1406_s1_vec_coeffs_address1,
        s1_vec_coeffs_ce1 => grp_unpack_sk_fu_1406_s1_vec_coeffs_ce1,
        s1_vec_coeffs_we1 => grp_unpack_sk_fu_1406_s1_vec_coeffs_we1,
        s1_vec_coeffs_d1 => grp_unpack_sk_fu_1406_s1_vec_coeffs_d1,
        s2_vec_coeffs_address0 => grp_unpack_sk_fu_1406_s2_vec_coeffs_address0,
        s2_vec_coeffs_ce0 => grp_unpack_sk_fu_1406_s2_vec_coeffs_ce0,
        s2_vec_coeffs_we0 => grp_unpack_sk_fu_1406_s2_vec_coeffs_we0,
        s2_vec_coeffs_d0 => grp_unpack_sk_fu_1406_s2_vec_coeffs_d0,
        s2_vec_coeffs_address1 => grp_unpack_sk_fu_1406_s2_vec_coeffs_address1,
        s2_vec_coeffs_ce1 => grp_unpack_sk_fu_1406_s2_vec_coeffs_ce1,
        s2_vec_coeffs_we1 => grp_unpack_sk_fu_1406_s2_vec_coeffs_we1,
        s2_vec_coeffs_d1 => grp_unpack_sk_fu_1406_s2_vec_coeffs_d1,
        sk_address0 => grp_unpack_sk_fu_1406_sk_address0,
        sk_ce0 => grp_unpack_sk_fu_1406_sk_ce0,
        sk_q0 => sk_q0,
        sk_address1 => grp_unpack_sk_fu_1406_sk_address1,
        sk_ce1 => grp_unpack_sk_fu_1406_sk_ce1,
        sk_q1 => sk_q1);

    grp_polyveck_invntt_tomo_fu_1416 : component polyveck_invntt_tomo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_polyveck_invntt_tomo_fu_1416_ap_start,
        ap_done => grp_polyveck_invntt_tomo_fu_1416_ap_done,
        ap_idle => grp_polyveck_invntt_tomo_fu_1416_ap_idle,
        ap_ready => grp_polyveck_invntt_tomo_fu_1416_ap_ready,
        v_vec_coeffs_address0 => grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_address0,
        v_vec_coeffs_ce0 => grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_ce0,
        v_vec_coeffs_we0 => grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_we0,
        v_vec_coeffs_d0 => grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_d0,
        v_vec_coeffs_q0 => grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_q0,
        v_vec_coeffs_address1 => grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_address1,
        v_vec_coeffs_ce1 => grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_ce1,
        v_vec_coeffs_q1 => grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_q1);

    grp_invntt_tomont_fu_1423 : component invntt_tomont
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_invntt_tomont_fu_1423_ap_start,
        ap_done => grp_invntt_tomont_fu_1423_ap_done,
        ap_idle => grp_invntt_tomont_fu_1423_ap_idle,
        ap_ready => grp_invntt_tomont_fu_1423_ap_ready,
        a_address0 => grp_invntt_tomont_fu_1423_a_address0,
        a_ce0 => grp_invntt_tomont_fu_1423_a_ce0,
        a_we0 => grp_invntt_tomont_fu_1423_a_we0,
        a_d0 => grp_invntt_tomont_fu_1423_a_d0,
        a_q0 => z_vec_coeffs_q0,
        a_address1 => grp_invntt_tomont_fu_1423_a_address1,
        a_ce1 => grp_invntt_tomont_fu_1423_a_ce1,
        a_q1 => z_vec_coeffs_q1,
        a_offset => i_0_i84_reg_1178);

    grp_pack_sig_fu_1432 : component pack_sig
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pack_sig_fu_1432_ap_start,
        ap_done => grp_pack_sig_fu_1432_ap_done,
        ap_idle => grp_pack_sig_fu_1432_ap_idle,
        ap_ready => grp_pack_sig_fu_1432_ap_ready,
        sig_address0 => grp_pack_sig_fu_1432_sig_address0,
        sig_ce0 => grp_pack_sig_fu_1432_sig_ce0,
        sig_we0 => grp_pack_sig_fu_1432_sig_we0,
        sig_d0 => grp_pack_sig_fu_1432_sig_d0,
        z_vec_coeffs_address0 => grp_pack_sig_fu_1432_z_vec_coeffs_address0,
        z_vec_coeffs_ce0 => grp_pack_sig_fu_1432_z_vec_coeffs_ce0,
        z_vec_coeffs_q0 => z_vec_coeffs_q0,
        h_vec_coeffs_address0 => grp_pack_sig_fu_1432_h_vec_coeffs_address0,
        h_vec_coeffs_ce0 => grp_pack_sig_fu_1432_h_vec_coeffs_ce0,
        h_vec_coeffs_q0 => h_vec_coeffs_q0);

    grp_ntt_1_fu_1440 : component ntt_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ntt_1_fu_1440_ap_start,
        ap_done => grp_ntt_1_fu_1440_ap_done,
        ap_idle => grp_ntt_1_fu_1440_ap_idle,
        ap_ready => grp_ntt_1_fu_1440_ap_ready,
        a_address0 => grp_ntt_1_fu_1440_a_address0,
        a_ce0 => grp_ntt_1_fu_1440_a_ce0,
        a_we0 => grp_ntt_1_fu_1440_a_we0,
        a_d0 => grp_ntt_1_fu_1440_a_d0,
        a_q0 => cp_coeffs_q0,
        a_address1 => grp_ntt_1_fu_1440_a_address1,
        a_ce1 => grp_ntt_1_fu_1440_a_ce1,
        a_q1 => cp_coeffs_q1);

    grp_ntt_fu_1447 : component ntt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ntt_fu_1447_ap_start,
        ap_done => grp_ntt_fu_1447_ap_done,
        ap_idle => grp_ntt_fu_1447_ap_idle,
        ap_ready => grp_ntt_fu_1447_ap_ready,
        a_address0 => grp_ntt_fu_1447_a_address0,
        a_ce0 => grp_ntt_fu_1447_a_ce0,
        a_we0 => grp_ntt_fu_1447_a_we0,
        a_d0 => grp_ntt_fu_1447_a_d0,
        a_q0 => grp_ntt_fu_1447_a_q0,
        a_address1 => grp_ntt_fu_1447_a_address1,
        a_ce1 => grp_ntt_fu_1447_a_ce1,
        a_q1 => grp_ntt_fu_1447_a_q1,
        a_offset => grp_ntt_fu_1447_a_offset);

    grp_polyvecl_pointwise_a_fu_1459 : component polyvecl_pointwise_a
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_polyvecl_pointwise_a_fu_1459_ap_start,
        ap_done => grp_polyvecl_pointwise_a_fu_1459_ap_done,
        ap_idle => grp_polyvecl_pointwise_a_fu_1459_ap_idle,
        ap_ready => grp_polyvecl_pointwise_a_fu_1459_ap_ready,
        w_coeffs_address0 => grp_polyvecl_pointwise_a_fu_1459_w_coeffs_address0,
        w_coeffs_ce0 => grp_polyvecl_pointwise_a_fu_1459_w_coeffs_ce0,
        w_coeffs_we0 => grp_polyvecl_pointwise_a_fu_1459_w_coeffs_we0,
        w_coeffs_d0 => grp_polyvecl_pointwise_a_fu_1459_w_coeffs_d0,
        w_coeffs_q0 => w1_vec_coeffs_q0,
        w_coeffs_offset => i_0_i52_reg_1100,
        u_vec_coeffs_address0 => grp_polyvecl_pointwise_a_fu_1459_u_vec_coeffs_address0,
        u_vec_coeffs_ce0 => grp_polyvecl_pointwise_a_fu_1459_u_vec_coeffs_ce0,
        u_vec_coeffs_q0 => mat_vec_coeffs_q0,
        v_vec_coeffs_address0 => grp_polyvecl_pointwise_a_fu_1459_v_vec_coeffs_address0,
        v_vec_coeffs_ce0 => grp_polyvecl_pointwise_a_fu_1459_v_vec_coeffs_ce0,
        v_vec_coeffs_q0 => z_vec_coeffs_q0);

    grp_keccak_absorb_4203_fu_1468 : component keccak_absorb_4203
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_keccak_absorb_4203_fu_1468_ap_start,
        ap_done => grp_keccak_absorb_4203_fu_1468_ap_done,
        ap_idle => grp_keccak_absorb_4203_fu_1468_ap_idle,
        ap_ready => grp_keccak_absorb_4203_fu_1468_ap_ready,
        s_address0 => grp_keccak_absorb_4203_fu_1468_s_address0,
        s_ce0 => grp_keccak_absorb_4203_fu_1468_s_ce0,
        s_we0 => grp_keccak_absorb_4203_fu_1468_s_we0,
        s_d0 => grp_keccak_absorb_4203_fu_1468_s_d0,
        s_q0 => state_s_q0,
        m_address0 => grp_keccak_absorb_4203_fu_1468_m_address0,
        m_ce0 => grp_keccak_absorb_4203_fu_1468_m_ce0,
        m_q0 => seedbuf_q0,
        m_offset => grp_keccak_absorb_4203_fu_1468_m_offset);

    grp_polyveck_pack_w1_fu_1477 : component polyveck_pack_w1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_polyveck_pack_w1_fu_1477_ap_start,
        ap_done => grp_polyveck_pack_w1_fu_1477_ap_done,
        ap_idle => grp_polyveck_pack_w1_fu_1477_ap_idle,
        ap_ready => grp_polyveck_pack_w1_fu_1477_ap_ready,
        r_address0 => grp_polyveck_pack_w1_fu_1477_r_address0,
        r_ce0 => grp_polyveck_pack_w1_fu_1477_r_ce0,
        r_we0 => grp_polyveck_pack_w1_fu_1477_r_we0,
        r_d0 => grp_polyveck_pack_w1_fu_1477_r_d0,
        r_address1 => grp_polyveck_pack_w1_fu_1477_r_address1,
        r_ce1 => grp_polyveck_pack_w1_fu_1477_r_ce1,
        r_we1 => grp_polyveck_pack_w1_fu_1477_r_we1,
        r_d1 => grp_polyveck_pack_w1_fu_1477_r_d1,
        w1_vec_coeffs_address0 => grp_polyveck_pack_w1_fu_1477_w1_vec_coeffs_address0,
        w1_vec_coeffs_ce0 => grp_polyveck_pack_w1_fu_1477_w1_vec_coeffs_ce0,
        w1_vec_coeffs_q0 => w1_vec_coeffs_q0,
        w1_vec_coeffs_address1 => grp_polyveck_pack_w1_fu_1477_w1_vec_coeffs_address1,
        w1_vec_coeffs_ce1 => grp_polyveck_pack_w1_fu_1477_w1_vec_coeffs_ce1,
        w1_vec_coeffs_q1 => w1_vec_coeffs_q1);

    grp_polyveck_pointwise_p_fu_1484 : component polyveck_pointwise_p
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_polyveck_pointwise_p_fu_1484_ap_start,
        ap_done => grp_polyveck_pointwise_p_fu_1484_ap_done,
        ap_idle => grp_polyveck_pointwise_p_fu_1484_ap_idle,
        ap_ready => grp_polyveck_pointwise_p_fu_1484_ap_ready,
        r_vec_coeffs_address0 => grp_polyveck_pointwise_p_fu_1484_r_vec_coeffs_address0,
        r_vec_coeffs_ce0 => grp_polyveck_pointwise_p_fu_1484_r_vec_coeffs_ce0,
        r_vec_coeffs_we0 => grp_polyveck_pointwise_p_fu_1484_r_vec_coeffs_we0,
        r_vec_coeffs_d0 => grp_polyveck_pointwise_p_fu_1484_r_vec_coeffs_d0,
        a_coeffs_address0 => grp_polyveck_pointwise_p_fu_1484_a_coeffs_address0,
        a_coeffs_ce0 => grp_polyveck_pointwise_p_fu_1484_a_coeffs_ce0,
        a_coeffs_q0 => cp_coeffs_q0,
        v_vec_coeffs_address0 => grp_polyveck_pointwise_p_fu_1484_v_vec_coeffs_address0,
        v_vec_coeffs_ce0 => grp_polyveck_pointwise_p_fu_1484_v_vec_coeffs_ce0,
        v_vec_coeffs_q0 => grp_polyveck_pointwise_p_fu_1484_v_vec_coeffs_q0);

    grp_polyveck_chknorm_fu_1491 : component polyveck_chknorm
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_polyveck_chknorm_fu_1491_ap_start,
        ap_done => grp_polyveck_chknorm_fu_1491_ap_done,
        ap_idle => grp_polyveck_chknorm_fu_1491_ap_idle,
        ap_ready => grp_polyveck_chknorm_fu_1491_ap_ready,
        v_vec_coeffs_address0 => grp_polyveck_chknorm_fu_1491_v_vec_coeffs_address0,
        v_vec_coeffs_ce0 => grp_polyveck_chknorm_fu_1491_v_vec_coeffs_ce0,
        v_vec_coeffs_q0 => grp_polyveck_chknorm_fu_1491_v_vec_coeffs_q0,
        bound => grp_polyveck_chknorm_fu_1491_bound,
        ap_return => grp_polyveck_chknorm_fu_1491_ap_return);

    grp_polyveck_caddq_fu_1499 : component polyveck_caddq
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_polyveck_caddq_fu_1499_ap_start,
        ap_done => grp_polyveck_caddq_fu_1499_ap_done,
        ap_idle => grp_polyveck_caddq_fu_1499_ap_idle,
        ap_ready => grp_polyveck_caddq_fu_1499_ap_ready,
        v_vec_coeffs_address0 => grp_polyveck_caddq_fu_1499_v_vec_coeffs_address0,
        v_vec_coeffs_ce0 => grp_polyveck_caddq_fu_1499_v_vec_coeffs_ce0,
        v_vec_coeffs_we0 => grp_polyveck_caddq_fu_1499_v_vec_coeffs_we0,
        v_vec_coeffs_d0 => grp_polyveck_caddq_fu_1499_v_vec_coeffs_d0,
        v_vec_coeffs_q0 => grp_polyveck_caddq_fu_1499_v_vec_coeffs_q0);

    grp_polyveck_reduce_fu_1504 : component polyveck_reduce
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_polyveck_reduce_fu_1504_ap_start,
        ap_done => grp_polyveck_reduce_fu_1504_ap_done,
        ap_idle => grp_polyveck_reduce_fu_1504_ap_idle,
        ap_ready => grp_polyveck_reduce_fu_1504_ap_ready,
        v_vec_coeffs_address0 => grp_polyveck_reduce_fu_1504_v_vec_coeffs_address0,
        v_vec_coeffs_ce0 => grp_polyveck_reduce_fu_1504_v_vec_coeffs_ce0,
        v_vec_coeffs_we0 => grp_polyveck_reduce_fu_1504_v_vec_coeffs_we0,
        v_vec_coeffs_d0 => grp_polyveck_reduce_fu_1504_v_vec_coeffs_d0,
        v_vec_coeffs_q0 => grp_polyveck_reduce_fu_1504_v_vec_coeffs_q0);

    crypto_sign_mac_mvdy_U96 : component crypto_sign_mac_mvdy
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 25,
        din2_WIDTH => 25,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_3444_p0,
        din1 => trunc_ln11_fu_2587_p4,
        din2 => grp_fu_3444_p2,
        dout => grp_fu_3444_p3);

    crypto_sign_mac_mwdI_U97 : component crypto_sign_mac_mwdI
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_3453_p0,
        din1 => a1_1_fu_2642_p2,
        din2 => w1_vec_coeffs_q0,
        dout => grp_fu_3453_p3);

    crypto_sign_mac_mibs_U98 : component crypto_sign_mac_mibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 24,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => trunc_ln13_fu_3088_p4,
        din1 => grp_fu_3463_p1,
        din2 => z_vec_coeffs_q0,
        dout => grp_fu_3463_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_1_fu_1392_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_1_fu_1392_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    grp_KeccakF1600_StatePer_1_fu_1392_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_1_fu_1392_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_1_fu_1392_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_fu_1399_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_fu_1399_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    grp_KeccakF1600_StatePer_fu_1399_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_fu_1399_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_fu_1399_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_invntt_tomont_fu_1423_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_invntt_tomont_fu_1423_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln107_fu_2958_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state86))) then 
                    grp_invntt_tomont_fu_1423_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_invntt_tomont_fu_1423_ap_ready = ap_const_logic_1)) then 
                    grp_invntt_tomont_fu_1423_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_keccak_absorb_3_fu_1369_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_keccak_absorb_3_fu_1369_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    grp_keccak_absorb_3_fu_1369_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_keccak_absorb_3_fu_1369_ap_ready = ap_const_logic_1)) then 
                    grp_keccak_absorb_3_fu_1369_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_keccak_absorb_4203_fu_1468_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_keccak_absorb_4203_fu_1468_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln362_2_fu_2684_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state65)) or ((icmp_ln362_fu_1696_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
                    grp_keccak_absorb_4203_fu_1468_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_keccak_absorb_4203_fu_1468_ap_ready = ap_const_logic_1)) then 
                    grp_keccak_absorb_4203_fu_1468_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ntt_1_fu_1440_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ntt_1_fu_1440_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
                    grp_ntt_1_fu_1440_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ntt_1_fu_1440_ap_ready = ap_const_logic_1)) then 
                    grp_ntt_1_fu_1440_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ntt_fu_1447_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ntt_fu_1447_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln100_1_fu_2507_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52)) or ((icmp_ln282_1_fu_2389_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((icmp_ln282_fu_2377_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38)) or ((icmp_ln100_fu_2365_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36)))) then 
                    grp_ntt_fu_1447_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ntt_fu_1447_ap_ready = ap_const_logic_1)) then 
                    grp_ntt_fu_1447_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pack_sig_fu_1432_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pack_sig_fu_1432_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln392_fu_3308_p2 = ap_const_lv1_1) and (icmp_ln158_reg_3978 = ap_const_lv1_1) and (tmp_5_reg_4043 = ap_const_lv1_0) and (tmp_s_reg_4039 = ap_const_lv1_0) and (icmp_ln173_fu_3332_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state117))) then 
                    grp_pack_sig_fu_1432_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pack_sig_fu_1432_ap_ready = ap_const_logic_1)) then 
                    grp_pack_sig_fu_1432_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_challenge_fu_1383_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_challenge_fu_1383_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln540_2_fu_2744_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
                    grp_poly_challenge_fu_1383_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_challenge_fu_1383_ap_ready = ap_const_logic_1)) then 
                    grp_poly_challenge_fu_1383_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_uniform_fu_1346_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_uniform_fu_1346_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln21_fu_2338_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                    grp_poly_uniform_fu_1346_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_uniform_fu_1346_ap_ready = ap_const_logic_1)) then 
                    grp_poly_uniform_fu_1346_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_polyveck_caddq_fu_1499_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_polyveck_caddq_fu_1499_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state59) or ((icmp_ln234_fu_3250_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state113)))) then 
                    grp_polyveck_caddq_fu_1499_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_polyveck_caddq_fu_1499_ap_ready = ap_const_logic_1)) then 
                    grp_polyveck_caddq_fu_1499_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_polyveck_chknorm_fu_1491_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_polyveck_chknorm_fu_1491_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state104))) then 
                    grp_polyveck_chknorm_fu_1491_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_polyveck_chknorm_fu_1491_ap_ready = ap_const_logic_1)) then 
                    grp_polyveck_chknorm_fu_1491_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_polyveck_invntt_tomo_fu_1416_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_polyveck_invntt_tomo_fu_1416_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
                    grp_polyveck_invntt_tomo_fu_1416_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_polyveck_invntt_tomo_fu_1416_ap_ready = ap_const_logic_1)) then 
                    grp_polyveck_invntt_tomo_fu_1416_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_polyveck_pack_w1_fu_1477_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_polyveck_pack_w1_fu_1477_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln371_fu_2531_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
                    grp_polyveck_pack_w1_fu_1477_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_polyveck_pack_w1_fu_1477_ap_ready = ap_const_logic_1)) then 
                    grp_polyveck_pack_w1_fu_1477_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_polyveck_pointwise_p_fu_1484_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_polyveck_pointwise_p_fu_1484_ap_start_reg <= ap_const_logic_0;
            else
                if ((((grp_polyveck_chknorm_fu_1491_ap_done = ap_const_logic_1) and (grp_polyveck_chknorm_fu_1491_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state105)) or ((icmp_ln158_fu_3102_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state94)))) then 
                    grp_polyveck_pointwise_p_fu_1484_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_polyveck_pointwise_p_fu_1484_ap_ready = ap_const_logic_1)) then 
                    grp_polyveck_pointwise_p_fu_1484_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_polyveck_reduce_fu_1504_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_polyveck_reduce_fu_1504_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state109) or ((icmp_ln252_fu_3192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state100)) or ((icmp_ln28_fu_2519_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54)))) then 
                    grp_polyveck_reduce_fu_1504_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_polyveck_reduce_fu_1504_ap_ready = ap_const_logic_1)) then 
                    grp_polyveck_reduce_fu_1504_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_polyvecl_pointwise_a_fu_1459_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_polyvecl_pointwise_a_fu_1459_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln28_fu_2519_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state54))) then 
                    grp_polyvecl_pointwise_a_fu_1459_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_polyvecl_pointwise_a_fu_1459_ap_ready = ap_const_logic_1)) then 
                    grp_polyvecl_pointwise_a_fu_1459_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_polyvecl_uniform_gam_fu_1359_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_polyvecl_uniform_gam_fu_1359_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                    grp_polyvecl_uniform_gam_fu_1359_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_polyvecl_uniform_gam_fu_1359_ap_ready = ap_const_logic_1)) then 
                    grp_polyvecl_uniform_gam_fu_1359_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_unpack_sk_fu_1406_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_unpack_sk_fu_1406_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln207_fu_1666_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_unpack_sk_fu_1406_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_unpack_sk_fu_1406_ap_ready = ap_const_logic_1)) then 
                    grp_unpack_sk_fu_1406_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i101_reg_1256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln108_fu_3216_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state101))) then 
                i_0_i101_reg_1256 <= i_85_reg_4011;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state99) and (grp_polyveck_invntt_tomo_fu_1416_ap_done = ap_const_logic_1))) then 
                i_0_i101_reg_1256 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_i109_reg_1278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_polyveck_chknorm_fu_1491_ap_done = ap_const_logic_1) and (grp_polyveck_chknorm_fu_1491_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state112))) then 
                i_0_i109_reg_1278 <= ap_const_lv3_0;
            elsif (((icmp_ln87_1_fu_3274_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state114))) then 
                i_0_i109_reg_1278 <= i_88_reg_4050;
            end if; 
        end if;
    end process;

    i_0_i38_reg_996_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_2326_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                i_0_i38_reg_996 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state37) and (grp_ntt_fu_1447_ap_done = ap_const_logic_1))) then 
                i_0_i38_reg_996 <= i_69_reg_3687;
            end if; 
        end if;
    end process;

    i_0_i40_reg_1008_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_fu_2365_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                i_0_i40_reg_1008 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state39) and (grp_ntt_fu_1447_ap_done = ap_const_logic_1))) then 
                i_0_i40_reg_1008 <= i_70_reg_3695;
            end if; 
        end if;
    end process;

    i_0_i42_reg_1020_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln282_fu_2377_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                i_0_i42_reg_1020 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state41) and (grp_ntt_fu_1447_ap_done = ap_const_logic_1))) then 
                i_0_i42_reg_1020 <= i_71_reg_3703;
            end if; 
        end if;
    end process;

    i_0_i47_reg_1088_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln125_3_reg_3785 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                i_0_i47_reg_1088 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state53) and (grp_ntt_fu_1447_ap_done = ap_const_logic_1))) then 
                i_0_i47_reg_1088 <= i_72_reg_3792;
            end if; 
        end if;
    end process;

    i_0_i52_reg_1100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_1_fu_2507_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                i_0_i52_reg_1100 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state55) and (grp_polyvecl_pointwise_a_fu_1459_ap_done = ap_const_logic_1))) then 
                i_0_i52_reg_1100 <= i_73_reg_3800;
            end if; 
        end if;
    end process;

    i_0_i54_reg_1112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln225_fu_2555_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
                i_0_i54_reg_1112 <= i_74_reg_3808;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state60) and (grp_polyveck_caddq_fu_1499_ap_done = ap_const_logic_1))) then 
                i_0_i54_reg_1112 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_i5_i_reg_936_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                i_0_i5_i_reg_936 <= i_44_reg_3589;
            elsif (((icmp_ln416_fu_1958_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                i_0_i5_i_reg_936 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_0_i78_reg_1156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln180_fu_2872_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then 
                i_0_i78_reg_1156 <= i_77_reg_3880;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_ntt_1_fu_1440_ap_done = ap_const_logic_1))) then 
                i_0_i78_reg_1156 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_i84_reg_1178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln114_fu_2848_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state83))) then 
                i_0_i84_reg_1178 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state87) and (grp_invntt_tomont_fu_1423_ap_done = ap_const_logic_1))) then 
                i_0_i84_reg_1178 <= i_78_reg_3916;
            end if; 
        end if;
    end process;

    i_0_i85_reg_1234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_3032_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state91))) then 
                i_0_i85_reg_1234 <= ap_const_lv3_0;
            elsif (((icmp_ln298_fu_3126_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state95))) then 
                i_0_i85_reg_1234 <= i_83_reg_3982;
            end if; 
        end if;
    end process;

    i_0_i86_reg_1190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln107_fu_2958_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state86))) then 
                i_0_i86_reg_1190 <= ap_const_lv3_0;
            elsif (((icmp_ln87_fu_2994_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state89))) then 
                i_0_i86_reg_1190 <= i_80_reg_3924;
            end if; 
        end if;
    end process;

    i_0_i87_reg_1300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln248_fu_3344_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state118))) then 
                i_0_i87_reg_1300 <= i_90_reg_4081;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state116) and (grp_polyveck_caddq_fu_1499_ap_done = ap_const_logic_1))) then 
                i_0_i87_reg_1300 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_i94_reg_1212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln85_fu_2970_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state88))) then 
                i_0_i94_reg_1212 <= ap_const_lv3_0;
            elsif (((icmp_ln32_fu_3056_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state92))) then 
                i_0_i94_reg_1212 <= i_81_reg_3955;
            end if; 
        end if;
    end process;

    i_0_i_i102_reg_1267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
                i_0_i_i102_reg_1267 <= i_87_reg_4024;
            elsif (((icmp_ln252_fu_3192_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state100))) then 
                i_0_i_i102_reg_1267 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_0_i_i110_reg_1289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state115)) then 
                i_0_i_i110_reg_1289 <= i_89_reg_4063;
            elsif (((icmp_ln234_fu_3250_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state113))) then 
                i_0_i_i110_reg_1289 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_0_i_i55_reg_1123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
                i_0_i_i55_reg_1123 <= i_76_reg_3821;
            elsif (((icmp_ln371_fu_2531_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
                i_0_i_i55_reg_1123 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_0_i_i58_reg_1134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln362_2_fu_2684_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state65))) then 
                i_0_i_i58_reg_1134 <= i_75_fu_2690_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state64) and (grp_polyveck_pack_w1_fu_1477_ap_done = ap_const_logic_1))) then 
                i_0_i_i58_reg_1134 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_i_i79_reg_1167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
                i_0_i_i79_reg_1167 <= i_79_reg_3893;
            elsif (((icmp_ln114_fu_2848_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state83))) then 
                i_0_i_i79_reg_1167 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_0_i_i86_reg_1245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln303_fu_3186_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state96))) then 
                i_0_i_i86_reg_1245 <= i_86_reg_3995;
            elsif (((icmp_ln158_fu_3102_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state94))) then 
                i_0_i_i86_reg_1245 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_0_i_i87_reg_1201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
                i_0_i_i87_reg_1201 <= i_82_reg_3937;
            elsif (((icmp_ln85_fu_2970_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state88))) then 
                i_0_i_i87_reg_1201 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_0_i_i88_reg_1323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state119)) then 
                i_0_i_i88_reg_1323 <= i_91_reg_4097;
            elsif (((icmp_ln158_reg_3978 = ap_const_lv1_1) and (icmp_ln392_fu_3308_p2 = ap_const_lv1_0) and (tmp_5_reg_4043 = ap_const_lv1_0) and (tmp_s_reg_4039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state117))) then 
                i_0_i_i88_reg_1323 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_0_i_i95_reg_1223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
                i_0_i_i95_reg_1223 <= i_84_reg_3968;
            elsif (((icmp_ln53_fu_3032_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state91))) then 
                i_0_i_i95_reg_1223 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_0_i_i_i_reg_914_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln540_fu_1756_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                i_0_i_i_i_reg_914 <= ap_const_lv5_0;
            elsif (((icmp_ln362_1_fu_1937_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                i_0_i_i_i_reg_914 <= i_43_fu_1943_p2;
            end if; 
        end if;
    end process;

    i_0_i_i_reg_891_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln362_fu_1696_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_0_i_i_reg_891 <= i_42_fu_1702_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_unpack_sk_fu_1406_ap_done = ap_const_logic_1))) then 
                i_0_i_i_reg_891 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_972_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln540_1_fu_2074_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                i_0_i_reg_972 <= ap_const_lv3_0;
            elsif (((icmp_ln21_fu_2338_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                i_0_i_reg_972 <= i_46_reg_3666;
            end if; 
        end if;
    end process;

    i_0_reg_880_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_880 <= i_reg_3492;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_880 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    i_3_i1_reg_925_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln362_1_fu_1937_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                i_3_i1_reg_925 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                i_3_i1_reg_925 <= add_ln416_reg_3564;
            end if; 
        end if;
    end process;

    i_3_i3_reg_960_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                i_3_i3_reg_960 <= add_ln540_1_reg_3613;
            elsif (((grp_KeccakF1600_StatePer_fu_1399_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                i_3_i3_reg_960 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_3_i47_reg_1145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
                i_3_i47_reg_1145 <= add_ln540_2_reg_3852;
            elsif (((grp_KeccakF1600_StatePer_1_fu_1392_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state74))) then 
                i_3_i47_reg_1145 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_3_i_reg_902_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                i_3_i_reg_902 <= add_ln540_reg_3528;
            elsif (((grp_KeccakF1600_StatePer_1_fu_1392_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                i_3_i_reg_902 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_i_reg_984_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_2326_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                j_0_i_reg_984 <= ap_const_lv3_0;
            elsif (((grp_poly_uniform_fu_1346_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                j_0_i_reg_984 <= j_reg_3674;
            end if; 
        end if;
    end process;

    n_reg_1311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln248_fu_3344_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state118))) then 
                n_reg_1311 <= s_fu_3375_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state116) and (grp_polyveck_caddq_fu_1499_ap_done = ap_const_logic_1))) then 
                n_reg_1311 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    nonce_0_i_reg_1032_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln282_1_fu_2389_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                nonce_0_i_reg_1032 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state117) and ((icmp_ln158_reg_3978 = ap_const_lv1_0) or ((tmp_s_reg_4039 = ap_const_lv1_1) or ((tmp_5_reg_4043 = ap_const_lv1_1) or ((icmp_ln392_fu_3308_p2 = ap_const_lv1_1) and (icmp_ln173_fu_3332_p2 = ap_const_lv1_1))))))) then 
                nonce_0_i_reg_1032 <= nonce_reg_3708;
            end if; 
        end if;
    end process;

    phi_ln125_1_reg_1055_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln125_reg_3728 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                phi_ln125_1_reg_1055 <= ap_const_lv8_0;
            elsif (((icmp_ln125_1_reg_3747 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                phi_ln125_1_reg_1055 <= add_ln125_1_reg_3732;
            end if; 
        end if;
    end process;

    phi_ln125_2_reg_1066_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln125_1_reg_3747 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                phi_ln125_2_reg_1066 <= ap_const_lv8_0;
            elsif (((icmp_ln125_2_reg_3766 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                phi_ln125_2_reg_1066 <= add_ln125_2_reg_3751;
            end if; 
        end if;
    end process;

    phi_ln125_3_reg_1077_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln125_2_reg_3766 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                phi_ln125_3_reg_1077 <= ap_const_lv8_0;
            elsif (((icmp_ln125_3_reg_3785 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                phi_ln125_3_reg_1077 <= add_ln125_3_reg_3770;
            end if; 
        end if;
    end process;

    phi_ln125_reg_1044_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln125_reg_3728 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                phi_ln125_reg_1044 <= add_ln125_reg_3713;
            elsif (((grp_polyvecl_uniform_gam_fu_1359_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                phi_ln125_reg_1044 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    r_0_i6_i_reg_948_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                r_0_i6_i_reg_948 <= r_fu_2042_p2;
            elsif (((icmp_ln416_fu_1958_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                r_0_i6_i_reg_948 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_0_i_i_reg_1334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state119)) then 
                s_0_i_i_reg_1334 <= s_1_fu_3438_p2;
            elsif (((icmp_ln158_reg_3978 = ap_const_lv1_1) and (icmp_ln392_fu_3308_p2 = ap_const_lv1_0) and (tmp_5_reg_4043 = ap_const_lv1_0) and (tmp_s_reg_4039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state117))) then 
                s_0_i_i_reg_1334 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                add_ln125_1_reg_3732 <= add_ln125_1_fu_2429_p2;
                icmp_ln125_1_reg_3747 <= icmp_ln125_1_fu_2444_p2;
                    tmp_12_reg_3737(7 downto 0) <= tmp_12_fu_2435_p3(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                add_ln125_2_reg_3751 <= add_ln125_2_fu_2455_p2;
                icmp_ln125_2_reg_3766 <= icmp_ln125_2_fu_2470_p2;
                    tmp_13_reg_3756(7 downto 0) <= tmp_13_fu_2461_p3(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                add_ln125_3_reg_3770 <= add_ln125_3_fu_2481_p2;
                icmp_ln125_3_reg_3785 <= icmp_ln125_3_fu_2496_p2;
                    tmp_14_reg_3775(7 downto 0) <= tmp_14_fu_2487_p3(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                add_ln125_reg_3713 <= add_ln125_fu_2407_p2;
                icmp_ln125_reg_3728 <= icmp_ln125_fu_2418_p2;
                    zext_ln125_reg_3718(7 downto 0) <= zext_ln125_fu_2413_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                add_ln208_1_reg_3484 <= add_ln208_1_fu_1652_p2;
                add_ln208_reg_3479 <= add_ln208_fu_1642_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                add_ln416_reg_3564 <= add_ln416_fu_1964_p2;
                    zext_ln416_reg_3556(3 downto 0) <= zext_ln416_fu_1954_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                add_ln540_1_reg_3613 <= add_ln540_1_fu_2080_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then
                add_ln540_2_reg_3852 <= add_ln540_2_fu_2750_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                add_ln540_reg_3528 <= add_ln540_fu_1762_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_2338_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    add_ln_reg_3679(2 downto 0) <= add_ln_fu_2354_p4(2 downto 0);    add_ln_reg_3679(9 downto 8) <= add_ln_fu_2354_p4(9 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                i_44_reg_3589 <= i_44_fu_1988_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                i_46_reg_3666 <= i_46_fu_2332_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                i_69_reg_3687 <= i_69_fu_2371_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                i_70_reg_3695 <= i_70_fu_2383_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                i_71_reg_3703 <= i_71_fu_2395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                i_72_reg_3792 <= i_72_fu_2513_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                i_73_reg_3800 <= i_73_fu_2525_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                i_74_reg_3808 <= i_74_fu_2537_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then
                i_76_reg_3821 <= i_76_fu_2561_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state83)) then
                i_77_reg_3880 <= i_77_fu_2854_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state86)) then
                i_78_reg_3916 <= i_78_fu_2964_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then
                i_79_reg_3893 <= i_79_fu_2878_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state88)) then
                i_80_reg_3924 <= i_80_fu_2976_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state91)) then
                i_81_reg_3955 <= i_81_fu_3038_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state89)) then
                i_82_reg_3937 <= i_82_fu_3000_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state94)) then
                i_83_reg_3982 <= i_83_fu_3108_p2;
                icmp_ln158_reg_3978 <= icmp_ln158_fu_3102_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state92)) then
                i_84_reg_3968 <= i_84_fu_3062_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state100)) then
                i_85_reg_4011 <= i_85_fu_3198_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state95)) then
                i_86_reg_3995 <= i_86_fu_3132_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state101)) then
                i_87_reg_4024 <= i_87_fu_3222_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state113)) then
                i_88_reg_4050 <= i_88_fu_3256_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state114)) then
                i_89_reg_4063 <= i_89_fu_3280_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln158_reg_3978 = ap_const_lv1_1) and (tmp_5_reg_4043 = ap_const_lv1_0) and (tmp_s_reg_4039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state117))) then
                i_90_reg_4081 <= i_90_fu_3314_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state118)) then
                i_91_reg_4097 <= i_91_fu_3350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_3492 <= i_fu_1671_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                j_reg_3674 <= j_fu_2344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                nonce_reg_3708 <= nonce_fu_2401_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state68) and (grp_keccak_absorb_3_fu_1369_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_keccak_absorb_3_fu_1369_ap_done = ap_const_logic_1)))) then
                reg_1598 <= grp_keccak_absorb_3_fu_1369_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state16))) then
                reg_1602 <= state_s_q0(23 downto 16);
                reg_1608 <= state_s_q0(31 downto 24);
                reg_1614 <= state_s_q0(39 downto 32);
                reg_1620 <= state_s_q0(47 downto 40);
                reg_1626 <= state_s_q0(55 downto 48);
                reg_1632 <= state_s_q0(63 downto 56);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                    shl_ln25_reg_3538(5 downto 3) <= shl_ln25_fu_1773_p3(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                    shl_ln541_1_reg_3623(5 downto 3) <= shl_ln541_1_fu_2091_p3(5 downto 3);
                trunc_ln543_1_reg_3633 <= state_0_s_q1(23 downto 16);
                trunc_ln544_1_reg_3638 <= state_0_s_q1(31 downto 24);
                trunc_ln545_1_reg_3643 <= state_0_s_q1(39 downto 32);
                trunc_ln546_1_reg_3648 <= state_0_s_q1(47 downto 40);
                trunc_ln547_1_reg_3653 <= state_0_s_q1(55 downto 48);
                trunc_ln548_1_reg_3658 <= state_0_s_q1(63 downto 56);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then
                    shl_ln541_2_reg_3867(4 downto 3) <= shl_ln541_2_fu_2765_p3(4 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_1982_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    state_0_s_addr_4_reg_3599(3 downto 0) <= zext_ln416_reg_3556(5 - 1 downto 0)(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state68) and (grp_keccak_absorb_3_fu_1369_ap_done = ap_const_logic_1))) then
                state_s_addr_13_reg_3844 <= zext_ln450_5_fu_2705_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_keccak_absorb_3_fu_1369_ap_done = ap_const_logic_1))) then
                state_s_addr_reg_3515 <= zext_ln450_3_fu_1717_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln207_fu_1666_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                sub_ln208_1_reg_3502 <= sub_ln208_1_fu_1687_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_polyveck_chknorm_fu_1491_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state112))) then
                tmp_5_reg_4043 <= grp_polyveck_chknorm_fu_1491_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_polyveck_chknorm_fu_1491_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state105))) then
                tmp_s_reg_4039 <= grp_polyveck_chknorm_fu_1491_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln540_2_fu_2744_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                trunc_ln541_3_reg_3862 <= trunc_ln541_3_fu_2756_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln108_fu_3216_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state101))) then
                w0_vec_coeffs_addr_1_reg_4029 <= zext_ln109_1_fu_3237_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_1_fu_3274_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state114))) then
                w0_vec_coeffs_addr_2_reg_4068 <= zext_ln88_6_fu_3295_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln225_fu_2555_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                w1_vec_coeffs_addr_reg_3831 <= zext_ln226_1_fu_2576_p1(10 - 1 downto 0);
                    zext_ln226_1_reg_3826(11 downto 0) <= zext_ln226_1_fu_2576_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_fu_2994_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state89))) then
                z_vec_coeffs_addr_5_reg_3947 <= zext_ln88_4_fu_3015_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_3056_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state92))) then
                z_vec_coeffs_addr_6_reg_3973 <= zext_ln33_2_fu_3077_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln252_fu_3192_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state100))) then
                    zext_ln104_reg_4016(10 downto 8) <= zext_ln104_fu_3212_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln114_fu_2848_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state83))) then
                    zext_ln176_reg_3885(10 downto 8) <= zext_ln176_fu_2868_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln180_fu_2872_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state84))) then
                    zext_ln181_17_reg_3898(11 downto 0) <= zext_ln181_17_fu_2898_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln371_fu_2531_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                    zext_ln221_reg_3813(10 downto 8) <= zext_ln221_fu_2551_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln158_reg_3978 = ap_const_lv1_1) and (icmp_ln392_fu_3308_p2 = ap_const_lv1_0) and (tmp_5_reg_4043 = ap_const_lv1_0) and (tmp_s_reg_4039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state117))) then
                    zext_ln244_reg_4086(10 downto 8) <= zext_ln244_fu_3328_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln248_fu_3344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state118))) then
                    zext_ln249_1_reg_4102(11 downto 0) <= zext_ln249_1_fu_3365_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln416_fu_1958_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    zext_ln26_reg_3569(6 downto 3) <= zext_ln26_fu_1978_p1(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln158_fu_3102_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state94))) then
                    zext_ln287_reg_3987(10 downto 8) <= zext_ln287_fu_3122_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_3032_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state91))) then
                    zext_ln28_reg_3960(10 downto 8) <= zext_ln28_fu_3052_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln234_fu_3250_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state113))) then
                    zext_ln83_1_reg_4055(10 downto 8) <= zext_ln83_1_fu_3270_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln85_fu_2970_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state88))) then
                    zext_ln83_reg_3929(10 downto 8) <= zext_ln83_fu_2990_p1(10 downto 8);
            end if;
        end if;
    end process;
    shl_ln25_reg_3538(2 downto 0) <= "000";
    zext_ln416_reg_3556(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln26_reg_3569(2 downto 0) <= "000";
    zext_ln26_reg_3569(7) <= '0';
    state_0_s_addr_4_reg_3599(4) <= '0';
    shl_ln541_1_reg_3623(2 downto 0) <= "000";
    add_ln_reg_3679(7 downto 3) <= "00000";
    zext_ln125_reg_3718(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    tmp_12_reg_3737(63 downto 8) <= "00000000000000000000000000000000000000000000000000000001";
    tmp_13_reg_3756(63 downto 8) <= "00000000000000000000000000000000000000000000000000000010";
    tmp_14_reg_3775(63 downto 8) <= "00000000000000000000000000000000000000000000000000000011";
    zext_ln221_reg_3813(7 downto 0) <= "00000000";
    zext_ln221_reg_3813(11) <= '0';
    zext_ln226_1_reg_3826(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    shl_ln541_2_reg_3867(2 downto 0) <= "000";
    zext_ln176_reg_3885(7 downto 0) <= "00000000";
    zext_ln176_reg_3885(11) <= '0';
    zext_ln181_17_reg_3898(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln83_reg_3929(7 downto 0) <= "00000000";
    zext_ln83_reg_3929(11) <= '0';
    zext_ln28_reg_3960(7 downto 0) <= "00000000";
    zext_ln28_reg_3960(11) <= '0';
    zext_ln287_reg_3987(7 downto 0) <= "00000000";
    zext_ln287_reg_3987(11) <= '0';
    zext_ln104_reg_4016(7 downto 0) <= "00000000";
    zext_ln104_reg_4016(11) <= '0';
    zext_ln83_1_reg_4055(7 downto 0) <= "00000000";
    zext_ln83_1_reg_4055(11) <= '0';
    zext_ln244_reg_4086(7 downto 0) <= "00000000";
    zext_ln244_reg_4086(11) <= '0';
    zext_ln249_1_reg_4102(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state8, grp_keccak_absorb_3_fu_1369_ap_done, ap_CS_fsm_state68, ap_CS_fsm_state2, icmp_ln207_fu_1666_p2, ap_CS_fsm_state5, ap_CS_fsm_state15, icmp_ln540_fu_1756_p2, ap_CS_fsm_state20, ap_CS_fsm_state21, icmp_ln416_fu_1958_p2, ap_CS_fsm_state22, icmp_ln30_fu_1982_p2, ap_CS_fsm_state28, icmp_ln540_1_fu_2074_p2, ap_CS_fsm_state33, ap_CS_fsm_state34, icmp_ln21_fu_2338_p2, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, icmp_ln125_reg_3728, icmp_ln125_1_reg_3747, icmp_ln125_2_reg_3766, icmp_ln125_3_reg_3785, ap_CS_fsm_state52, ap_CS_fsm_state54, ap_CS_fsm_state61, icmp_ln371_fu_2531_p2, ap_CS_fsm_state62, icmp_ln225_fu_2555_p2, ap_CS_fsm_state65, ap_CS_fsm_state75, icmp_ln540_2_fu_2744_p2, ap_CS_fsm_state83, icmp_ln114_fu_2848_p2, ap_CS_fsm_state84, icmp_ln180_fu_2872_p2, ap_CS_fsm_state86, ap_CS_fsm_state88, icmp_ln85_fu_2970_p2, ap_CS_fsm_state89, icmp_ln87_fu_2994_p2, ap_CS_fsm_state91, icmp_ln53_fu_3032_p2, ap_CS_fsm_state92, icmp_ln32_fu_3056_p2, icmp_ln158_fu_3102_p2, icmp_ln158_reg_3978, ap_CS_fsm_state94, ap_CS_fsm_state95, icmp_ln298_fu_3126_p2, ap_CS_fsm_state100, icmp_ln252_fu_3192_p2, ap_CS_fsm_state101, icmp_ln108_fu_3216_p2, grp_polyveck_chknorm_fu_1491_ap_return, tmp_s_reg_4039, ap_CS_fsm_state105, grp_polyveck_chknorm_fu_1491_ap_done, tmp_5_reg_4043, ap_CS_fsm_state112, ap_CS_fsm_state113, icmp_ln234_fu_3250_p2, ap_CS_fsm_state114, icmp_ln87_1_fu_3274_p2, ap_CS_fsm_state117, icmp_ln392_fu_3308_p2, ap_CS_fsm_state118, icmp_ln248_fu_3344_p2, grp_poly_uniform_fu_1346_ap_done, grp_polyvecl_uniform_gam_fu_1359_ap_done, grp_poly_challenge_fu_1383_ap_done, grp_KeccakF1600_StatePer_1_fu_1392_ap_done, grp_KeccakF1600_StatePer_fu_1399_ap_done, grp_unpack_sk_fu_1406_ap_done, grp_polyveck_invntt_tomo_fu_1416_ap_done, grp_invntt_tomont_fu_1423_ap_done, grp_pack_sig_fu_1432_ap_done, grp_ntt_1_fu_1440_ap_done, grp_ntt_fu_1447_ap_done, grp_polyvecl_pointwise_a_fu_1459_ap_done, grp_keccak_absorb_4203_fu_1468_ap_done, grp_polyveck_pack_w1_fu_1477_ap_done, grp_polyveck_pointwise_p_fu_1484_ap_done, grp_polyveck_caddq_fu_1499_ap_done, grp_polyveck_reduce_fu_1504_ap_done, ap_CS_fsm_state4, icmp_ln362_fu_1696_p2, ap_CS_fsm_state14, icmp_ln362_1_fu_1937_p2, ap_CS_fsm_state27, ap_CS_fsm_state35, icmp_ln20_fu_2326_p2, ap_CS_fsm_state37, ap_CS_fsm_state39, icmp_ln100_fu_2365_p2, ap_CS_fsm_state41, icmp_ln282_fu_2377_p2, icmp_ln173_fu_3332_p2, icmp_ln282_1_fu_2389_p2, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state55, icmp_ln100_1_fu_2507_p2, ap_CS_fsm_state60, ap_CS_fsm_state64, icmp_ln362_2_fu_2684_p2, ap_CS_fsm_state74, ap_CS_fsm_state82, ap_CS_fsm_state87, icmp_ln107_fu_2958_p2, ap_CS_fsm_state96, icmp_ln303_fu_3186_p2, ap_CS_fsm_state99, ap_CS_fsm_state116, ap_CS_fsm_state80, ap_CS_fsm_state58, ap_CS_fsm_state108, ap_CS_fsm_state120, icmp_ln28_fu_2519_p2, ap_CS_fsm_state6, ap_CS_fsm_state66, ap_CS_fsm_state97, ap_CS_fsm_state106, ap_CS_fsm_state56, ap_CS_fsm_state103, ap_CS_fsm_state110)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln207_fu_1666_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_unpack_sk_fu_1406_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln362_fu_1696_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_keccak_absorb_4203_fu_1468_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_keccak_absorb_3_fu_1369_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_KeccakF1600_StatePer_1_fu_1392_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln540_fu_1756_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state20 => 
                if (((icmp_ln362_1_fu_1937_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((icmp_ln416_fu_1958_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state22 => 
                if (((icmp_ln30_fu_1982_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((grp_KeccakF1600_StatePer_fu_1399_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if (((icmp_ln540_1_fu_2074_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state33 => 
                if (((icmp_ln20_fu_2326_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state34 => 
                if (((icmp_ln21_fu_2338_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state35 => 
                if (((grp_poly_uniform_fu_1346_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                if (((icmp_ln100_fu_2365_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state37 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state37) and (grp_ntt_fu_1447_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                if (((icmp_ln282_fu_2377_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state39 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state39) and (grp_ntt_fu_1447_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                if (((icmp_ln282_1_fu_2389_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state41 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state41) and (grp_ntt_fu_1447_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (((grp_polyvecl_uniform_gam_fu_1359_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                if (((icmp_ln125_reg_3728 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((icmp_ln125_1_reg_3747 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                if (((icmp_ln125_2_reg_3766 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                if (((icmp_ln125_3_reg_3785 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state52 => 
                if (((icmp_ln100_1_fu_2507_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state53 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state53) and (grp_ntt_fu_1447_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                if (((icmp_ln28_fu_2519_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state55 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state55) and (grp_polyvecl_pointwise_a_fu_1459_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state56 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state56) and (grp_polyveck_reduce_fu_1504_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state58) and (grp_polyveck_invntt_tomo_fu_1416_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state60) and (grp_polyveck_caddq_fu_1499_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state61 => 
                if (((icmp_ln371_fu_2531_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state62 => 
                if (((icmp_ln225_fu_2555_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state64 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state64) and (grp_polyveck_pack_w1_fu_1477_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state65 => 
                if (((icmp_ln362_2_fu_2684_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state66 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state66) and (grp_keccak_absorb_4203_fu_1468_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state68) and (grp_keccak_absorb_3_fu_1369_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_state68;
                end if;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                if (((grp_KeccakF1600_StatePer_1_fu_1392_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state74))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_state74;
                end if;
            when ap_ST_fsm_state75 => 
                if (((icmp_ln540_2_fu_2744_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state80 => 
                if (((grp_poly_challenge_fu_1383_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_ntt_1_fu_1440_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state83 => 
                if (((icmp_ln114_fu_2848_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state83))) then
                    ap_NS_fsm <= ap_ST_fsm_state86;
                else
                    ap_NS_fsm <= ap_ST_fsm_state84;
                end if;
            when ap_ST_fsm_state84 => 
                if (((icmp_ln180_fu_2872_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state85;
                end if;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state86 => 
                if (((icmp_ln107_fu_2958_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state86))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when ap_ST_fsm_state87 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state87) and (grp_invntt_tomont_fu_1423_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state86;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when ap_ST_fsm_state88 => 
                if (((icmp_ln85_fu_2970_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state88))) then
                    ap_NS_fsm <= ap_ST_fsm_state91;
                else
                    ap_NS_fsm <= ap_ST_fsm_state89;
                end if;
            when ap_ST_fsm_state89 => 
                if (((icmp_ln87_fu_2994_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state89))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_state90;
                end if;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state91 => 
                if (((icmp_ln53_fu_3032_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state91))) then
                    ap_NS_fsm <= ap_ST_fsm_state94;
                else
                    ap_NS_fsm <= ap_ST_fsm_state92;
                end if;
            when ap_ST_fsm_state92 => 
                if (((icmp_ln32_fu_3056_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state92))) then
                    ap_NS_fsm <= ap_ST_fsm_state91;
                else
                    ap_NS_fsm <= ap_ST_fsm_state93;
                end if;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state94 => 
                if (((icmp_ln158_fu_3102_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state94))) then
                    ap_NS_fsm <= ap_ST_fsm_state95;
                else
                    ap_NS_fsm <= ap_ST_fsm_state97;
                end if;
            when ap_ST_fsm_state95 => 
                if (((icmp_ln298_fu_3126_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state95))) then
                    ap_NS_fsm <= ap_ST_fsm_state94;
                else
                    ap_NS_fsm <= ap_ST_fsm_state96;
                end if;
            when ap_ST_fsm_state96 => 
                if (((icmp_ln303_fu_3186_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state96))) then
                    ap_NS_fsm <= ap_ST_fsm_state117;
                else
                    ap_NS_fsm <= ap_ST_fsm_state95;
                end if;
            when ap_ST_fsm_state97 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state97) and (grp_polyveck_pointwise_p_fu_1484_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state98;
                else
                    ap_NS_fsm <= ap_ST_fsm_state97;
                end if;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state99) and (grp_polyveck_invntt_tomo_fu_1416_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state100;
                else
                    ap_NS_fsm <= ap_ST_fsm_state99;
                end if;
            when ap_ST_fsm_state100 => 
                if (((icmp_ln252_fu_3192_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state100))) then
                    ap_NS_fsm <= ap_ST_fsm_state101;
                else
                    ap_NS_fsm <= ap_ST_fsm_state103;
                end if;
            when ap_ST_fsm_state101 => 
                if (((icmp_ln108_fu_3216_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state101))) then
                    ap_NS_fsm <= ap_ST_fsm_state100;
                else
                    ap_NS_fsm <= ap_ST_fsm_state102;
                end if;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state103 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state103) and (grp_polyveck_reduce_fu_1504_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state104;
                else
                    ap_NS_fsm <= ap_ST_fsm_state103;
                end if;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                if (((grp_polyveck_chknorm_fu_1491_ap_done = ap_const_logic_1) and (grp_polyveck_chknorm_fu_1491_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state105))) then
                    ap_NS_fsm <= ap_ST_fsm_state117;
                elsif (((grp_polyveck_chknorm_fu_1491_ap_done = ap_const_logic_1) and (grp_polyveck_chknorm_fu_1491_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state105))) then
                    ap_NS_fsm <= ap_ST_fsm_state106;
                else
                    ap_NS_fsm <= ap_ST_fsm_state105;
                end if;
            when ap_ST_fsm_state106 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state106) and (grp_polyveck_pointwise_p_fu_1484_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state107;
                else
                    ap_NS_fsm <= ap_ST_fsm_state106;
                end if;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state108) and (grp_polyveck_invntt_tomo_fu_1416_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state109;
                else
                    ap_NS_fsm <= ap_ST_fsm_state108;
                end if;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state110) and (grp_polyveck_reduce_fu_1504_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state111;
                else
                    ap_NS_fsm <= ap_ST_fsm_state110;
                end if;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                if (((grp_polyveck_chknorm_fu_1491_ap_done = ap_const_logic_1) and (grp_polyveck_chknorm_fu_1491_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state112))) then
                    ap_NS_fsm <= ap_ST_fsm_state113;
                elsif (((grp_polyveck_chknorm_fu_1491_ap_done = ap_const_logic_1) and (grp_polyveck_chknorm_fu_1491_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state112))) then
                    ap_NS_fsm <= ap_ST_fsm_state117;
                else
                    ap_NS_fsm <= ap_ST_fsm_state112;
                end if;
            when ap_ST_fsm_state113 => 
                if (((icmp_ln234_fu_3250_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state113))) then
                    ap_NS_fsm <= ap_ST_fsm_state114;
                else
                    ap_NS_fsm <= ap_ST_fsm_state116;
                end if;
            when ap_ST_fsm_state114 => 
                if (((icmp_ln87_1_fu_3274_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state114))) then
                    ap_NS_fsm <= ap_ST_fsm_state113;
                else
                    ap_NS_fsm <= ap_ST_fsm_state115;
                end if;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state116 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state116) and (grp_polyveck_caddq_fu_1499_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state117;
                else
                    ap_NS_fsm <= ap_ST_fsm_state116;
                end if;
            when ap_ST_fsm_state117 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state117) and ((icmp_ln158_reg_3978 = ap_const_lv1_0) or ((tmp_s_reg_4039 = ap_const_lv1_1) or ((tmp_5_reg_4043 = ap_const_lv1_1) or ((icmp_ln392_fu_3308_p2 = ap_const_lv1_1) and (icmp_ln173_fu_3332_p2 = ap_const_lv1_1))))))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                elsif (((icmp_ln392_fu_3308_p2 = ap_const_lv1_1) and (icmp_ln158_reg_3978 = ap_const_lv1_1) and (tmp_5_reg_4043 = ap_const_lv1_0) and (tmp_s_reg_4039 = ap_const_lv1_0) and (icmp_ln173_fu_3332_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state117))) then
                    ap_NS_fsm <= ap_ST_fsm_state120;
                else
                    ap_NS_fsm <= ap_ST_fsm_state118;
                end if;
            when ap_ST_fsm_state118 => 
                if (((icmp_ln248_fu_3344_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state118))) then
                    ap_NS_fsm <= ap_ST_fsm_state117;
                else
                    ap_NS_fsm <= ap_ST_fsm_state119;
                end if;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state120 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state120) and (grp_pack_sig_fu_1432_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state120;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a1_1_fu_2642_p2 <= (trunc_ln12_fu_2601_p4 and select_ln48_fu_2634_p3);
    add_ln109_fu_3232_p2 <= std_logic_vector(unsigned(zext_ln104_reg_4016) + unsigned(zext_ln109_fu_3228_p1));
    add_ln125_1_fu_2429_p2 <= std_logic_vector(unsigned(phi_ln125_1_reg_1055) + unsigned(ap_const_lv8_1));
    add_ln125_2_fu_2455_p2 <= std_logic_vector(unsigned(phi_ln125_2_reg_1066) + unsigned(ap_const_lv8_1));
    add_ln125_3_fu_2481_p2 <= std_logic_vector(unsigned(phi_ln125_3_reg_1077) + unsigned(ap_const_lv8_1));
    add_ln125_fu_2407_p2 <= std_logic_vector(unsigned(phi_ln125_reg_1044) + unsigned(ap_const_lv8_1));
    add_ln181_fu_2893_p2 <= std_logic_vector(unsigned(zext_ln181_16_fu_2889_p1) + unsigned(zext_ln176_reg_3885));
    add_ln19_fu_2941_p2 <= std_logic_vector(signed(sext_ln19_14_fu_2937_p1) + signed(mul_ln181_fu_2911_p2));
    add_ln208_1_fu_1652_p2 <= std_logic_vector(unsigned(ap_const_lv14_973) + unsigned(trunc_ln208_1_fu_1648_p1));
    add_ln208_fu_1642_p2 <= std_logic_vector(signed(ap_const_lv13_1FFF) + signed(trunc_ln208_fu_1638_p1));
    add_ln226_fu_2571_p2 <= std_logic_vector(unsigned(zext_ln221_reg_3813) + unsigned(zext_ln226_fu_2567_p1));
    add_ln249_fu_3360_p2 <= std_logic_vector(unsigned(zext_ln244_reg_4086) + unsigned(zext_ln249_fu_3356_p1));
    add_ln300_fu_3142_p2 <= std_logic_vector(unsigned(zext_ln287_reg_3987) + unsigned(zext_ln300_fu_3138_p1));
    add_ln31_fu_2006_p2 <= std_logic_vector(unsigned(zext_ln26_reg_3569) + unsigned(zext_ln31_fu_2002_p1));
    add_ln33_fu_3072_p2 <= std_logic_vector(unsigned(zext_ln28_reg_3960) + unsigned(zext_ln33_fu_3068_p1));
    add_ln36_fu_3082_p2 <= std_logic_vector(unsigned(z_vec_coeffs_q0) + unsigned(ap_const_lv32_400000));
    add_ln416_fu_1964_p2 <= std_logic_vector(unsigned(i_3_i1_reg_925) + unsigned(ap_const_lv4_1));
    add_ln42_fu_2581_p2 <= std_logic_vector(unsigned(ap_const_lv32_7F) + unsigned(w1_vec_coeffs_q0));
    add_ln540_1_fu_2080_p2 <= std_logic_vector(unsigned(i_3_i3_reg_960) + unsigned(ap_const_lv3_1));
    add_ln540_2_fu_2750_p2 <= std_logic_vector(unsigned(i_3_i47_reg_1145) + unsigned(ap_const_lv3_1));
    add_ln540_fu_1762_p2 <= std_logic_vector(unsigned(i_3_i_reg_902) + unsigned(ap_const_lv3_1));
    add_ln541_1_fu_2103_p2 <= std_logic_vector(signed(ap_const_lv8_A0) + signed(zext_ln541_2_fu_2099_p1));
    add_ln541_fu_1785_p2 <= std_logic_vector(unsigned(ap_const_lv8_70) + unsigned(zext_ln541_fu_1781_p1));
    add_ln542_1_fu_2135_p2 <= std_logic_vector(signed(ap_const_lv8_A0) + signed(zext_ln542_2_fu_2131_p1));
    add_ln542_fu_1806_p2 <= std_logic_vector(unsigned(ap_const_lv8_70) + unsigned(zext_ln542_fu_1802_p1));
    add_ln543_1_fu_2215_p2 <= std_logic_vector(signed(ap_const_lv8_A0) + signed(zext_ln543_2_fu_2211_p1));
    add_ln543_fu_1826_p2 <= std_logic_vector(unsigned(ap_const_lv8_70) + unsigned(zext_ln543_fu_1822_p1));
    add_ln544_1_fu_2235_p2 <= std_logic_vector(signed(ap_const_lv8_A0) + signed(zext_ln544_2_fu_2231_p1));
    add_ln544_fu_1846_p2 <= std_logic_vector(unsigned(ap_const_lv8_70) + unsigned(zext_ln544_fu_1842_p1));
    add_ln545_1_fu_2255_p2 <= std_logic_vector(signed(ap_const_lv8_A0) + signed(zext_ln545_2_fu_2251_p1));
    add_ln545_fu_1866_p2 <= std_logic_vector(unsigned(ap_const_lv8_70) + unsigned(zext_ln545_fu_1862_p1));
    add_ln546_1_fu_2275_p2 <= std_logic_vector(signed(ap_const_lv8_A0) + signed(zext_ln546_2_fu_2271_p1));
    add_ln546_fu_1886_p2 <= std_logic_vector(unsigned(ap_const_lv8_70) + unsigned(zext_ln546_fu_1882_p1));
    add_ln547_1_fu_2295_p2 <= std_logic_vector(signed(ap_const_lv8_A0) + signed(zext_ln547_2_fu_2291_p1));
    add_ln547_fu_1906_p2 <= std_logic_vector(unsigned(ap_const_lv8_70) + unsigned(zext_ln547_fu_1902_p1));
    add_ln548_1_fu_2315_p2 <= std_logic_vector(signed(ap_const_lv8_A0) + signed(zext_ln548_2_fu_2311_p1));
    add_ln548_fu_1926_p2 <= std_logic_vector(unsigned(ap_const_lv8_70) + unsigned(zext_ln548_fu_1922_p1));
    add_ln88_2_fu_3301_p2 <= std_logic_vector(unsigned(w0_vec_coeffs_q0) + unsigned(h_vec_coeffs_q0));
    add_ln88_3_fu_3010_p2 <= std_logic_vector(unsigned(zext_ln83_reg_3929) + unsigned(zext_ln88_fu_3006_p1));
    add_ln88_4_fu_3290_p2 <= std_logic_vector(unsigned(zext_ln83_1_reg_4055) + unsigned(zext_ln88_5_fu_3286_p1));
    add_ln88_fu_3025_p2 <= std_logic_vector(unsigned(z_vec_coeffs_q0) + unsigned(sext_ln88_fu_3021_p1));
    add_ln_fu_2354_p4 <= ((trunc_ln22_fu_2350_p1 & ap_const_lv5_0) & j_0_i_reg_984);
    and_ln301_fu_3174_p2 <= (t_16_fu_3160_p3 and shl_ln301_fu_3168_p2);
    and_ln69_fu_3405_p2 <= (icmp_ln69_3_fu_3399_p2 and icmp_ln69_2_fu_3393_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state106 <= ap_CS_fsm(105);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state108 <= ap_CS_fsm(107);
    ap_CS_fsm_state109 <= ap_CS_fsm(108);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state110 <= ap_CS_fsm(109);
    ap_CS_fsm_state111 <= ap_CS_fsm(110);
    ap_CS_fsm_state112 <= ap_CS_fsm(111);
    ap_CS_fsm_state113 <= ap_CS_fsm(112);
    ap_CS_fsm_state114 <= ap_CS_fsm(113);
    ap_CS_fsm_state115 <= ap_CS_fsm(114);
    ap_CS_fsm_state116 <= ap_CS_fsm(115);
    ap_CS_fsm_state117 <= ap_CS_fsm(116);
    ap_CS_fsm_state118 <= ap_CS_fsm(117);
    ap_CS_fsm_state119 <= ap_CS_fsm(118);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state120 <= ap_CS_fsm(119);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);

    ap_done_assign_proc : process(grp_pack_sig_fu_1432_ap_done, ap_CS_fsm_state120)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state120) and (grp_pack_sig_fu_1432_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_pack_sig_fu_1432_ap_done, ap_CS_fsm_state120)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state120) and (grp_pack_sig_fu_1432_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;

    cp_coeffs_address0_assign_proc : process(ap_CS_fsm_state84, grp_poly_challenge_fu_1383_c_coeffs_address0, grp_ntt_1_fu_1440_a_address0, grp_polyveck_pointwise_p_fu_1484_a_coeffs_address0, ap_CS_fsm_state82, ap_CS_fsm_state80, ap_CS_fsm_state97, ap_CS_fsm_state106, zext_ln181_fu_2884_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            cp_coeffs_address0 <= zext_ln181_fu_2884_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state97))) then 
            cp_coeffs_address0 <= grp_polyveck_pointwise_p_fu_1484_a_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            cp_coeffs_address0 <= grp_ntt_1_fu_1440_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            cp_coeffs_address0 <= grp_poly_challenge_fu_1383_c_coeffs_address0;
        else 
            cp_coeffs_address0 <= "XXXXXXXX";
        end if; 
    end process;


    cp_coeffs_ce0_assign_proc : process(ap_CS_fsm_state84, grp_poly_challenge_fu_1383_c_coeffs_ce0, grp_ntt_1_fu_1440_a_ce0, grp_polyveck_pointwise_p_fu_1484_a_coeffs_ce0, ap_CS_fsm_state82, ap_CS_fsm_state80, ap_CS_fsm_state97, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            cp_coeffs_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state97))) then 
            cp_coeffs_ce0 <= grp_polyveck_pointwise_p_fu_1484_a_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            cp_coeffs_ce0 <= grp_ntt_1_fu_1440_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            cp_coeffs_ce0 <= grp_poly_challenge_fu_1383_c_coeffs_ce0;
        else 
            cp_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cp_coeffs_ce1_assign_proc : process(grp_ntt_1_fu_1440_a_ce1, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            cp_coeffs_ce1 <= grp_ntt_1_fu_1440_a_ce1;
        else 
            cp_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cp_coeffs_d0_assign_proc : process(grp_poly_challenge_fu_1383_c_coeffs_d0, grp_ntt_1_fu_1440_a_d0, ap_CS_fsm_state82, ap_CS_fsm_state80)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            cp_coeffs_d0 <= grp_ntt_1_fu_1440_a_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            cp_coeffs_d0 <= grp_poly_challenge_fu_1383_c_coeffs_d0;
        else 
            cp_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    cp_coeffs_we0_assign_proc : process(grp_poly_challenge_fu_1383_c_coeffs_we0, grp_ntt_1_fu_1440_a_we0, ap_CS_fsm_state82, ap_CS_fsm_state80)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            cp_coeffs_we0 <= grp_ntt_1_fu_1440_a_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            cp_coeffs_we0 <= grp_poly_challenge_fu_1383_c_coeffs_we0;
        else 
            cp_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_KeccakF1600_StatePer_1_fu_1392_ap_start <= grp_KeccakF1600_StatePer_1_fu_1392_ap_start_reg;
    grp_KeccakF1600_StatePer_fu_1399_ap_start <= grp_KeccakF1600_StatePer_fu_1399_ap_start_reg;
    grp_fu_1509_p4 <= grp_keccak_absorb_3_fu_1369_ap_return(9 downto 3);
    grp_fu_1519_p2 <= (state_s_q0 xor ap_const_lv64_8000000000000000);
    grp_fu_3444_p0 <= ap_const_lv32_2C0B(15 - 1 downto 0);
    grp_fu_3444_p2 <= ap_const_lv32_800000(25 - 1 downto 0);
    grp_fu_3453_p0 <= ap_const_lv27_7FD1800(19 - 1 downto 0);
    grp_fu_3463_p1 <= ap_const_lv32_FF801FFF(24 - 1 downto 0);
    grp_invntt_tomont_fu_1423_ap_start <= grp_invntt_tomont_fu_1423_ap_start_reg;
    grp_keccak_absorb_3_fu_1369_ap_start <= grp_keccak_absorb_3_fu_1369_ap_start_reg;

    grp_keccak_absorb_3_fu_1369_m_offset_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_keccak_absorb_3_fu_1369_m_offset <= ap_const_lv13_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_keccak_absorb_3_fu_1369_m_offset <= ap_const_lv13_974;
        else 
            grp_keccak_absorb_3_fu_1369_m_offset <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    grp_keccak_absorb_3_fu_1369_mlen_assign_proc : process(mlen, ap_CS_fsm_state8, ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_keccak_absorb_3_fu_1369_mlen <= ap_const_lv64_300;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_keccak_absorb_3_fu_1369_mlen <= mlen;
        else 
            grp_keccak_absorb_3_fu_1369_mlen <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_keccak_absorb_4203_fu_1468_ap_start <= grp_keccak_absorb_4203_fu_1468_ap_start_reg;

    grp_keccak_absorb_4203_fu_1468_m_offset_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            grp_keccak_absorb_4203_fu_1468_m_offset <= ap_const_lv8_70;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_keccak_absorb_4203_fu_1468_m_offset <= ap_const_lv8_20;
        else 
            grp_keccak_absorb_4203_fu_1468_m_offset <= "XXXXXXXX";
        end if; 
    end process;

    grp_ntt_1_fu_1440_ap_start <= grp_ntt_1_fu_1440_ap_start_reg;

    grp_ntt_fu_1447_a_offset_assign_proc : process(i_0_i38_reg_996, ap_CS_fsm_state37, i_0_i40_reg_1008, ap_CS_fsm_state39, i_0_i42_reg_1020, ap_CS_fsm_state41, i_0_i47_reg_1088, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            grp_ntt_fu_1447_a_offset <= i_0_i47_reg_1088;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_ntt_fu_1447_a_offset <= i_0_i42_reg_1020;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_ntt_fu_1447_a_offset <= i_0_i40_reg_1008;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_ntt_fu_1447_a_offset <= i_0_i38_reg_996;
        else 
            grp_ntt_fu_1447_a_offset <= "XXX";
        end if; 
    end process;


    grp_ntt_fu_1447_a_q0_assign_proc : process(s1_vec_coeffs_q0, z_vec_coeffs_q0, t0_vec_coeffs_q0, s2_vec_coeffs_q0, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            grp_ntt_fu_1447_a_q0 <= z_vec_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_ntt_fu_1447_a_q0 <= t0_vec_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_ntt_fu_1447_a_q0 <= s2_vec_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_ntt_fu_1447_a_q0 <= s1_vec_coeffs_q0;
        else 
            grp_ntt_fu_1447_a_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_ntt_fu_1447_a_q1_assign_proc : process(s1_vec_coeffs_q1, z_vec_coeffs_q1, t0_vec_coeffs_q1, s2_vec_coeffs_q1, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            grp_ntt_fu_1447_a_q1 <= z_vec_coeffs_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_ntt_fu_1447_a_q1 <= t0_vec_coeffs_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_ntt_fu_1447_a_q1 <= s2_vec_coeffs_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_ntt_fu_1447_a_q1 <= s1_vec_coeffs_q1;
        else 
            grp_ntt_fu_1447_a_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_ntt_fu_1447_ap_start <= grp_ntt_fu_1447_ap_start_reg;
    grp_pack_sig_fu_1432_ap_start <= grp_pack_sig_fu_1432_ap_start_reg;
    grp_poly_challenge_fu_1383_ap_start <= grp_poly_challenge_fu_1383_ap_start_reg;
    grp_poly_uniform_fu_1346_ap_start <= grp_poly_uniform_fu_1346_ap_start_reg;
    grp_polyveck_caddq_fu_1499_ap_start <= grp_polyveck_caddq_fu_1499_ap_start_reg;

    grp_polyveck_caddq_fu_1499_v_vec_coeffs_q0_assign_proc : process(w1_vec_coeffs_q0, w0_vec_coeffs_q0, ap_CS_fsm_state60, ap_CS_fsm_state116)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state116)) then 
            grp_polyveck_caddq_fu_1499_v_vec_coeffs_q0 <= w0_vec_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_polyveck_caddq_fu_1499_v_vec_coeffs_q0 <= w1_vec_coeffs_q0;
        else 
            grp_polyveck_caddq_fu_1499_v_vec_coeffs_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_polyveck_chknorm_fu_1491_ap_start <= grp_polyveck_chknorm_fu_1491_ap_start_reg;

    grp_polyveck_chknorm_fu_1491_bound_assign_proc : process(ap_CS_fsm_state105, ap_CS_fsm_state112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            grp_polyveck_chknorm_fu_1491_bound <= ap_const_lv18_17400;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            grp_polyveck_chknorm_fu_1491_bound <= ap_const_lv18_173B2;
        else 
            grp_polyveck_chknorm_fu_1491_bound <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_polyveck_chknorm_fu_1491_v_vec_coeffs_q0_assign_proc : process(ap_CS_fsm_state105, ap_CS_fsm_state112, w0_vec_coeffs_q0, h_vec_coeffs_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            grp_polyveck_chknorm_fu_1491_v_vec_coeffs_q0 <= h_vec_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            grp_polyveck_chknorm_fu_1491_v_vec_coeffs_q0 <= w0_vec_coeffs_q0;
        else 
            grp_polyveck_chknorm_fu_1491_v_vec_coeffs_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_polyveck_invntt_tomo_fu_1416_ap_start <= grp_polyveck_invntt_tomo_fu_1416_ap_start_reg;

    grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_q0_assign_proc : process(w1_vec_coeffs_q0, h_vec_coeffs_q0, ap_CS_fsm_state99, ap_CS_fsm_state58, ap_CS_fsm_state108)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state99))) then 
            grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_q0 <= h_vec_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_q0 <= w1_vec_coeffs_q0;
        else 
            grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_q1_assign_proc : process(w1_vec_coeffs_q1, h_vec_coeffs_q1, ap_CS_fsm_state99, ap_CS_fsm_state58, ap_CS_fsm_state108)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state99))) then 
            grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_q1 <= h_vec_coeffs_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_q1 <= w1_vec_coeffs_q1;
        else 
            grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_polyveck_pack_w1_fu_1477_ap_start <= grp_polyveck_pack_w1_fu_1477_ap_start_reg;
    grp_polyveck_pointwise_p_fu_1484_ap_start <= grp_polyveck_pointwise_p_fu_1484_ap_start_reg;

    grp_polyveck_pointwise_p_fu_1484_v_vec_coeffs_q0_assign_proc : process(t0_vec_coeffs_q0, s2_vec_coeffs_q0, ap_CS_fsm_state97, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_polyveck_pointwise_p_fu_1484_v_vec_coeffs_q0 <= t0_vec_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            grp_polyveck_pointwise_p_fu_1484_v_vec_coeffs_q0 <= s2_vec_coeffs_q0;
        else 
            grp_polyveck_pointwise_p_fu_1484_v_vec_coeffs_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_polyveck_reduce_fu_1504_ap_start <= grp_polyveck_reduce_fu_1504_ap_start_reg;

    grp_polyveck_reduce_fu_1504_v_vec_coeffs_q0_assign_proc : process(w1_vec_coeffs_q0, w0_vec_coeffs_q0, h_vec_coeffs_q0, ap_CS_fsm_state56, ap_CS_fsm_state103, ap_CS_fsm_state110)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            grp_polyveck_reduce_fu_1504_v_vec_coeffs_q0 <= h_vec_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            grp_polyveck_reduce_fu_1504_v_vec_coeffs_q0 <= w0_vec_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_polyveck_reduce_fu_1504_v_vec_coeffs_q0 <= w1_vec_coeffs_q0;
        else 
            grp_polyveck_reduce_fu_1504_v_vec_coeffs_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_polyvecl_pointwise_a_fu_1459_ap_start <= grp_polyvecl_pointwise_a_fu_1459_ap_start_reg;
    grp_polyvecl_uniform_gam_fu_1359_ap_start <= grp_polyvecl_uniform_gam_fu_1359_ap_start_reg;
    grp_unpack_sk_fu_1406_ap_start <= grp_unpack_sk_fu_1406_ap_start_reg;

    h_vec_coeffs_address0_assign_proc : process(ap_CS_fsm_state101, ap_CS_fsm_state112, ap_CS_fsm_state114, zext_ln249_1_reg_4102, ap_CS_fsm_state119, grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_address0, grp_pack_sig_fu_1432_h_vec_coeffs_address0, grp_polyveck_pointwise_p_fu_1484_r_vec_coeffs_address0, grp_polyveck_chknorm_fu_1491_v_vec_coeffs_address0, grp_polyveck_reduce_fu_1504_v_vec_coeffs_address0, ap_CS_fsm_state99, ap_CS_fsm_state108, ap_CS_fsm_state120, ap_CS_fsm_state97, ap_CS_fsm_state106, ap_CS_fsm_state110, zext_ln109_1_fu_3237_p1, zext_ln88_6_fu_3295_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state119)) then 
            h_vec_coeffs_address0 <= zext_ln249_1_reg_4102(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            h_vec_coeffs_address0 <= zext_ln88_6_fu_3295_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            h_vec_coeffs_address0 <= zext_ln109_1_fu_3237_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            h_vec_coeffs_address0 <= grp_polyveck_reduce_fu_1504_v_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            h_vec_coeffs_address0 <= grp_polyveck_chknorm_fu_1491_v_vec_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state97))) then 
            h_vec_coeffs_address0 <= grp_polyveck_pointwise_p_fu_1484_r_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            h_vec_coeffs_address0 <= grp_pack_sig_fu_1432_h_vec_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state99))) then 
            h_vec_coeffs_address0 <= grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_address0;
        else 
            h_vec_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    h_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state101, ap_CS_fsm_state112, ap_CS_fsm_state114, ap_CS_fsm_state119, grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_ce0, grp_pack_sig_fu_1432_h_vec_coeffs_ce0, grp_polyveck_pointwise_p_fu_1484_r_vec_coeffs_ce0, grp_polyveck_chknorm_fu_1491_v_vec_coeffs_ce0, grp_polyveck_reduce_fu_1504_v_vec_coeffs_ce0, ap_CS_fsm_state99, ap_CS_fsm_state108, ap_CS_fsm_state120, ap_CS_fsm_state97, ap_CS_fsm_state106, ap_CS_fsm_state110)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state114) or (ap_const_logic_1 = ap_CS_fsm_state101))) then 
            h_vec_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            h_vec_coeffs_ce0 <= grp_polyveck_reduce_fu_1504_v_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            h_vec_coeffs_ce0 <= grp_polyveck_chknorm_fu_1491_v_vec_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state97))) then 
            h_vec_coeffs_ce0 <= grp_polyveck_pointwise_p_fu_1484_r_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            h_vec_coeffs_ce0 <= grp_pack_sig_fu_1432_h_vec_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state99))) then 
            h_vec_coeffs_ce0 <= grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_ce0;
        else 
            h_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    h_vec_coeffs_ce1_assign_proc : process(grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_ce1, ap_CS_fsm_state99, ap_CS_fsm_state108)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state99))) then 
            h_vec_coeffs_ce1 <= grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_ce1;
        else 
            h_vec_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    h_vec_coeffs_d0_assign_proc : process(ap_CS_fsm_state119, grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_d0, grp_polyveck_pointwise_p_fu_1484_r_vec_coeffs_d0, grp_polyveck_reduce_fu_1504_v_vec_coeffs_d0, ap_CS_fsm_state99, ap_CS_fsm_state108, ap_CS_fsm_state97, ap_CS_fsm_state106, ap_CS_fsm_state110, zext_ln69_1_fu_3433_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state119)) then 
            h_vec_coeffs_d0 <= zext_ln69_1_fu_3433_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            h_vec_coeffs_d0 <= grp_polyveck_reduce_fu_1504_v_vec_coeffs_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state97))) then 
            h_vec_coeffs_d0 <= grp_polyveck_pointwise_p_fu_1484_r_vec_coeffs_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state99))) then 
            h_vec_coeffs_d0 <= grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_d0;
        else 
            h_vec_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    h_vec_coeffs_we0_assign_proc : process(ap_CS_fsm_state119, grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_we0, grp_polyveck_pointwise_p_fu_1484_r_vec_coeffs_we0, grp_polyveck_reduce_fu_1504_v_vec_coeffs_we0, ap_CS_fsm_state99, ap_CS_fsm_state108, ap_CS_fsm_state97, ap_CS_fsm_state106, ap_CS_fsm_state110)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state119)) then 
            h_vec_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            h_vec_coeffs_we0 <= grp_polyveck_reduce_fu_1504_v_vec_coeffs_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state97))) then 
            h_vec_coeffs_we0 <= grp_polyveck_pointwise_p_fu_1484_r_vec_coeffs_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state99))) then 
            h_vec_coeffs_we0 <= grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_we0;
        else 
            h_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_42_fu_1702_p2 <= std_logic_vector(unsigned(i_0_i_i_reg_891) + unsigned(ap_const_lv5_1));
    i_43_fu_1943_p2 <= std_logic_vector(unsigned(i_0_i_i_i_reg_914) + unsigned(ap_const_lv5_1));
    i_44_fu_1988_p2 <= std_logic_vector(unsigned(i_0_i5_i_reg_936) + unsigned(ap_const_lv4_1));
    i_46_fu_2332_p2 <= std_logic_vector(unsigned(i_0_i_reg_972) + unsigned(ap_const_lv3_1));
    i_69_fu_2371_p2 <= std_logic_vector(unsigned(i_0_i38_reg_996) + unsigned(ap_const_lv3_1));
    i_70_fu_2383_p2 <= std_logic_vector(unsigned(i_0_i40_reg_1008) + unsigned(ap_const_lv3_1));
    i_71_fu_2395_p2 <= std_logic_vector(unsigned(i_0_i42_reg_1020) + unsigned(ap_const_lv3_1));
    i_72_fu_2513_p2 <= std_logic_vector(unsigned(i_0_i47_reg_1088) + unsigned(ap_const_lv3_1));
    i_73_fu_2525_p2 <= std_logic_vector(unsigned(i_0_i52_reg_1100) + unsigned(ap_const_lv3_1));
    i_74_fu_2537_p2 <= std_logic_vector(unsigned(i_0_i54_reg_1112) + unsigned(ap_const_lv3_1));
    i_75_fu_2690_p2 <= std_logic_vector(unsigned(i_0_i_i58_reg_1134) + unsigned(ap_const_lv5_1));
    i_76_fu_2561_p2 <= std_logic_vector(unsigned(i_0_i_i55_reg_1123) + unsigned(ap_const_lv9_1));
    i_77_fu_2854_p2 <= std_logic_vector(unsigned(i_0_i78_reg_1156) + unsigned(ap_const_lv3_1));
    i_78_fu_2964_p2 <= std_logic_vector(unsigned(i_0_i84_reg_1178) + unsigned(ap_const_lv3_1));
    i_79_fu_2878_p2 <= std_logic_vector(unsigned(i_0_i_i79_reg_1167) + unsigned(ap_const_lv9_1));
    i_80_fu_2976_p2 <= std_logic_vector(unsigned(i_0_i86_reg_1190) + unsigned(ap_const_lv3_1));
    i_81_fu_3038_p2 <= std_logic_vector(unsigned(i_0_i94_reg_1212) + unsigned(ap_const_lv3_1));
    i_82_fu_3000_p2 <= std_logic_vector(unsigned(i_0_i_i87_reg_1201) + unsigned(ap_const_lv9_1));
    i_83_fu_3108_p2 <= std_logic_vector(unsigned(i_0_i85_reg_1234) + unsigned(ap_const_lv3_1));
    i_84_fu_3062_p2 <= std_logic_vector(unsigned(i_0_i_i95_reg_1223) + unsigned(ap_const_lv9_1));
    i_85_fu_3198_p2 <= std_logic_vector(unsigned(i_0_i101_reg_1256) + unsigned(ap_const_lv3_1));
    i_86_fu_3132_p2 <= std_logic_vector(unsigned(i_0_i_i86_reg_1245) + unsigned(ap_const_lv9_1));
    i_87_fu_3222_p2 <= std_logic_vector(unsigned(i_0_i_i102_reg_1267) + unsigned(ap_const_lv9_1));
    i_88_fu_3256_p2 <= std_logic_vector(unsigned(i_0_i109_reg_1278) + unsigned(ap_const_lv3_1));
    i_89_fu_3280_p2 <= std_logic_vector(unsigned(i_0_i_i110_reg_1289) + unsigned(ap_const_lv9_1));
    i_90_fu_3314_p2 <= std_logic_vector(unsigned(i_0_i87_reg_1300) + unsigned(ap_const_lv3_1));
    i_91_fu_3350_p2 <= std_logic_vector(unsigned(i_0_i_i88_reg_1323) + unsigned(ap_const_lv9_1));
    i_fu_1671_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(i_0_reg_880));
    icmp_ln100_1_fu_2507_p2 <= "1" when (i_0_i47_reg_1088 = ap_const_lv3_4) else "0";
    icmp_ln100_fu_2365_p2 <= "1" when (i_0_i38_reg_996 = ap_const_lv3_4) else "0";
    icmp_ln107_fu_2958_p2 <= "1" when (i_0_i84_reg_1178 = ap_const_lv3_4) else "0";
    icmp_ln108_fu_3216_p2 <= "1" when (i_0_i_i102_reg_1267 = ap_const_lv9_100) else "0";
    icmp_ln114_fu_2848_p2 <= "1" when (i_0_i78_reg_1156 = ap_const_lv3_4) else "0";
    icmp_ln125_1_fu_2444_p2 <= "1" when (phi_ln125_1_reg_1055 = ap_const_lv8_FF) else "0";
    icmp_ln125_2_fu_2470_p2 <= "1" when (phi_ln125_2_reg_1066 = ap_const_lv8_FF) else "0";
    icmp_ln125_3_fu_2496_p2 <= "1" when (phi_ln125_3_reg_1077 = ap_const_lv8_FF) else "0";
    icmp_ln125_fu_2418_p2 <= "1" when (phi_ln125_reg_1044 = ap_const_lv8_FF) else "0";
    icmp_ln158_fu_3102_p2 <= "1" when (i_0_i85_reg_1234 = ap_const_lv3_4) else "0";
    icmp_ln173_fu_3332_p2 <= "1" when (unsigned(n_reg_1311) > unsigned(ap_const_lv11_50)) else "0";
    icmp_ln180_fu_2872_p2 <= "1" when (i_0_i_i79_reg_1167 = ap_const_lv9_100) else "0";
    icmp_ln207_fu_1666_p2 <= "1" when (i_0_reg_880 = mlen) else "0";
    icmp_ln20_fu_2326_p2 <= "1" when (i_0_i_reg_972 = ap_const_lv3_4) else "0";
    icmp_ln21_fu_2338_p2 <= "1" when (j_0_i_reg_984 = ap_const_lv3_4) else "0";
    icmp_ln225_fu_2555_p2 <= "1" when (i_0_i_i55_reg_1123 = ap_const_lv9_100) else "0";
    icmp_ln234_fu_3250_p2 <= "1" when (i_0_i109_reg_1278 = ap_const_lv3_4) else "0";
    icmp_ln248_fu_3344_p2 <= "1" when (i_0_i_i88_reg_1323 = ap_const_lv9_100) else "0";
    icmp_ln252_fu_3192_p2 <= "1" when (i_0_i101_reg_1256 = ap_const_lv3_4) else "0";
    icmp_ln282_1_fu_2389_p2 <= "1" when (i_0_i42_reg_1020 = ap_const_lv3_4) else "0";
    icmp_ln282_fu_2377_p2 <= "1" when (i_0_i40_reg_1008 = ap_const_lv3_4) else "0";
    icmp_ln28_fu_2519_p2 <= "1" when (i_0_i52_reg_1100 = ap_const_lv3_4) else "0";
    icmp_ln298_fu_3126_p2 <= "1" when (i_0_i_i86_reg_1245 = ap_const_lv9_100) else "0";
    icmp_ln303_fu_3186_p2 <= "1" when (signed(t_17_fu_3180_p2) < signed(ap_const_lv32_1FFB2)) else "0";
    icmp_ln30_fu_1982_p2 <= "1" when (i_0_i5_i_reg_936 = ap_const_lv4_8) else "0";
    icmp_ln32_fu_3056_p2 <= "1" when (i_0_i_i95_reg_1223 = ap_const_lv9_100) else "0";
    icmp_ln362_1_fu_1937_p2 <= "1" when (i_0_i_i_i_reg_914 = ap_const_lv5_19) else "0";
    icmp_ln362_2_fu_2684_p2 <= "1" when (i_0_i_i58_reg_1134 = ap_const_lv5_19) else "0";
    icmp_ln362_fu_1696_p2 <= "1" when (i_0_i_i_reg_891 = ap_const_lv5_19) else "0";
    icmp_ln371_fu_2531_p2 <= "1" when (i_0_i54_reg_1112 = ap_const_lv3_4) else "0";
    icmp_ln392_fu_3308_p2 <= "1" when (i_0_i87_reg_1300 = ap_const_lv3_4) else "0";
    icmp_ln416_fu_1958_p2 <= "1" when (i_3_i1_reg_925 = ap_const_lv4_A) else "0";
    icmp_ln53_fu_3032_p2 <= "1" when (i_0_i94_reg_1212 = ap_const_lv3_4) else "0";
    icmp_ln540_1_fu_2074_p2 <= "1" when (i_3_i3_reg_960 = ap_const_lv3_6) else "0";
    icmp_ln540_2_fu_2744_p2 <= "1" when (i_3_i47_reg_1145 = ap_const_lv3_4) else "0";
    icmp_ln540_fu_1756_p2 <= "1" when (i_3_i_reg_902 = ap_const_lv3_6) else "0";
    icmp_ln69_1_fu_3387_p2 <= "1" when (signed(w0_vec_coeffs_q0) > signed(ap_const_lv32_7E6C01)) else "0";
    icmp_ln69_2_fu_3393_p2 <= "1" when (w0_vec_coeffs_q0 = ap_const_lv32_7E6C01) else "0";
    icmp_ln69_3_fu_3399_p2 <= "1" when (w1_vec_coeffs_q0 = ap_const_lv32_0) else "0";
    icmp_ln69_fu_3381_p2 <= "1" when (signed(w0_vec_coeffs_q0) < signed(ap_const_lv32_17401)) else "0";
    icmp_ln85_fu_2970_p2 <= "1" when (i_0_i86_reg_1190 = ap_const_lv3_4) else "0";
    icmp_ln87_1_fu_3274_p2 <= "1" when (i_0_i_i110_reg_1289 = ap_const_lv9_100) else "0";
    icmp_ln87_fu_2994_p2 <= "1" when (i_0_i_i87_reg_1201 = ap_const_lv9_100) else "0";
    j_fu_2344_p2 <= std_logic_vector(unsigned(j_0_i_reg_984) + unsigned(ap_const_lv3_1));
    m_address0 <= zext_ln208_fu_1682_p1(12 - 1 downto 0);

    m_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            m_ce0 <= ap_const_logic_1;
        else 
            m_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mat_vec_coeffs_address0_assign_proc : process(grp_poly_uniform_fu_1346_a_coeffs_address0, grp_polyvecl_pointwise_a_fu_1459_u_vec_coeffs_address0, ap_CS_fsm_state35, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            mat_vec_coeffs_address0 <= grp_polyvecl_pointwise_a_fu_1459_u_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            mat_vec_coeffs_address0 <= grp_poly_uniform_fu_1346_a_coeffs_address0;
        else 
            mat_vec_coeffs_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    mat_vec_coeffs_ce0_assign_proc : process(grp_poly_uniform_fu_1346_a_coeffs_ce0, grp_polyvecl_pointwise_a_fu_1459_u_vec_coeffs_ce0, ap_CS_fsm_state35, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            mat_vec_coeffs_ce0 <= grp_polyvecl_pointwise_a_fu_1459_u_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            mat_vec_coeffs_ce0 <= grp_poly_uniform_fu_1346_a_coeffs_ce0;
        else 
            mat_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mat_vec_coeffs_we0_assign_proc : process(grp_poly_uniform_fu_1346_a_coeffs_we0, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            mat_vec_coeffs_we0 <= grp_poly_uniform_fu_1346_a_coeffs_we0;
        else 
            mat_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln181_fu_2911_p0 <= s1_vec_coeffs_q0;
    mul_ln181_fu_2911_p1 <= cp_coeffs_q0;
    mul_ln181_fu_2911_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln181_fu_2911_p0) * signed(mul_ln181_fu_2911_p1))), 64));
    mul_ln19_fu_2931_p1 <= t_fu_2921_p2;
    mul_ln19_fu_2931_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ap_const_lv55_7FFFFFFF801FFF) * signed(mul_ln19_fu_2931_p1))), 55));
    nonce_fu_2401_p2 <= std_logic_vector(unsigned(nonce_0_i_reg_1032) + unsigned(ap_const_lv16_1));
    or_ln542_1_fu_2125_p2 <= (shl_ln541_1_fu_2091_p3 or ap_const_lv6_1);
    or_ln542_2_fu_2777_p2 <= (shl_ln541_2_fu_2765_p3 or ap_const_lv5_1);
    or_ln542_fu_1796_p2 <= (shl_ln25_fu_1773_p3 or ap_const_lv6_1);
    or_ln543_1_fu_2206_p2 <= (shl_ln541_1_reg_3623 or ap_const_lv6_2);
    or_ln543_2_fu_2788_p2 <= (shl_ln541_2_reg_3867 or ap_const_lv5_2);
    or_ln543_fu_1817_p2 <= (shl_ln25_reg_3538 or ap_const_lv6_2);
    or_ln544_1_fu_2226_p2 <= (shl_ln541_1_reg_3623 or ap_const_lv6_3);
    or_ln544_2_fu_2798_p2 <= (shl_ln541_2_reg_3867 or ap_const_lv5_3);
    or_ln544_fu_1837_p2 <= (shl_ln25_reg_3538 or ap_const_lv6_3);
    or_ln545_1_fu_2246_p2 <= (shl_ln541_1_reg_3623 or ap_const_lv6_4);
    or_ln545_2_fu_2808_p2 <= (shl_ln541_2_reg_3867 or ap_const_lv5_4);
    or_ln545_fu_1857_p2 <= (shl_ln25_reg_3538 or ap_const_lv6_4);
    or_ln546_1_fu_2266_p2 <= (shl_ln541_1_reg_3623 or ap_const_lv6_5);
    or_ln546_2_fu_2818_p2 <= (shl_ln541_2_reg_3867 or ap_const_lv5_5);
    or_ln546_fu_1877_p2 <= (shl_ln25_reg_3538 or ap_const_lv6_5);
    or_ln547_1_fu_2286_p2 <= (shl_ln541_1_reg_3623 or ap_const_lv6_6);
    or_ln547_2_fu_2828_p2 <= (shl_ln541_2_reg_3867 or ap_const_lv5_6);
    or_ln547_fu_1897_p2 <= (shl_ln25_reg_3538 or ap_const_lv6_6);
    or_ln548_1_fu_2306_p2 <= (shl_ln541_1_reg_3623 or ap_const_lv6_7);
    or_ln548_2_fu_2838_p2 <= (shl_ln541_2_reg_3867 or ap_const_lv5_7);
    or_ln548_fu_1917_p2 <= (shl_ln25_reg_3538 or ap_const_lv6_7);
    or_ln69_1_fu_3417_p2 <= (or_ln69_fu_3411_p2 or icmp_ln69_fu_3381_p2);
    or_ln69_fu_3411_p2 <= (icmp_ln69_1_fu_3387_p2 or and_ln69_fu_3405_p2);
    or_ln_fu_1994_p3 <= (ap_const_lv3_5 & i_0_i5_i_reg_936);
    r_fu_2042_p2 <= (shl_ln31_fu_2036_p2 or r_0_i6_i_reg_948);

    s1_vec_coeffs_address0_assign_proc : process(ap_CS_fsm_state84, zext_ln181_17_fu_2898_p1, grp_unpack_sk_fu_1406_s1_vec_coeffs_address0, grp_ntt_fu_1447_a_address0, ap_CS_fsm_state4, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            s1_vec_coeffs_address0 <= zext_ln181_17_fu_2898_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            s1_vec_coeffs_address0 <= grp_ntt_fu_1447_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s1_vec_coeffs_address0 <= grp_unpack_sk_fu_1406_s1_vec_coeffs_address0;
        else 
            s1_vec_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    s1_vec_coeffs_address1_assign_proc : process(grp_unpack_sk_fu_1406_s1_vec_coeffs_address1, grp_ntt_fu_1447_a_address1, ap_CS_fsm_state4, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            s1_vec_coeffs_address1 <= grp_ntt_fu_1447_a_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s1_vec_coeffs_address1 <= grp_unpack_sk_fu_1406_s1_vec_coeffs_address1;
        else 
            s1_vec_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    s1_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state84, grp_unpack_sk_fu_1406_s1_vec_coeffs_ce0, grp_ntt_fu_1447_a_ce0, ap_CS_fsm_state4, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            s1_vec_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            s1_vec_coeffs_ce0 <= grp_ntt_fu_1447_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s1_vec_coeffs_ce0 <= grp_unpack_sk_fu_1406_s1_vec_coeffs_ce0;
        else 
            s1_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s1_vec_coeffs_ce1_assign_proc : process(grp_unpack_sk_fu_1406_s1_vec_coeffs_ce1, grp_ntt_fu_1447_a_ce1, ap_CS_fsm_state4, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            s1_vec_coeffs_ce1 <= grp_ntt_fu_1447_a_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s1_vec_coeffs_ce1 <= grp_unpack_sk_fu_1406_s1_vec_coeffs_ce1;
        else 
            s1_vec_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s1_vec_coeffs_d0_assign_proc : process(grp_unpack_sk_fu_1406_s1_vec_coeffs_d0, grp_ntt_fu_1447_a_d0, ap_CS_fsm_state4, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            s1_vec_coeffs_d0 <= grp_ntt_fu_1447_a_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s1_vec_coeffs_d0 <= grp_unpack_sk_fu_1406_s1_vec_coeffs_d0;
        else 
            s1_vec_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s1_vec_coeffs_we0_assign_proc : process(grp_unpack_sk_fu_1406_s1_vec_coeffs_we0, grp_ntt_fu_1447_a_we0, ap_CS_fsm_state4, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            s1_vec_coeffs_we0 <= grp_ntt_fu_1447_a_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s1_vec_coeffs_we0 <= grp_unpack_sk_fu_1406_s1_vec_coeffs_we0;
        else 
            s1_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s1_vec_coeffs_we1_assign_proc : process(grp_unpack_sk_fu_1406_s1_vec_coeffs_we1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s1_vec_coeffs_we1 <= grp_unpack_sk_fu_1406_s1_vec_coeffs_we1;
        else 
            s1_vec_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;


    s2_vec_coeffs_address0_assign_proc : process(grp_unpack_sk_fu_1406_s2_vec_coeffs_address0, grp_ntt_fu_1447_a_address0, grp_polyveck_pointwise_p_fu_1484_v_vec_coeffs_address0, ap_CS_fsm_state4, ap_CS_fsm_state39, ap_CS_fsm_state97)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            s2_vec_coeffs_address0 <= grp_polyveck_pointwise_p_fu_1484_v_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            s2_vec_coeffs_address0 <= grp_ntt_fu_1447_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s2_vec_coeffs_address0 <= grp_unpack_sk_fu_1406_s2_vec_coeffs_address0;
        else 
            s2_vec_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    s2_vec_coeffs_address1_assign_proc : process(grp_unpack_sk_fu_1406_s2_vec_coeffs_address1, grp_ntt_fu_1447_a_address1, ap_CS_fsm_state4, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            s2_vec_coeffs_address1 <= grp_ntt_fu_1447_a_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s2_vec_coeffs_address1 <= grp_unpack_sk_fu_1406_s2_vec_coeffs_address1;
        else 
            s2_vec_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    s2_vec_coeffs_ce0_assign_proc : process(grp_unpack_sk_fu_1406_s2_vec_coeffs_ce0, grp_ntt_fu_1447_a_ce0, grp_polyveck_pointwise_p_fu_1484_v_vec_coeffs_ce0, ap_CS_fsm_state4, ap_CS_fsm_state39, ap_CS_fsm_state97)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            s2_vec_coeffs_ce0 <= grp_polyveck_pointwise_p_fu_1484_v_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            s2_vec_coeffs_ce0 <= grp_ntt_fu_1447_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s2_vec_coeffs_ce0 <= grp_unpack_sk_fu_1406_s2_vec_coeffs_ce0;
        else 
            s2_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s2_vec_coeffs_ce1_assign_proc : process(grp_unpack_sk_fu_1406_s2_vec_coeffs_ce1, grp_ntt_fu_1447_a_ce1, ap_CS_fsm_state4, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            s2_vec_coeffs_ce1 <= grp_ntt_fu_1447_a_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s2_vec_coeffs_ce1 <= grp_unpack_sk_fu_1406_s2_vec_coeffs_ce1;
        else 
            s2_vec_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s2_vec_coeffs_d0_assign_proc : process(grp_unpack_sk_fu_1406_s2_vec_coeffs_d0, grp_ntt_fu_1447_a_d0, ap_CS_fsm_state4, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            s2_vec_coeffs_d0 <= grp_ntt_fu_1447_a_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s2_vec_coeffs_d0 <= grp_unpack_sk_fu_1406_s2_vec_coeffs_d0;
        else 
            s2_vec_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s2_vec_coeffs_we0_assign_proc : process(grp_unpack_sk_fu_1406_s2_vec_coeffs_we0, grp_ntt_fu_1447_a_we0, ap_CS_fsm_state4, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            s2_vec_coeffs_we0 <= grp_ntt_fu_1447_a_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s2_vec_coeffs_we0 <= grp_unpack_sk_fu_1406_s2_vec_coeffs_we0;
        else 
            s2_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s2_vec_coeffs_we1_assign_proc : process(grp_unpack_sk_fu_1406_s2_vec_coeffs_we1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s2_vec_coeffs_we1 <= grp_unpack_sk_fu_1406_s2_vec_coeffs_we1;
        else 
            s2_vec_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;

    s_1_fu_3438_p2 <= std_logic_vector(unsigned(s_0_i_i_reg_1334) + unsigned(zext_ln69_fu_3429_p1));
    s_fu_3375_p2 <= std_logic_vector(unsigned(zext_ln248_fu_3371_p1) + unsigned(n_reg_1311));

    seedbuf_address0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state29, grp_poly_uniform_fu_1346_seed_address0, grp_polyvecl_uniform_gam_fu_1359_seed_address0, grp_unpack_sk_fu_1406_rho_address0, grp_keccak_absorb_4203_fu_1468_m_address0, ap_CS_fsm_state4, ap_CS_fsm_state19, ap_CS_fsm_state32, ap_CS_fsm_state35, ap_CS_fsm_state43, ap_CS_fsm_state6, ap_CS_fsm_state66, zext_ln541_1_fu_1791_p1, zext_ln543_1_fu_1832_p1, ap_CS_fsm_state17, zext_ln545_1_fu_1872_p1, ap_CS_fsm_state18, zext_ln547_1_fu_1912_p1, zext_ln31_18_fu_2011_p1, zext_ln542_3_fu_2141_p1, ap_CS_fsm_state30, zext_ln544_3_fu_2241_p1, ap_CS_fsm_state31, zext_ln546_3_fu_2281_p1, zext_ln548_3_fu_2321_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            seedbuf_address0 <= zext_ln548_3_fu_2321_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            seedbuf_address0 <= zext_ln546_3_fu_2281_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            seedbuf_address0 <= zext_ln544_3_fu_2241_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            seedbuf_address0 <= zext_ln542_3_fu_2141_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            seedbuf_address0 <= zext_ln31_18_fu_2011_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            seedbuf_address0 <= zext_ln547_1_fu_1912_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            seedbuf_address0 <= zext_ln545_1_fu_1872_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            seedbuf_address0 <= zext_ln543_1_fu_1832_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            seedbuf_address0 <= zext_ln541_1_fu_1791_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            seedbuf_address0 <= grp_keccak_absorb_4203_fu_1468_m_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            seedbuf_address0 <= grp_unpack_sk_fu_1406_rho_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            seedbuf_address0 <= grp_polyvecl_uniform_gam_fu_1359_seed_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            seedbuf_address0 <= grp_poly_uniform_fu_1346_seed_address0;
        else 
            seedbuf_address0 <= "XXXXXXXX";
        end if; 
    end process;


    seedbuf_address1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state29, ap_CS_fsm_state19, ap_CS_fsm_state32, zext_ln542_1_fu_1812_p1, ap_CS_fsm_state17, zext_ln544_1_fu_1852_p1, ap_CS_fsm_state18, zext_ln546_1_fu_1892_p1, zext_ln548_1_fu_1932_p1, zext_ln541_3_fu_2109_p1, zext_ln543_3_fu_2221_p1, ap_CS_fsm_state30, zext_ln545_3_fu_2261_p1, ap_CS_fsm_state31, zext_ln547_3_fu_2301_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            seedbuf_address1 <= zext_ln547_3_fu_2301_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            seedbuf_address1 <= zext_ln545_3_fu_2261_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            seedbuf_address1 <= zext_ln543_3_fu_2221_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            seedbuf_address1 <= zext_ln541_3_fu_2109_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            seedbuf_address1 <= zext_ln548_1_fu_1932_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            seedbuf_address1 <= zext_ln546_1_fu_1892_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            seedbuf_address1 <= zext_ln544_1_fu_1852_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            seedbuf_address1 <= zext_ln542_1_fu_1812_p1(8 - 1 downto 0);
        else 
            seedbuf_address1 <= "XXXXXXXX";
        end if; 
    end process;


    seedbuf_ce0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state29, grp_poly_uniform_fu_1346_seed_ce0, grp_polyvecl_uniform_gam_fu_1359_seed_ce0, grp_unpack_sk_fu_1406_rho_ce0, grp_keccak_absorb_4203_fu_1468_m_ce0, ap_CS_fsm_state4, ap_CS_fsm_state19, ap_CS_fsm_state32, ap_CS_fsm_state35, ap_CS_fsm_state43, ap_CS_fsm_state6, ap_CS_fsm_state66, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state30, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            seedbuf_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            seedbuf_ce0 <= grp_keccak_absorb_4203_fu_1468_m_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            seedbuf_ce0 <= grp_unpack_sk_fu_1406_rho_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            seedbuf_ce0 <= grp_polyvecl_uniform_gam_fu_1359_seed_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            seedbuf_ce0 <= grp_poly_uniform_fu_1346_seed_ce0;
        else 
            seedbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    seedbuf_ce1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state29, ap_CS_fsm_state19, ap_CS_fsm_state32, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state30, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            seedbuf_ce1 <= ap_const_logic_1;
        else 
            seedbuf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    seedbuf_d0_assign_proc : process(reg_1602, ap_CS_fsm_state16, reg_1614, reg_1626, ap_CS_fsm_state29, trunc_ln544_1_reg_3638, trunc_ln546_1_reg_3648, trunc_ln548_1_reg_3658, state_0_s_q1, grp_unpack_sk_fu_1406_rho_d0, ap_CS_fsm_state4, ap_CS_fsm_state19, ap_CS_fsm_state32, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state30, ap_CS_fsm_state31, trunc_ln541_fu_1768_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            seedbuf_d0 <= trunc_ln548_1_reg_3658;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            seedbuf_d0 <= trunc_ln546_1_reg_3648;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            seedbuf_d0 <= trunc_ln544_1_reg_3638;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            seedbuf_d0 <= state_0_s_q1(15 downto 8);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            seedbuf_d0 <= reg_1626;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            seedbuf_d0 <= reg_1614;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            seedbuf_d0 <= reg_1602;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            seedbuf_d0 <= trunc_ln541_fu_1768_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            seedbuf_d0 <= grp_unpack_sk_fu_1406_rho_d0;
        else 
            seedbuf_d0 <= "XXXXXXXX";
        end if; 
    end process;


    seedbuf_d1_assign_proc : process(ap_CS_fsm_state16, reg_1608, reg_1620, reg_1632, ap_CS_fsm_state29, trunc_ln543_1_reg_3633, trunc_ln545_1_reg_3643, trunc_ln547_1_reg_3653, state_s_q0, ap_CS_fsm_state19, ap_CS_fsm_state32, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state30, ap_CS_fsm_state31, trunc_ln541_1_fu_2086_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            seedbuf_d1 <= trunc_ln547_1_reg_3653;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            seedbuf_d1 <= trunc_ln545_1_reg_3643;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            seedbuf_d1 <= trunc_ln543_1_reg_3633;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            seedbuf_d1 <= trunc_ln541_1_fu_2086_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            seedbuf_d1 <= reg_1632;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            seedbuf_d1 <= reg_1620;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            seedbuf_d1 <= reg_1608;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            seedbuf_d1 <= state_s_q0(15 downto 8);
        else 
            seedbuf_d1 <= "XXXXXXXX";
        end if; 
    end process;


    seedbuf_we0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state29, grp_unpack_sk_fu_1406_rho_we0, ap_CS_fsm_state4, ap_CS_fsm_state19, ap_CS_fsm_state32, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state30, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            seedbuf_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            seedbuf_we0 <= grp_unpack_sk_fu_1406_rho_we0;
        else 
            seedbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    seedbuf_we1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state29, ap_CS_fsm_state19, ap_CS_fsm_state32, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state30, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            seedbuf_we1 <= ap_const_logic_1;
        else 
            seedbuf_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln48_fu_2634_p3 <= 
        ap_const_lv8_FF when (xor_ln48_fu_2628_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln52_fu_2670_p3 <= 
        ap_const_lv32_7FE001 when (tmp_34_fu_2662_p3(0) = '1') else 
        ap_const_lv32_0;
        sext_ln125_1_fu_2450_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_vec_coeffs_q0),32));

        sext_ln125_2_fu_2476_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_vec_coeffs_q0),32));

        sext_ln125_3_fu_2502_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_vec_coeffs_q0),32));

        sext_ln125_fu_2424_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_vec_coeffs_q0),32));

        sext_ln19_14_fu_2937_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln19_fu_2931_p2),64));

        sext_ln448_1_fu_2701_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1509_p4),29));

        sext_ln448_fu_1713_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1509_p4),29));

        sext_ln47_fu_2610_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln12_fu_2601_p4),9));

        sext_ln48_1_fu_2652_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a1_1_fu_2642_p2),32));

        sext_ln88_fu_3021_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_vec_coeffs_q0),32));

    shl_ln25_fu_1773_p3 <= (i_3_i_reg_902 & ap_const_lv3_0);
    shl_ln26_fu_1970_p3 <= (i_3_i1_reg_925 & ap_const_lv3_0);
    shl_ln27_fu_2024_p3 <= (trunc_ln31_fu_2020_p1 & ap_const_lv3_0);
    shl_ln301_fu_3168_p2 <= std_logic_vector(shift_left(unsigned(z_vec_coeffs_q0),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln31_fu_2036_p2 <= std_logic_vector(shift_left(unsigned(zext_ln31_19_fu_2016_p1),to_integer(unsigned('0' & zext_ln31_20_fu_2032_p1(31-1 downto 0)))));
    shl_ln450_1_fu_2726_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1F),to_integer(unsigned('0' & zext_ln450_4_fu_2722_p1(31-1 downto 0)))));
    shl_ln450_4_fu_2714_p3 <= (trunc_ln450_1_fu_2710_p1 & ap_const_lv3_0);
    shl_ln450_fu_1738_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1F),to_integer(unsigned('0' & zext_ln450_fu_1734_p1(31-1 downto 0)))));
    shl_ln541_1_fu_2091_p3 <= (i_3_i3_reg_960 & ap_const_lv3_0);
    shl_ln541_2_fu_2765_p3 <= (trunc_ln541_3_reg_3862 & ap_const_lv3_0);
    shl_ln_fu_1726_p3 <= (trunc_ln450_fu_1722_p1 & ap_const_lv3_0);
    sk_address0 <= grp_unpack_sk_fu_1406_sk_address0;
    sk_address1 <= grp_unpack_sk_fu_1406_sk_address1;
    sk_ce0 <= grp_unpack_sk_fu_1406_sk_ce0;
    sk_ce1 <= grp_unpack_sk_fu_1406_sk_ce1;

    sm_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state68, ap_CS_fsm_state76, grp_keccak_absorb_3_fu_1369_m_address0, grp_poly_challenge_fu_1383_seed_address0, grp_pack_sig_fu_1432_sig_address0, grp_polyveck_pack_w1_fu_1477_r_address0, ap_CS_fsm_state3, ap_CS_fsm_state64, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state120, zext_ln208_1_fu_1692_p1, zext_ln541_4_fu_2772_p1, ap_CS_fsm_state77, zext_ln544_4_fu_2803_p1, ap_CS_fsm_state78, zext_ln546_4_fu_2823_p1, zext_ln548_4_fu_2843_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            sm_address0 <= zext_ln548_4_fu_2843_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            sm_address0 <= zext_ln546_4_fu_2823_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            sm_address0 <= zext_ln544_4_fu_2803_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            sm_address0 <= zext_ln541_4_fu_2772_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sm_address0 <= zext_ln208_1_fu_1692_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            sm_address0 <= grp_polyveck_pack_w1_fu_1477_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            sm_address0 <= grp_pack_sig_fu_1432_sig_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            sm_address0 <= grp_poly_challenge_fu_1383_seed_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            sm_address0 <= grp_keccak_absorb_3_fu_1369_m_address0;
        else 
            sm_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    sm_address1_assign_proc : process(ap_CS_fsm_state76, grp_polyveck_pack_w1_fu_1477_r_address1, ap_CS_fsm_state64, ap_CS_fsm_state79, zext_ln542_4_fu_2783_p1, zext_ln543_4_fu_2793_p1, ap_CS_fsm_state77, zext_ln545_4_fu_2813_p1, ap_CS_fsm_state78, zext_ln547_4_fu_2833_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            sm_address1 <= zext_ln547_4_fu_2833_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            sm_address1 <= zext_ln545_4_fu_2813_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            sm_address1 <= zext_ln543_4_fu_2793_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            sm_address1 <= zext_ln542_4_fu_2783_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            sm_address1 <= grp_polyveck_pack_w1_fu_1477_r_address1;
        else 
            sm_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    sm_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state68, ap_CS_fsm_state76, grp_keccak_absorb_3_fu_1369_m_ce0, grp_poly_challenge_fu_1383_seed_ce0, grp_pack_sig_fu_1432_sig_ce0, grp_polyveck_pack_w1_fu_1477_r_ce0, ap_CS_fsm_state3, ap_CS_fsm_state64, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state120, ap_CS_fsm_state77, ap_CS_fsm_state78)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sm_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            sm_ce0 <= grp_polyveck_pack_w1_fu_1477_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            sm_ce0 <= grp_pack_sig_fu_1432_sig_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            sm_ce0 <= grp_poly_challenge_fu_1383_seed_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            sm_ce0 <= grp_keccak_absorb_3_fu_1369_m_ce0;
        else 
            sm_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sm_ce1_assign_proc : process(ap_CS_fsm_state76, grp_polyveck_pack_w1_fu_1477_r_ce1, ap_CS_fsm_state64, ap_CS_fsm_state79, ap_CS_fsm_state77, ap_CS_fsm_state78)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state79))) then 
            sm_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            sm_ce1 <= grp_polyveck_pack_w1_fu_1477_r_ce1;
        else 
            sm_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sm_d0_assign_proc : process(m_q0, ap_CS_fsm_state76, reg_1608, reg_1620, reg_1632, grp_pack_sig_fu_1432_sig_d0, grp_polyveck_pack_w1_fu_1477_r_d0, ap_CS_fsm_state3, ap_CS_fsm_state64, ap_CS_fsm_state79, ap_CS_fsm_state120, ap_CS_fsm_state77, ap_CS_fsm_state78, trunc_ln541_2_fu_2760_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            sm_d0 <= reg_1632;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            sm_d0 <= reg_1620;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            sm_d0 <= reg_1608;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            sm_d0 <= trunc_ln541_2_fu_2760_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sm_d0 <= m_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            sm_d0 <= grp_polyveck_pack_w1_fu_1477_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            sm_d0 <= grp_pack_sig_fu_1432_sig_d0;
        else 
            sm_d0 <= "XXXXXXXX";
        end if; 
    end process;


    sm_d1_assign_proc : process(reg_1602, ap_CS_fsm_state76, reg_1614, reg_1626, state_s_q0, grp_polyveck_pack_w1_fu_1477_r_d1, ap_CS_fsm_state64, ap_CS_fsm_state79, ap_CS_fsm_state77, ap_CS_fsm_state78)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            sm_d1 <= reg_1626;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            sm_d1 <= reg_1614;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            sm_d1 <= reg_1602;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            sm_d1 <= state_s_q0(15 downto 8);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            sm_d1 <= grp_polyveck_pack_w1_fu_1477_r_d1;
        else 
            sm_d1 <= "XXXXXXXX";
        end if; 
    end process;


    sm_we0_assign_proc : process(ap_CS_fsm_state76, grp_pack_sig_fu_1432_sig_we0, grp_polyveck_pack_w1_fu_1477_r_we0, ap_CS_fsm_state3, ap_CS_fsm_state64, ap_CS_fsm_state79, ap_CS_fsm_state120, ap_CS_fsm_state77, ap_CS_fsm_state78)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sm_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            sm_we0 <= grp_polyveck_pack_w1_fu_1477_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            sm_we0 <= grp_pack_sig_fu_1432_sig_we0;
        else 
            sm_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sm_we1_assign_proc : process(ap_CS_fsm_state76, grp_polyveck_pack_w1_fu_1477_r_we1, ap_CS_fsm_state64, ap_CS_fsm_state79, ap_CS_fsm_state77, ap_CS_fsm_state78)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state79))) then 
            sm_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            sm_we1 <= grp_polyveck_pack_w1_fu_1477_r_we1;
        else 
            sm_we1 <= ap_const_logic_0;
        end if; 
    end process;

    smlen <= std_logic_vector(unsigned(mlen) + unsigned(ap_const_lv64_974));

    smlen_ap_vld_assign_proc : process(icmp_ln158_reg_3978, tmp_s_reg_4039, tmp_5_reg_4043, ap_CS_fsm_state117, icmp_ln392_fu_3308_p2, icmp_ln173_fu_3332_p2)
    begin
        if (((icmp_ln392_fu_3308_p2 = ap_const_lv1_1) and (icmp_ln158_reg_3978 = ap_const_lv1_1) and (tmp_5_reg_4043 = ap_const_lv1_0) and (tmp_s_reg_4039 = ap_const_lv1_0) and (icmp_ln173_fu_3332_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state117))) then 
            smlen_ap_vld <= ap_const_logic_1;
        else 
            smlen_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    state_0_s_address0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, state_0_s_addr_4_reg_3599, grp_KeccakF1600_StatePer_fu_1399_state_0_address0, ap_CS_fsm_state24, ap_CS_fsm_state27, zext_ln363_1_fu_1949_p1, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            state_0_s_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            state_0_s_address0 <= state_0_s_addr_4_reg_3599;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            state_0_s_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            state_0_s_address0 <= zext_ln363_1_fu_1949_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            state_0_s_address0 <= grp_KeccakF1600_StatePer_fu_1399_state_0_address0;
        else 
            state_0_s_address0 <= "XXXXX";
        end if; 
    end process;


    state_0_s_address1_assign_proc : process(zext_ln416_reg_3556, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state28, grp_KeccakF1600_StatePer_fu_1399_state_0_address1, ap_CS_fsm_state27, zext_ln540_1_fu_2069_p1, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            state_0_s_address1 <= zext_ln540_1_fu_2069_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            state_0_s_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            state_0_s_address1 <= zext_ln416_reg_3556(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            state_0_s_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            state_0_s_address1 <= grp_KeccakF1600_StatePer_fu_1399_state_0_address1;
        else 
            state_0_s_address1 <= "XXXXX";
        end if; 
    end process;


    state_0_s_ce0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, grp_KeccakF1600_StatePer_fu_1399_state_0_ce0, ap_CS_fsm_state24, ap_CS_fsm_state27, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            state_0_s_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            state_0_s_ce0 <= grp_KeccakF1600_StatePer_fu_1399_state_0_ce0;
        else 
            state_0_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_0_s_ce1_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state28, grp_KeccakF1600_StatePer_fu_1399_state_0_ce1, ap_CS_fsm_state27, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            state_0_s_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            state_0_s_ce1 <= grp_KeccakF1600_StatePer_fu_1399_state_0_ce1;
        else 
            state_0_s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_0_s_d0_assign_proc : process(ap_CS_fsm_state20, grp_KeccakF1600_StatePer_fu_1399_state_0_d0, ap_CS_fsm_state24, ap_CS_fsm_state27, xor_ln417_fu_2048_p2, ap_CS_fsm_state25, xor_ln451_1_fu_2062_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            state_0_s_d0 <= xor_ln451_1_fu_2062_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            state_0_s_d0 <= xor_ln417_fu_2048_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            state_0_s_d0 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            state_0_s_d0 <= grp_KeccakF1600_StatePer_fu_1399_state_0_d0;
        else 
            state_0_s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_0_s_d1_assign_proc : process(grp_KeccakF1600_StatePer_fu_1399_state_0_d1, ap_CS_fsm_state27, ap_CS_fsm_state25, xor_ln450_1_fu_2055_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            state_0_s_d1 <= xor_ln450_1_fu_2055_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            state_0_s_d1 <= grp_KeccakF1600_StatePer_fu_1399_state_0_d1;
        else 
            state_0_s_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_0_s_we0_assign_proc : process(ap_CS_fsm_state20, grp_KeccakF1600_StatePer_fu_1399_state_0_we0, icmp_ln362_1_fu_1937_p2, ap_CS_fsm_state24, ap_CS_fsm_state27, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or ((icmp_ln362_1_fu_1937_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)))) then 
            state_0_s_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            state_0_s_we0 <= grp_KeccakF1600_StatePer_fu_1399_state_0_we0;
        else 
            state_0_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_0_s_we1_assign_proc : process(grp_KeccakF1600_StatePer_fu_1399_state_0_we1, ap_CS_fsm_state27, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            state_0_s_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            state_0_s_we1 <= grp_KeccakF1600_StatePer_fu_1399_state_0_we1;
        else 
            state_0_s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    state_s_addr_10_reg_3520 <= ap_const_lv64_10(5 - 1 downto 0);

    state_s_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state68, ap_CS_fsm_state5, state_s_addr_reg_3515, state_s_addr_10_reg_3520, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state65, state_s_addr_13_reg_3844, ap_CS_fsm_state75, grp_keccak_absorb_3_fu_1369_s_address0, grp_KeccakF1600_StatePer_1_fu_1392_state_address0, grp_keccak_absorb_4203_fu_1468_s_address0, icmp_ln362_fu_1696_p2, ap_CS_fsm_state14, icmp_ln362_2_fu_2684_p2, ap_CS_fsm_state74, ap_CS_fsm_state6, ap_CS_fsm_state66, zext_ln363_fu_1708_p1, zext_ln540_fu_1751_p1, zext_ln363_2_fu_2696_p1, zext_ln540_2_fu_2739_p1, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            state_s_address0 <= zext_ln540_2_fu_2739_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69))) then 
            state_s_address0 <= state_s_addr_13_reg_3844;
        elsif (((icmp_ln362_2_fu_2684_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state65))) then 
            state_s_address0 <= zext_ln363_2_fu_2696_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_s_address0 <= zext_ln540_fu_1751_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            state_s_address0 <= state_s_addr_10_reg_3520;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_s_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            state_s_address0 <= state_s_addr_reg_3515;
        elsif (((icmp_ln362_fu_1696_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_s_address0 <= zext_ln363_fu_1708_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            state_s_address0 <= grp_keccak_absorb_4203_fu_1468_s_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            state_s_address0 <= grp_KeccakF1600_StatePer_1_fu_1392_state_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            state_s_address0 <= grp_keccak_absorb_3_fu_1369_s_address0;
        else 
            state_s_address0 <= "XXXXX";
        end if; 
    end process;


    state_s_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state68, grp_keccak_absorb_3_fu_1369_s_address1, grp_KeccakF1600_StatePer_1_fu_1392_state_address1, ap_CS_fsm_state14, ap_CS_fsm_state74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            state_s_address1 <= grp_KeccakF1600_StatePer_1_fu_1392_state_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            state_s_address1 <= grp_keccak_absorb_3_fu_1369_s_address1;
        else 
            state_s_address1 <= "XXXXX";
        end if; 
    end process;


    state_s_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state68, ap_CS_fsm_state5, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state65, ap_CS_fsm_state75, grp_keccak_absorb_3_fu_1369_s_ce0, grp_KeccakF1600_StatePer_1_fu_1392_state_ce0, grp_keccak_absorb_4203_fu_1468_s_ce0, icmp_ln362_fu_1696_p2, ap_CS_fsm_state14, icmp_ln362_2_fu_2684_p2, ap_CS_fsm_state74, ap_CS_fsm_state6, ap_CS_fsm_state66, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((icmp_ln362_2_fu_2684_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state65)) or ((icmp_ln362_fu_1696_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            state_s_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            state_s_ce0 <= grp_keccak_absorb_4203_fu_1468_s_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            state_s_ce0 <= grp_KeccakF1600_StatePer_1_fu_1392_state_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            state_s_ce0 <= grp_keccak_absorb_3_fu_1369_s_ce0;
        else 
            state_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_s_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state68, grp_keccak_absorb_3_fu_1369_s_ce1, grp_KeccakF1600_StatePer_1_fu_1392_state_ce1, ap_CS_fsm_state14, ap_CS_fsm_state74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            state_s_ce1 <= grp_KeccakF1600_StatePer_1_fu_1392_state_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            state_s_ce1 <= grp_keccak_absorb_3_fu_1369_s_ce1;
        else 
            state_s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_s_d0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state68, ap_CS_fsm_state5, ap_CS_fsm_state65, grp_keccak_absorb_3_fu_1369_s_d0, grp_KeccakF1600_StatePer_1_fu_1392_state_d0, grp_keccak_absorb_4203_fu_1468_s_d0, icmp_ln362_fu_1696_p2, ap_CS_fsm_state14, icmp_ln362_2_fu_2684_p2, ap_CS_fsm_state74, ap_CS_fsm_state6, ap_CS_fsm_state66, ap_CS_fsm_state10, xor_ln450_fu_1744_p2, ap_CS_fsm_state12, grp_fu_1519_p2, ap_CS_fsm_state70, xor_ln450_2_fu_2732_p2, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            state_s_d0 <= xor_ln450_2_fu_2732_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            state_s_d0 <= grp_fu_1519_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_s_d0 <= xor_ln450_fu_1744_p2;
        elsif ((((icmp_ln362_2_fu_2684_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state65)) or ((icmp_ln362_fu_1696_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            state_s_d0 <= ap_const_lv64_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            state_s_d0 <= grp_keccak_absorb_4203_fu_1468_s_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            state_s_d0 <= grp_KeccakF1600_StatePer_1_fu_1392_state_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            state_s_d0 <= grp_keccak_absorb_3_fu_1369_s_d0;
        else 
            state_s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_s_d1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state68, grp_keccak_absorb_3_fu_1369_s_d1, grp_KeccakF1600_StatePer_1_fu_1392_state_d1, ap_CS_fsm_state14, ap_CS_fsm_state74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            state_s_d1 <= grp_KeccakF1600_StatePer_1_fu_1392_state_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            state_s_d1 <= grp_keccak_absorb_3_fu_1369_s_d1;
        else 
            state_s_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_s_we0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state68, ap_CS_fsm_state5, ap_CS_fsm_state65, grp_keccak_absorb_3_fu_1369_s_we0, grp_KeccakF1600_StatePer_1_fu_1392_state_we0, grp_keccak_absorb_4203_fu_1468_s_we0, icmp_ln362_fu_1696_p2, ap_CS_fsm_state14, icmp_ln362_2_fu_2684_p2, ap_CS_fsm_state74, ap_CS_fsm_state6, ap_CS_fsm_state66, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state70, ap_CS_fsm_state72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln362_2_fu_2684_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state65)) or ((icmp_ln362_fu_1696_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            state_s_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            state_s_we0 <= grp_keccak_absorb_4203_fu_1468_s_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            state_s_we0 <= grp_KeccakF1600_StatePer_1_fu_1392_state_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            state_s_we0 <= grp_keccak_absorb_3_fu_1369_s_we0;
        else 
            state_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_s_we1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state68, grp_keccak_absorb_3_fu_1369_s_we1, grp_KeccakF1600_StatePer_1_fu_1392_state_we1, ap_CS_fsm_state14, ap_CS_fsm_state74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            state_s_we1 <= grp_KeccakF1600_StatePer_1_fu_1392_state_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            state_s_we1 <= grp_keccak_absorb_3_fu_1369_s_we1;
        else 
            state_s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln109_fu_3243_p2 <= std_logic_vector(unsigned(w0_vec_coeffs_q0) - unsigned(h_vec_coeffs_q0));
    sub_ln208_1_fu_1687_p2 <= std_logic_vector(unsigned(add_ln208_1_reg_3484) - unsigned(trunc_ln207_fu_1658_p1));
    sub_ln208_fu_1677_p2 <= std_logic_vector(unsigned(add_ln208_reg_3479) - unsigned(trunc_ln207_1_fu_1662_p1));
    sub_ln48_fu_2614_p2 <= std_logic_vector(unsigned(ap_const_lv9_2B) - unsigned(sext_ln47_fu_2610_p1));
    sub_ln52_1_fu_2678_p2 <= std_logic_vector(signed(grp_fu_3453_p3) - signed(select_ln52_fu_2670_p3));
    sub_ln52_fu_2657_p2 <= std_logic_vector(unsigned(ap_const_lv32_3FF000) - unsigned(grp_fu_3453_p3));

    t0_vec_coeffs_address0_assign_proc : process(grp_unpack_sk_fu_1406_t0_vec_coeffs_address0, grp_ntt_fu_1447_a_address0, grp_polyveck_pointwise_p_fu_1484_v_vec_coeffs_address0, ap_CS_fsm_state4, ap_CS_fsm_state41, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            t0_vec_coeffs_address0 <= grp_polyveck_pointwise_p_fu_1484_v_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            t0_vec_coeffs_address0 <= grp_ntt_fu_1447_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t0_vec_coeffs_address0 <= grp_unpack_sk_fu_1406_t0_vec_coeffs_address0;
        else 
            t0_vec_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    t0_vec_coeffs_address1_assign_proc : process(grp_unpack_sk_fu_1406_t0_vec_coeffs_address1, grp_ntt_fu_1447_a_address1, ap_CS_fsm_state4, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            t0_vec_coeffs_address1 <= grp_ntt_fu_1447_a_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t0_vec_coeffs_address1 <= grp_unpack_sk_fu_1406_t0_vec_coeffs_address1;
        else 
            t0_vec_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    t0_vec_coeffs_ce0_assign_proc : process(grp_unpack_sk_fu_1406_t0_vec_coeffs_ce0, grp_ntt_fu_1447_a_ce0, grp_polyveck_pointwise_p_fu_1484_v_vec_coeffs_ce0, ap_CS_fsm_state4, ap_CS_fsm_state41, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            t0_vec_coeffs_ce0 <= grp_polyveck_pointwise_p_fu_1484_v_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            t0_vec_coeffs_ce0 <= grp_ntt_fu_1447_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t0_vec_coeffs_ce0 <= grp_unpack_sk_fu_1406_t0_vec_coeffs_ce0;
        else 
            t0_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t0_vec_coeffs_ce1_assign_proc : process(grp_unpack_sk_fu_1406_t0_vec_coeffs_ce1, grp_ntt_fu_1447_a_ce1, ap_CS_fsm_state4, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            t0_vec_coeffs_ce1 <= grp_ntt_fu_1447_a_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t0_vec_coeffs_ce1 <= grp_unpack_sk_fu_1406_t0_vec_coeffs_ce1;
        else 
            t0_vec_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    t0_vec_coeffs_d0_assign_proc : process(grp_unpack_sk_fu_1406_t0_vec_coeffs_d0, grp_ntt_fu_1447_a_d0, ap_CS_fsm_state4, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            t0_vec_coeffs_d0 <= grp_ntt_fu_1447_a_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t0_vec_coeffs_d0 <= grp_unpack_sk_fu_1406_t0_vec_coeffs_d0;
        else 
            t0_vec_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    t0_vec_coeffs_we0_assign_proc : process(grp_unpack_sk_fu_1406_t0_vec_coeffs_we0, grp_ntt_fu_1447_a_we0, ap_CS_fsm_state4, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            t0_vec_coeffs_we0 <= grp_ntt_fu_1447_a_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t0_vec_coeffs_we0 <= grp_unpack_sk_fu_1406_t0_vec_coeffs_we0;
        else 
            t0_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    t0_vec_coeffs_we1_assign_proc : process(grp_unpack_sk_fu_1406_t0_vec_coeffs_we1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t0_vec_coeffs_we1 <= grp_unpack_sk_fu_1406_t0_vec_coeffs_we1;
        else 
            t0_vec_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;

    t_16_fu_3160_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_35_fu_3152_p3(0) = '1') else 
        ap_const_lv32_0;
    t_17_fu_3180_p2 <= std_logic_vector(unsigned(z_vec_coeffs_q0) - unsigned(and_ln301_fu_3174_p2));
    t_fu_2921_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_3802001) * signed(trunc_ln18_fu_2917_p1))), 32));
    tmp_12_fu_2435_p3 <= (ap_const_lv56_1 & phi_ln125_1_reg_1055);
    tmp_13_fu_2461_p3 <= (ap_const_lv56_2 & phi_ln125_2_reg_1066);
    tmp_14_fu_2487_p3 <= (ap_const_lv56_3 & phi_ln125_3_reg_1077);
    tmp_15_fu_2543_p3 <= (i_0_i54_reg_1112 & ap_const_lv8_0);
    tmp_16_fu_2860_p3 <= (i_0_i78_reg_1156 & ap_const_lv8_0);
    tmp_17_fu_2982_p3 <= (i_0_i86_reg_1190 & ap_const_lv8_0);
    tmp_18_fu_3044_p3 <= (i_0_i94_reg_1212 & ap_const_lv8_0);
    tmp_19_fu_3114_p3 <= (i_0_i85_reg_1234 & ap_const_lv8_0);
    tmp_20_fu_3204_p3 <= (i_0_i101_reg_1256 & ap_const_lv8_0);
    tmp_21_fu_3262_p3 <= (i_0_i109_reg_1278 & ap_const_lv8_0);
    tmp_22_fu_3320_p3 <= (i_0_i87_reg_1300 & ap_const_lv8_0);
    tmp_34_fu_2662_p3 <= sub_ln52_fu_2657_p2(31 downto 31);
    tmp_35_fu_3152_p3 <= z_vec_coeffs_q0(31 downto 31);
    tmp_fu_2620_p3 <= sub_ln48_fu_2614_p2(8 downto 8);
    trunc_ln11_fu_2587_p4 <= add_ln42_fu_2581_p2(31 downto 7);
    trunc_ln12_fu_2601_p4 <= grp_fu_3444_p3(31 downto 24);
    trunc_ln13_fu_3088_p4 <= add_ln36_fu_3082_p2(31 downto 23);
    trunc_ln18_fu_2917_p1 <= mul_ln181_fu_2911_p2(32 - 1 downto 0);
    trunc_ln207_1_fu_1662_p1 <= i_0_reg_880(13 - 1 downto 0);
    trunc_ln207_fu_1658_p1 <= i_0_reg_880(14 - 1 downto 0);
    trunc_ln208_1_fu_1648_p1 <= mlen(14 - 1 downto 0);
    trunc_ln208_fu_1638_p1 <= mlen(13 - 1 downto 0);
    trunc_ln22_fu_2350_p1 <= i_0_i_reg_972(2 - 1 downto 0);
    trunc_ln31_fu_2020_p1 <= i_0_i5_i_reg_936(3 - 1 downto 0);
    trunc_ln450_1_fu_2710_p1 <= reg_1598(3 - 1 downto 0);
    trunc_ln450_fu_1722_p1 <= reg_1598(3 - 1 downto 0);
    trunc_ln541_1_fu_2086_p1 <= state_0_s_q1(8 - 1 downto 0);
    trunc_ln541_2_fu_2760_p1 <= state_s_q0(8 - 1 downto 0);
    trunc_ln541_3_fu_2756_p1 <= i_3_i47_reg_1145(2 - 1 downto 0);
    trunc_ln541_fu_1768_p1 <= state_s_q0(8 - 1 downto 0);

    w0_vec_coeffs_address0_assign_proc : process(zext_ln226_1_reg_3826, ap_CS_fsm_state101, w0_vec_coeffs_addr_1_reg_4029, ap_CS_fsm_state105, ap_CS_fsm_state114, w0_vec_coeffs_addr_2_reg_4068, ap_CS_fsm_state118, zext_ln249_1_fu_3365_p1, grp_polyveck_chknorm_fu_1491_v_vec_coeffs_address0, grp_polyveck_caddq_fu_1499_v_vec_coeffs_address0, grp_polyveck_reduce_fu_1504_v_vec_coeffs_address0, ap_CS_fsm_state63, ap_CS_fsm_state102, ap_CS_fsm_state115, ap_CS_fsm_state116, ap_CS_fsm_state103, zext_ln109_1_fu_3237_p1, zext_ln88_6_fu_3295_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            w0_vec_coeffs_address0 <= zext_ln249_1_fu_3365_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state115)) then 
            w0_vec_coeffs_address0 <= w0_vec_coeffs_addr_2_reg_4068;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            w0_vec_coeffs_address0 <= zext_ln88_6_fu_3295_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            w0_vec_coeffs_address0 <= w0_vec_coeffs_addr_1_reg_4029;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            w0_vec_coeffs_address0 <= zext_ln109_1_fu_3237_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            w0_vec_coeffs_address0 <= zext_ln226_1_reg_3826(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            w0_vec_coeffs_address0 <= grp_polyveck_reduce_fu_1504_v_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state116)) then 
            w0_vec_coeffs_address0 <= grp_polyveck_caddq_fu_1499_v_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            w0_vec_coeffs_address0 <= grp_polyveck_chknorm_fu_1491_v_vec_coeffs_address0;
        else 
            w0_vec_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    w0_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state101, ap_CS_fsm_state105, ap_CS_fsm_state114, ap_CS_fsm_state118, grp_polyveck_chknorm_fu_1491_v_vec_coeffs_ce0, grp_polyveck_caddq_fu_1499_v_vec_coeffs_ce0, grp_polyveck_reduce_fu_1504_v_vec_coeffs_ce0, ap_CS_fsm_state63, ap_CS_fsm_state102, ap_CS_fsm_state115, ap_CS_fsm_state116, ap_CS_fsm_state103)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state118) or (ap_const_logic_1 = ap_CS_fsm_state114) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state63))) then 
            w0_vec_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            w0_vec_coeffs_ce0 <= grp_polyveck_reduce_fu_1504_v_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state116)) then 
            w0_vec_coeffs_ce0 <= grp_polyveck_caddq_fu_1499_v_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            w0_vec_coeffs_ce0 <= grp_polyveck_chknorm_fu_1491_v_vec_coeffs_ce0;
        else 
            w0_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w0_vec_coeffs_d0_assign_proc : process(grp_polyveck_caddq_fu_1499_v_vec_coeffs_d0, grp_polyveck_reduce_fu_1504_v_vec_coeffs_d0, ap_CS_fsm_state63, ap_CS_fsm_state102, ap_CS_fsm_state115, ap_CS_fsm_state116, ap_CS_fsm_state103, sub_ln52_1_fu_2678_p2, sub_ln109_fu_3243_p2, add_ln88_2_fu_3301_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state115)) then 
            w0_vec_coeffs_d0 <= add_ln88_2_fu_3301_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            w0_vec_coeffs_d0 <= sub_ln109_fu_3243_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            w0_vec_coeffs_d0 <= sub_ln52_1_fu_2678_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            w0_vec_coeffs_d0 <= grp_polyveck_reduce_fu_1504_v_vec_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state116)) then 
            w0_vec_coeffs_d0 <= grp_polyveck_caddq_fu_1499_v_vec_coeffs_d0;
        else 
            w0_vec_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    w0_vec_coeffs_we0_assign_proc : process(grp_polyveck_caddq_fu_1499_v_vec_coeffs_we0, grp_polyveck_reduce_fu_1504_v_vec_coeffs_we0, ap_CS_fsm_state63, ap_CS_fsm_state102, ap_CS_fsm_state115, ap_CS_fsm_state116, ap_CS_fsm_state103)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state63))) then 
            w0_vec_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            w0_vec_coeffs_we0 <= grp_polyveck_reduce_fu_1504_v_vec_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state116)) then 
            w0_vec_coeffs_we0 <= grp_polyveck_caddq_fu_1499_v_vec_coeffs_we0;
        else 
            w0_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w1_vec_coeffs_address0_assign_proc : process(ap_CS_fsm_state62, zext_ln226_1_fu_2576_p1, w1_vec_coeffs_addr_reg_3831, ap_CS_fsm_state118, zext_ln249_1_fu_3365_p1, grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_address0, grp_polyvecl_pointwise_a_fu_1459_w_coeffs_address0, grp_polyveck_pack_w1_fu_1477_w1_vec_coeffs_address0, grp_polyveck_caddq_fu_1499_v_vec_coeffs_address0, grp_polyveck_reduce_fu_1504_v_vec_coeffs_address0, ap_CS_fsm_state55, ap_CS_fsm_state60, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state58, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            w1_vec_coeffs_address0 <= zext_ln249_1_fu_3365_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            w1_vec_coeffs_address0 <= w1_vec_coeffs_addr_reg_3831;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            w1_vec_coeffs_address0 <= zext_ln226_1_fu_2576_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            w1_vec_coeffs_address0 <= grp_polyveck_reduce_fu_1504_v_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            w1_vec_coeffs_address0 <= grp_polyveck_caddq_fu_1499_v_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            w1_vec_coeffs_address0 <= grp_polyveck_pack_w1_fu_1477_w1_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            w1_vec_coeffs_address0 <= grp_polyvecl_pointwise_a_fu_1459_w_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            w1_vec_coeffs_address0 <= grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_address0;
        else 
            w1_vec_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    w1_vec_coeffs_address1_assign_proc : process(grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_address1, grp_polyveck_pack_w1_fu_1477_w1_vec_coeffs_address1, ap_CS_fsm_state64, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            w1_vec_coeffs_address1 <= grp_polyveck_pack_w1_fu_1477_w1_vec_coeffs_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            w1_vec_coeffs_address1 <= grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_address1;
        else 
            w1_vec_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    w1_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state62, ap_CS_fsm_state118, grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_ce0, grp_polyvecl_pointwise_a_fu_1459_w_coeffs_ce0, grp_polyveck_pack_w1_fu_1477_w1_vec_coeffs_ce0, grp_polyveck_caddq_fu_1499_v_vec_coeffs_ce0, grp_polyveck_reduce_fu_1504_v_vec_coeffs_ce0, ap_CS_fsm_state55, ap_CS_fsm_state60, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state58, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state118) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state63))) then 
            w1_vec_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            w1_vec_coeffs_ce0 <= grp_polyveck_reduce_fu_1504_v_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            w1_vec_coeffs_ce0 <= grp_polyveck_caddq_fu_1499_v_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            w1_vec_coeffs_ce0 <= grp_polyveck_pack_w1_fu_1477_w1_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            w1_vec_coeffs_ce0 <= grp_polyvecl_pointwise_a_fu_1459_w_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            w1_vec_coeffs_ce0 <= grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_ce0;
        else 
            w1_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w1_vec_coeffs_ce1_assign_proc : process(grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_ce1, grp_polyveck_pack_w1_fu_1477_w1_vec_coeffs_ce1, ap_CS_fsm_state64, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            w1_vec_coeffs_ce1 <= grp_polyveck_pack_w1_fu_1477_w1_vec_coeffs_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            w1_vec_coeffs_ce1 <= grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_ce1;
        else 
            w1_vec_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    w1_vec_coeffs_d0_assign_proc : process(grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_d0, grp_polyvecl_pointwise_a_fu_1459_w_coeffs_d0, grp_polyveck_caddq_fu_1499_v_vec_coeffs_d0, grp_polyveck_reduce_fu_1504_v_vec_coeffs_d0, ap_CS_fsm_state55, ap_CS_fsm_state60, ap_CS_fsm_state63, ap_CS_fsm_state58, ap_CS_fsm_state56, sext_ln48_1_fu_2652_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            w1_vec_coeffs_d0 <= sext_ln48_1_fu_2652_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            w1_vec_coeffs_d0 <= grp_polyveck_reduce_fu_1504_v_vec_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            w1_vec_coeffs_d0 <= grp_polyveck_caddq_fu_1499_v_vec_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            w1_vec_coeffs_d0 <= grp_polyvecl_pointwise_a_fu_1459_w_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            w1_vec_coeffs_d0 <= grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_d0;
        else 
            w1_vec_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    w1_vec_coeffs_we0_assign_proc : process(grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_we0, grp_polyvecl_pointwise_a_fu_1459_w_coeffs_we0, grp_polyveck_caddq_fu_1499_v_vec_coeffs_we0, grp_polyveck_reduce_fu_1504_v_vec_coeffs_we0, ap_CS_fsm_state55, ap_CS_fsm_state60, ap_CS_fsm_state63, ap_CS_fsm_state58, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            w1_vec_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            w1_vec_coeffs_we0 <= grp_polyveck_reduce_fu_1504_v_vec_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            w1_vec_coeffs_we0 <= grp_polyveck_caddq_fu_1499_v_vec_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            w1_vec_coeffs_we0 <= grp_polyvecl_pointwise_a_fu_1459_w_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            w1_vec_coeffs_we0 <= grp_polyveck_invntt_tomo_fu_1416_v_vec_coeffs_we0;
        else 
            w1_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln417_fu_2048_p2 <= (state_0_s_q1 xor r_0_i6_i_reg_948);
    xor_ln450_1_fu_2055_p2 <= (state_0_s_q0 xor ap_const_lv64_1F);
    xor_ln450_2_fu_2732_p2 <= (state_s_q0 xor shl_ln450_1_fu_2726_p2);
    xor_ln450_fu_1744_p2 <= (state_s_q0 xor shl_ln450_fu_1738_p2);
    xor_ln451_1_fu_2062_p2 <= (state_0_s_q1 xor ap_const_lv64_8000000000000000);
    xor_ln48_fu_2628_p2 <= (tmp_fu_2620_p3 xor ap_const_lv1_1);
    xor_ln69_fu_3423_p2 <= (or_ln69_1_fu_3417_p2 xor ap_const_lv1_1);

    y_vec_coeffs_address0_assign_proc : process(ap_CS_fsm_state44, zext_ln125_fu_2413_p1, ap_CS_fsm_state46, tmp_12_fu_2435_p3, ap_CS_fsm_state48, tmp_13_fu_2461_p3, ap_CS_fsm_state50, tmp_14_fu_2487_p3, ap_CS_fsm_state89, grp_polyvecl_uniform_gam_fu_1359_v_vec_coeffs_address0, ap_CS_fsm_state43, zext_ln88_4_fu_3015_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            y_vec_coeffs_address0 <= zext_ln88_4_fu_3015_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            y_vec_coeffs_address0 <= tmp_14_fu_2487_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            y_vec_coeffs_address0 <= tmp_13_fu_2461_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            y_vec_coeffs_address0 <= tmp_12_fu_2435_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            y_vec_coeffs_address0 <= zext_ln125_fu_2413_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            y_vec_coeffs_address0 <= grp_polyvecl_uniform_gam_fu_1359_v_vec_coeffs_address0;
        else 
            y_vec_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    y_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state50, ap_CS_fsm_state89, grp_polyvecl_uniform_gam_fu_1359_v_vec_coeffs_ce0, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            y_vec_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            y_vec_coeffs_ce0 <= grp_polyvecl_uniform_gam_fu_1359_v_vec_coeffs_ce0;
        else 
            y_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_vec_coeffs_we0_assign_proc : process(grp_polyvecl_uniform_gam_fu_1359_v_vec_coeffs_we0, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            y_vec_coeffs_we0 <= grp_polyvecl_uniform_gam_fu_1359_v_vec_coeffs_we0;
        else 
            y_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    z_vec_coeffs_address0_assign_proc : process(zext_ln125_reg_3718, tmp_12_reg_3737, tmp_13_reg_3756, tmp_14_reg_3775, zext_ln181_17_reg_3898, ap_CS_fsm_state89, z_vec_coeffs_addr_5_reg_3947, ap_CS_fsm_state92, z_vec_coeffs_addr_6_reg_3973, ap_CS_fsm_state95, grp_invntt_tomont_fu_1423_a_address0, grp_pack_sig_fu_1432_z_vec_coeffs_address0, grp_ntt_fu_1447_a_address0, grp_polyvecl_pointwise_a_fu_1459_v_vec_coeffs_address0, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state55, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state90, ap_CS_fsm_state93, ap_CS_fsm_state120, zext_ln88_4_fu_3015_p1, zext_ln33_2_fu_3077_p1, zext_ln300_2_fu_3147_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            z_vec_coeffs_address0 <= zext_ln300_2_fu_3147_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            z_vec_coeffs_address0 <= z_vec_coeffs_addr_6_reg_3973;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            z_vec_coeffs_address0 <= zext_ln33_2_fu_3077_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            z_vec_coeffs_address0 <= z_vec_coeffs_addr_5_reg_3947;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            z_vec_coeffs_address0 <= zext_ln88_4_fu_3015_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            z_vec_coeffs_address0 <= zext_ln181_17_reg_3898(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            z_vec_coeffs_address0 <= tmp_14_reg_3775(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            z_vec_coeffs_address0 <= tmp_13_reg_3756(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            z_vec_coeffs_address0 <= tmp_12_reg_3737(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            z_vec_coeffs_address0 <= zext_ln125_reg_3718(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            z_vec_coeffs_address0 <= grp_polyvecl_pointwise_a_fu_1459_v_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            z_vec_coeffs_address0 <= grp_ntt_fu_1447_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            z_vec_coeffs_address0 <= grp_pack_sig_fu_1432_z_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            z_vec_coeffs_address0 <= grp_invntt_tomont_fu_1423_a_address0;
        else 
            z_vec_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    z_vec_coeffs_address1_assign_proc : process(grp_invntt_tomont_fu_1423_a_address1, grp_ntt_fu_1447_a_address1, ap_CS_fsm_state53, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            z_vec_coeffs_address1 <= grp_ntt_fu_1447_a_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            z_vec_coeffs_address1 <= grp_invntt_tomont_fu_1423_a_address1;
        else 
            z_vec_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    z_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state89, ap_CS_fsm_state92, ap_CS_fsm_state95, grp_invntt_tomont_fu_1423_a_ce0, grp_pack_sig_fu_1432_z_vec_coeffs_ce0, grp_ntt_fu_1447_a_ce0, grp_polyvecl_pointwise_a_fu_1459_v_vec_coeffs_ce0, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state55, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state90, ap_CS_fsm_state93, ap_CS_fsm_state120)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            z_vec_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            z_vec_coeffs_ce0 <= grp_polyvecl_pointwise_a_fu_1459_v_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            z_vec_coeffs_ce0 <= grp_ntt_fu_1447_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            z_vec_coeffs_ce0 <= grp_pack_sig_fu_1432_z_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            z_vec_coeffs_ce0 <= grp_invntt_tomont_fu_1423_a_ce0;
        else 
            z_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    z_vec_coeffs_ce1_assign_proc : process(grp_invntt_tomont_fu_1423_a_ce1, grp_ntt_fu_1447_a_ce1, ap_CS_fsm_state53, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            z_vec_coeffs_ce1 <= grp_ntt_fu_1447_a_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            z_vec_coeffs_ce1 <= grp_invntt_tomont_fu_1423_a_ce1;
        else 
            z_vec_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    z_vec_coeffs_d0_assign_proc : process(grp_invntt_tomont_fu_1423_a_d0, grp_ntt_fu_1447_a_d0, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state90, ap_CS_fsm_state93, sext_ln125_fu_2424_p1, sext_ln125_1_fu_2450_p1, sext_ln125_2_fu_2476_p1, sext_ln125_3_fu_2502_p1, add_ln88_fu_3025_p2, grp_fu_3463_p3, add_ln19_fu_2941_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            z_vec_coeffs_d0 <= grp_fu_3463_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            z_vec_coeffs_d0 <= add_ln88_fu_3025_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            z_vec_coeffs_d0 <= add_ln19_fu_2941_p2(63 downto 32);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            z_vec_coeffs_d0 <= sext_ln125_3_fu_2502_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            z_vec_coeffs_d0 <= sext_ln125_2_fu_2476_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            z_vec_coeffs_d0 <= sext_ln125_1_fu_2450_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            z_vec_coeffs_d0 <= sext_ln125_fu_2424_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            z_vec_coeffs_d0 <= grp_ntt_fu_1447_a_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            z_vec_coeffs_d0 <= grp_invntt_tomont_fu_1423_a_d0;
        else 
            z_vec_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    z_vec_coeffs_we0_assign_proc : process(grp_invntt_tomont_fu_1423_a_we0, grp_ntt_fu_1447_a_we0, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state90, ap_CS_fsm_state93)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            z_vec_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            z_vec_coeffs_we0 <= grp_ntt_fu_1447_a_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            z_vec_coeffs_we0 <= grp_invntt_tomont_fu_1423_a_we0;
        else 
            z_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln104_fu_3212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_3204_p3),12));
    zext_ln109_1_fu_3237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln109_fu_3232_p2),64));
    zext_ln109_fu_3228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i102_reg_1267),12));
    zext_ln125_fu_2413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln125_reg_1044),64));
    zext_ln176_fu_2868_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_2860_p3),12));
    zext_ln181_16_fu_2889_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i79_reg_1167),12));
    zext_ln181_17_fu_2898_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln181_fu_2893_p2),64));
    zext_ln181_fu_2884_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i79_reg_1167),64));
    zext_ln208_1_fu_1692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln208_1_reg_3502),64));
    zext_ln208_fu_1682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln208_fu_1677_p2),64));
    zext_ln221_fu_2551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_2543_p3),12));
    zext_ln226_1_fu_2576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln226_fu_2571_p2),64));
    zext_ln226_fu_2567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i55_reg_1123),12));
    zext_ln244_fu_3328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_3320_p3),12));
    zext_ln248_fu_3371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(s_0_i_i_reg_1334),11));
    zext_ln249_1_fu_3365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln249_fu_3360_p2),64));
    zext_ln249_fu_3356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i88_reg_1323),12));
    zext_ln26_fu_1978_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln26_fu_1970_p3),8));
    zext_ln287_fu_3122_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_3114_p3),12));
    zext_ln28_fu_3052_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_3044_p3),12));
    zext_ln300_2_fu_3147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln300_fu_3142_p2),64));
    zext_ln300_fu_3138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i86_reg_1245),12));
    zext_ln31_18_fu_2011_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_fu_2006_p2),64));
    zext_ln31_19_fu_2016_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(seedbuf_q0),64));
    zext_ln31_20_fu_2032_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln27_fu_2024_p3),64));
    zext_ln31_fu_2002_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_1994_p3),8));
    zext_ln33_2_fu_3077_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln33_fu_3072_p2),64));
    zext_ln33_fu_3068_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i95_reg_1223),12));
    zext_ln363_1_fu_1949_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_i_reg_914),64));
    zext_ln363_2_fu_2696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i58_reg_1134),64));
    zext_ln363_fu_1708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_reg_891),64));
    zext_ln416_fu_1954_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_i1_reg_925),64));
    zext_ln450_3_fu_1717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln448_fu_1713_p1),64));
    zext_ln450_4_fu_2722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln450_4_fu_2714_p3),64));
    zext_ln450_5_fu_2705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln448_1_fu_2701_p1),64));
    zext_ln450_fu_1734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_1726_p3),64));
    zext_ln540_1_fu_2069_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_i3_reg_960),64));
    zext_ln540_2_fu_2739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_i47_reg_1145),64));
    zext_ln540_fu_1751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_i_reg_902),64));
    zext_ln541_1_fu_1791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln541_fu_1785_p2),64));
    zext_ln541_2_fu_2099_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln541_1_fu_2091_p3),8));
    zext_ln541_3_fu_2109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln541_1_fu_2103_p2),64));
    zext_ln541_4_fu_2772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln541_2_fu_2765_p3),64));
    zext_ln541_fu_1781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln25_fu_1773_p3),8));
    zext_ln542_1_fu_1812_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln542_fu_1806_p2),64));
    zext_ln542_2_fu_2131_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln542_1_fu_2125_p2),8));
    zext_ln542_3_fu_2141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln542_1_fu_2135_p2),64));
    zext_ln542_4_fu_2783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln542_2_fu_2777_p2),64));
    zext_ln542_fu_1802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln542_fu_1796_p2),8));
    zext_ln543_1_fu_1832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln543_fu_1826_p2),64));
    zext_ln543_2_fu_2211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln543_1_fu_2206_p2),8));
    zext_ln543_3_fu_2221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln543_1_fu_2215_p2),64));
    zext_ln543_4_fu_2793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln543_2_fu_2788_p2),64));
    zext_ln543_fu_1822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln543_fu_1817_p2),8));
    zext_ln544_1_fu_1852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln544_fu_1846_p2),64));
    zext_ln544_2_fu_2231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln544_1_fu_2226_p2),8));
    zext_ln544_3_fu_2241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln544_1_fu_2235_p2),64));
    zext_ln544_4_fu_2803_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln544_2_fu_2798_p2),64));
    zext_ln544_fu_1842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln544_fu_1837_p2),8));
    zext_ln545_1_fu_1872_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln545_fu_1866_p2),64));
    zext_ln545_2_fu_2251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln545_1_fu_2246_p2),8));
    zext_ln545_3_fu_2261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln545_1_fu_2255_p2),64));
    zext_ln545_4_fu_2813_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln545_2_fu_2808_p2),64));
    zext_ln545_fu_1862_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln545_fu_1857_p2),8));
    zext_ln546_1_fu_1892_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln546_fu_1886_p2),64));
    zext_ln546_2_fu_2271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln546_1_fu_2266_p2),8));
    zext_ln546_3_fu_2281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln546_1_fu_2275_p2),64));
    zext_ln546_4_fu_2823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln546_2_fu_2818_p2),64));
    zext_ln546_fu_1882_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln546_fu_1877_p2),8));
    zext_ln547_1_fu_1912_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln547_fu_1906_p2),64));
    zext_ln547_2_fu_2291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln547_1_fu_2286_p2),8));
    zext_ln547_3_fu_2301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln547_1_fu_2295_p2),64));
    zext_ln547_4_fu_2833_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln547_2_fu_2828_p2),64));
    zext_ln547_fu_1902_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln547_fu_1897_p2),8));
    zext_ln548_1_fu_1932_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln548_fu_1926_p2),64));
    zext_ln548_2_fu_2311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln548_1_fu_2306_p2),8));
    zext_ln548_3_fu_2321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln548_1_fu_2315_p2),64));
    zext_ln548_4_fu_2843_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln548_2_fu_2838_p2),64));
    zext_ln548_fu_1922_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln548_fu_1917_p2),8));
    zext_ln69_1_fu_3433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln69_fu_3423_p2),32));
    zext_ln69_fu_3429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln69_fu_3423_p2),9));
    zext_ln83_1_fu_3270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_3262_p3),12));
    zext_ln83_fu_2990_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_2982_p3),12));
    zext_ln88_4_fu_3015_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln88_3_fu_3010_p2),64));
    zext_ln88_5_fu_3286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i110_reg_1289),12));
    zext_ln88_6_fu_3295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln88_4_fu_3290_p2),64));
    zext_ln88_fu_3006_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i87_reg_1201),12));
end behav;
