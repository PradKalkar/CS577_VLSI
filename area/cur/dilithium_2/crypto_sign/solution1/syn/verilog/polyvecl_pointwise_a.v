// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module polyvecl_pointwise_a (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        w_coeffs_address0,
        w_coeffs_ce0,
        w_coeffs_we0,
        w_coeffs_d0,
        w_coeffs_q0,
        w_coeffs_offset,
        u_vec_coeffs_address0,
        u_vec_coeffs_ce0,
        u_vec_coeffs_q0,
        v_vec_coeffs_address0,
        v_vec_coeffs_ce0,
        v_vec_coeffs_q0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] w_coeffs_address0;
output   w_coeffs_ce0;
output   w_coeffs_we0;
output  [31:0] w_coeffs_d0;
input  [31:0] w_coeffs_q0;
input  [2:0] w_coeffs_offset;
output  [11:0] u_vec_coeffs_address0;
output   u_vec_coeffs_ce0;
input  [22:0] u_vec_coeffs_q0;
output  [9:0] v_vec_coeffs_address0;
output   v_vec_coeffs_ce0;
input  [31:0] v_vec_coeffs_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] w_coeffs_address0;
reg w_coeffs_ce0;
reg w_coeffs_we0;
reg[31:0] w_coeffs_d0;
reg[11:0] u_vec_coeffs_address0;
reg u_vec_coeffs_ce0;
reg[9:0] v_vec_coeffs_address0;
reg v_vec_coeffs_ce0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [11:0] zext_ln181_2_fu_201_p1;
reg   [11:0] zext_ln181_2_reg_517;
wire   [5:0] zext_ln181_3_cast_fu_213_p1;
reg   [5:0] zext_ln181_3_cast_reg_523;
wire   [8:0] i_14_fu_223_p2;
reg   [8:0] i_14_reg_531;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln180_fu_217_p2;
wire   [13:0] tmp_26_cast_fu_340_p3;
reg   [13:0] tmp_26_cast_reg_549;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln137_fu_325_p2;
wire   [11:0] zext_ln176_fu_356_p1;
reg   [11:0] zext_ln176_reg_554;
wire   [8:0] i_15_fu_366_p2;
reg   [8:0] i_15_reg_562;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln180_1_fu_360_p2;
wire   [8:0] i_16_fu_474_p2;
reg   [8:0] i_16_reg_580;
wire    ap_CS_fsm_state7;
reg   [9:0] w_coeffs_addr_1_reg_585;
wire   [0:0] icmp_ln87_fu_468_p2;
wire   [2:0] i_fu_499_p2;
reg   [7:0] t_coeffs_address0;
reg    t_coeffs_ce0;
reg    t_coeffs_we0;
wire   [31:0] t_coeffs_d0;
wire   [31:0] t_coeffs_q0;
reg   [8:0] i_0_i_reg_146;
wire    ap_CS_fsm_state3;
reg   [2:0] i_0_reg_158;
reg   [8:0] i_0_i1_reg_170;
wire    ap_CS_fsm_state6;
reg   [8:0] i_0_i20_reg_182;
wire    ap_CS_fsm_state8;
wire   [63:0] zext_ln181_4_fu_243_p1;
wire   [63:0] zext_ln181_fu_229_p1;
wire   [63:0] zext_ln181_5_fu_257_p1;
wire   [63:0] zext_ln181_10_fu_385_p1;
wire   [63:0] zext_ln181_11_fu_395_p1;
wire   [63:0] zext_ln181_1_fu_400_p1;
wire   [63:0] zext_ln88_2_fu_494_p1;
wire   [63:0] zext_ln88_fu_480_p1;
wire  signed [31:0] t_1_fu_320_p1;
wire   [31:0] add_ln88_fu_505_p2;
wire   [10:0] tmp_fu_193_p3;
wire   [4:0] tmp_s_fu_205_p3;
wire   [12:0] tmp_7_fu_234_p4;
wire   [11:0] zext_ln181_3_fu_248_p1;
wire   [11:0] add_ln181_fu_252_p2;
wire   [22:0] mul_ln181_fu_270_p0;
wire  signed [31:0] mul_ln181_fu_270_p1;
wire  signed [54:0] mul_ln181_fu_270_p2;
wire  signed [31:0] trunc_ln18_fu_280_p1;
wire   [31:0] t_fu_284_p2;
wire  signed [31:0] mul_ln19_fu_294_p1;
wire   [54:0] mul_ln19_fu_294_p2;
wire  signed [55:0] sext_ln181_1_fu_276_p1;
wire  signed [55:0] sext_ln19_1_fu_300_p1;
wire   [55:0] add_ln19_fu_304_p2;
wire   [23:0] tmp_1_fu_310_p4;
wire   [5:0] zext_ln181_7_fu_331_p1;
wire   [5:0] add_ln181_1_fu_335_p2;
wire   [10:0] tmp_8_fu_348_p3;
wire   [13:0] zext_ln181_9_fu_376_p1;
wire   [13:0] add_ln181_2_fu_380_p2;
wire   [11:0] zext_ln181_8_fu_372_p1;
wire   [11:0] add_ln181_3_fu_390_p2;
wire   [22:0] mul_ln181_1_fu_413_p0;
wire  signed [31:0] mul_ln181_1_fu_413_p1;
wire  signed [54:0] mul_ln181_1_fu_413_p2;
wire  signed [31:0] trunc_ln18_1_fu_423_p1;
wire   [31:0] t_2_fu_427_p2;
wire  signed [31:0] mul_ln19_1_fu_437_p1;
wire   [54:0] mul_ln19_1_fu_437_p2;
wire  signed [55:0] sext_ln181_3_fu_419_p1;
wire  signed [55:0] sext_ln19_4_fu_443_p1;
wire   [55:0] add_ln19_1_fu_447_p2;
wire   [23:0] tmp_2_fu_453_p4;
wire   [11:0] zext_ln88_1_fu_485_p1;
wire   [11:0] add_ln88_1_fu_489_p2;
reg   [7:0] ap_NS_fsm;
wire   [54:0] mul_ln181_1_fu_413_p00;
wire   [54:0] mul_ln181_fu_270_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

polyvecl_pointwishbi #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
t_coeffs_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(t_coeffs_address0),
    .ce0(t_coeffs_ce0),
    .we0(t_coeffs_we0),
    .d0(t_coeffs_d0),
    .q0(t_coeffs_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_0_i1_reg_170 <= i_15_reg_562;
    end else if (((icmp_ln137_fu_325_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_i1_reg_170 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln180_1_fu_360_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_0_i20_reg_182 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i_0_i20_reg_182 <= i_16_reg_580;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_i_reg_146 <= i_14_reg_531;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_i_reg_146 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln180_fu_217_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_158 <= 3'd1;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln87_fu_468_p2 == 1'd1))) begin
        i_0_reg_158 <= i_fu_499_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_14_reg_531 <= i_14_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_15_reg_562 <= i_15_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_16_reg_580 <= i_16_fu_474_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln137_fu_325_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_26_cast_reg_549[13 : 8] <= tmp_26_cast_fu_340_p3[13 : 8];
        zext_ln176_reg_554[10 : 8] <= zext_ln176_fu_356_p1[10 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln87_fu_468_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        w_coeffs_addr_1_reg_585 <= zext_ln88_2_fu_494_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        zext_ln181_2_reg_517[10 : 8] <= zext_ln181_2_fu_201_p1[10 : 8];
        zext_ln181_3_cast_reg_523[4 : 2] <= zext_ln181_3_cast_fu_213_p1[4 : 2];
    end
end

always @ (*) begin
    if ((((icmp_ln137_fu_325_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln137_fu_325_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        t_coeffs_address0 = zext_ln88_fu_480_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        t_coeffs_address0 = zext_ln181_1_fu_400_p1;
    end else begin
        t_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7))) begin
        t_coeffs_ce0 = 1'b1;
    end else begin
        t_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        t_coeffs_we0 = 1'b1;
    end else begin
        t_coeffs_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        u_vec_coeffs_address0 = zext_ln181_10_fu_385_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        u_vec_coeffs_address0 = zext_ln181_4_fu_243_p1;
    end else begin
        u_vec_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
        u_vec_coeffs_ce0 = 1'b1;
    end else begin
        u_vec_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        v_vec_coeffs_address0 = zext_ln181_11_fu_395_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        v_vec_coeffs_address0 = zext_ln181_fu_229_p1;
    end else begin
        v_vec_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
        v_vec_coeffs_ce0 = 1'b1;
    end else begin
        v_vec_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        w_coeffs_address0 = w_coeffs_addr_1_reg_585;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        w_coeffs_address0 = zext_ln88_2_fu_494_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        w_coeffs_address0 = zext_ln181_5_fu_257_p1;
    end else begin
        w_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7))) begin
        w_coeffs_ce0 = 1'b1;
    end else begin
        w_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        w_coeffs_d0 = add_ln88_fu_505_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        w_coeffs_d0 = t_1_fu_320_p1;
    end else begin
        w_coeffs_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3))) begin
        w_coeffs_we0 = 1'b1;
    end else begin
        w_coeffs_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln180_fu_217_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln137_fu_325_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln180_1_fu_360_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln87_fu_468_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln181_1_fu_335_p2 = (zext_ln181_7_fu_331_p1 + zext_ln181_3_cast_reg_523);

assign add_ln181_2_fu_380_p2 = (tmp_26_cast_reg_549 + zext_ln181_9_fu_376_p1);

assign add_ln181_3_fu_390_p2 = (zext_ln176_reg_554 + zext_ln181_8_fu_372_p1);

assign add_ln181_fu_252_p2 = (zext_ln181_2_reg_517 + zext_ln181_3_fu_248_p1);

assign add_ln19_1_fu_447_p2 = ($signed(sext_ln181_3_fu_419_p1) + $signed(sext_ln19_4_fu_443_p1));

assign add_ln19_fu_304_p2 = ($signed(sext_ln181_1_fu_276_p1) + $signed(sext_ln19_1_fu_300_p1));

assign add_ln88_1_fu_489_p2 = (zext_ln181_2_reg_517 + zext_ln88_1_fu_485_p1);

assign add_ln88_fu_505_p2 = (w_coeffs_q0 + t_coeffs_q0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign i_14_fu_223_p2 = (i_0_i_reg_146 + 9'd1);

assign i_15_fu_366_p2 = (i_0_i1_reg_170 + 9'd1);

assign i_16_fu_474_p2 = (i_0_i20_reg_182 + 9'd1);

assign i_fu_499_p2 = (i_0_reg_158 + 3'd1);

assign icmp_ln137_fu_325_p2 = ((i_0_reg_158 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln180_1_fu_360_p2 = ((i_0_i1_reg_170 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln180_fu_217_p2 = ((i_0_i_reg_146 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_468_p2 = ((i_0_i20_reg_182 == 9'd256) ? 1'b1 : 1'b0);

assign mul_ln181_1_fu_413_p0 = mul_ln181_1_fu_413_p00;

assign mul_ln181_1_fu_413_p00 = u_vec_coeffs_q0;

assign mul_ln181_1_fu_413_p1 = v_vec_coeffs_q0;

assign mul_ln181_1_fu_413_p2 = ($signed({{1'b0}, {mul_ln181_1_fu_413_p0}}) * $signed(mul_ln181_1_fu_413_p1));

assign mul_ln181_fu_270_p0 = mul_ln181_fu_270_p00;

assign mul_ln181_fu_270_p00 = u_vec_coeffs_q0;

assign mul_ln181_fu_270_p1 = v_vec_coeffs_q0;

assign mul_ln181_fu_270_p2 = ($signed({{1'b0}, {mul_ln181_fu_270_p0}}) * $signed(mul_ln181_fu_270_p1));

assign mul_ln19_1_fu_437_p1 = t_2_fu_427_p2;

assign mul_ln19_1_fu_437_p2 = ($signed(55'd36028797010583551) * $signed(mul_ln19_1_fu_437_p1));

assign mul_ln19_fu_294_p1 = t_fu_284_p2;

assign mul_ln19_fu_294_p2 = ($signed(55'd36028797010583551) * $signed(mul_ln19_fu_294_p1));

assign sext_ln181_1_fu_276_p1 = mul_ln181_fu_270_p2;

assign sext_ln181_3_fu_419_p1 = mul_ln181_1_fu_413_p2;

assign sext_ln19_1_fu_300_p1 = $signed(mul_ln19_fu_294_p2);

assign sext_ln19_4_fu_443_p1 = $signed(mul_ln19_1_fu_437_p2);

assign t_1_fu_320_p1 = $signed(tmp_1_fu_310_p4);

assign t_2_fu_427_p2 = ($signed({{1'b0}, {32'd58728449}}) * $signed(trunc_ln18_1_fu_423_p1));

assign t_coeffs_d0 = $signed(tmp_2_fu_453_p4);

assign t_fu_284_p2 = ($signed({{1'b0}, {32'd58728449}}) * $signed(trunc_ln18_fu_280_p1));

assign tmp_1_fu_310_p4 = {{add_ln19_fu_304_p2[55:32]}};

assign tmp_26_cast_fu_340_p3 = {{add_ln181_1_fu_335_p2}, {8'd0}};

assign tmp_2_fu_453_p4 = {{add_ln19_1_fu_447_p2[55:32]}};

assign tmp_7_fu_234_p4 = {{{w_coeffs_offset}, {1'd0}}, {i_0_i_reg_146}};

assign tmp_8_fu_348_p3 = {{i_0_reg_158}, {8'd0}};

assign tmp_fu_193_p3 = {{w_coeffs_offset}, {8'd0}};

assign tmp_s_fu_205_p3 = {{w_coeffs_offset}, {2'd0}};

assign trunc_ln18_1_fu_423_p1 = mul_ln181_1_fu_413_p2[31:0];

assign trunc_ln18_fu_280_p1 = mul_ln181_fu_270_p2[31:0];

assign zext_ln176_fu_356_p1 = tmp_8_fu_348_p3;

assign zext_ln181_10_fu_385_p1 = add_ln181_2_fu_380_p2;

assign zext_ln181_11_fu_395_p1 = add_ln181_3_fu_390_p2;

assign zext_ln181_1_fu_400_p1 = i_0_i1_reg_170;

assign zext_ln181_2_fu_201_p1 = tmp_fu_193_p3;

assign zext_ln181_3_cast_fu_213_p1 = tmp_s_fu_205_p3;

assign zext_ln181_3_fu_248_p1 = i_0_i_reg_146;

assign zext_ln181_4_fu_243_p1 = tmp_7_fu_234_p4;

assign zext_ln181_5_fu_257_p1 = add_ln181_fu_252_p2;

assign zext_ln181_7_fu_331_p1 = i_0_reg_158;

assign zext_ln181_8_fu_372_p1 = i_0_i1_reg_170;

assign zext_ln181_9_fu_376_p1 = i_0_i1_reg_170;

assign zext_ln181_fu_229_p1 = i_0_i_reg_146;

assign zext_ln88_1_fu_485_p1 = i_0_i20_reg_182;

assign zext_ln88_2_fu_494_p1 = add_ln88_1_fu_489_p2;

assign zext_ln88_fu_480_p1 = i_0_i20_reg_182;

always @ (posedge ap_clk) begin
    zext_ln181_2_reg_517[7:0] <= 8'b00000000;
    zext_ln181_2_reg_517[11] <= 1'b0;
    zext_ln181_3_cast_reg_523[1:0] <= 2'b00;
    zext_ln181_3_cast_reg_523[5] <= 1'b0;
    tmp_26_cast_reg_549[7:0] <= 8'b00000000;
    zext_ln176_reg_554[7:0] <= 8'b00000000;
    zext_ln176_reg_554[11] <= 1'b0;
end

endmodule //polyvecl_pointwise_a
