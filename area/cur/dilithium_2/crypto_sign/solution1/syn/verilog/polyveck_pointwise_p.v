// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module polyveck_pointwise_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_vec_coeffs_address0,
        r_vec_coeffs_ce0,
        r_vec_coeffs_we0,
        r_vec_coeffs_d0,
        a_coeffs_address0,
        a_coeffs_ce0,
        a_coeffs_q0,
        v_vec_coeffs_address0,
        v_vec_coeffs_ce0,
        v_vec_coeffs_q0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] r_vec_coeffs_address0;
output   r_vec_coeffs_ce0;
output   r_vec_coeffs_we0;
output  [31:0] r_vec_coeffs_d0;
output  [7:0] a_coeffs_address0;
output   a_coeffs_ce0;
input  [31:0] a_coeffs_q0;
output  [9:0] v_vec_coeffs_address0;
output   v_vec_coeffs_ce0;
input  [31:0] v_vec_coeffs_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg r_vec_coeffs_ce0;
reg r_vec_coeffs_we0;
reg a_coeffs_ce0;
reg v_vec_coeffs_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] i_fu_107_p2;
reg   [2:0] i_reg_214;
wire    ap_CS_fsm_state2;
wire   [11:0] zext_ln176_fu_121_p1;
reg   [11:0] zext_ln176_reg_219;
wire   [0:0] icmp_ln305_fu_101_p2;
wire   [8:0] i_26_fu_131_p2;
reg   [8:0] i_26_reg_227;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln181_15_fu_151_p1;
reg   [63:0] zext_ln181_15_reg_232;
wire   [0:0] icmp_ln180_fu_125_p2;
reg   [2:0] i_0_reg_79;
reg   [8:0] i_0_i_reg_90;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln181_fu_137_p1;
wire   [10:0] tmp_fu_113_p3;
wire   [11:0] zext_ln181_14_fu_142_p1;
wire   [11:0] add_ln181_fu_146_p2;
wire  signed [31:0] mul_ln181_fu_164_p0;
wire  signed [31:0] mul_ln181_fu_164_p1;
wire   [63:0] mul_ln181_fu_164_p2;
wire  signed [31:0] trunc_ln18_fu_170_p1;
wire   [31:0] t_fu_174_p2;
wire  signed [31:0] mul_ln19_fu_184_p1;
wire   [54:0] mul_ln19_fu_184_p2;
wire  signed [63:0] sext_ln19_4_fu_190_p1;
wire   [63:0] add_ln19_fu_194_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_i_reg_90 <= i_26_reg_227;
    end else if (((icmp_ln305_fu_101_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_i_reg_90 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln180_fu_125_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_79 <= i_reg_214;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_79 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_26_reg_227 <= i_26_fu_131_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_214 <= i_fu_107_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln305_fu_101_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln176_reg_219[10 : 8] <= zext_ln176_fu_121_p1[10 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln180_fu_125_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln181_15_reg_232[11 : 0] <= zext_ln181_15_fu_151_p1[11 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_coeffs_ce0 = 1'b1;
    end else begin
        a_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln305_fu_101_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln305_fu_101_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_vec_coeffs_ce0 = 1'b1;
    end else begin
        r_vec_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_vec_coeffs_we0 = 1'b1;
    end else begin
        r_vec_coeffs_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        v_vec_coeffs_ce0 = 1'b1;
    end else begin
        v_vec_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln305_fu_101_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln180_fu_125_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_coeffs_address0 = zext_ln181_fu_137_p1;

assign add_ln181_fu_146_p2 = (zext_ln181_14_fu_142_p1 + zext_ln176_reg_219);

assign add_ln19_fu_194_p2 = ($signed(sext_ln19_4_fu_190_p1) + $signed(mul_ln181_fu_164_p2));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign i_26_fu_131_p2 = (i_0_i_reg_90 + 9'd1);

assign i_fu_107_p2 = (i_0_reg_79 + 3'd1);

assign icmp_ln180_fu_125_p2 = ((i_0_i_reg_90 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln305_fu_101_p2 = ((i_0_reg_79 == 3'd4) ? 1'b1 : 1'b0);

assign mul_ln181_fu_164_p0 = v_vec_coeffs_q0;

assign mul_ln181_fu_164_p1 = a_coeffs_q0;

assign mul_ln181_fu_164_p2 = ($signed(mul_ln181_fu_164_p0) * $signed(mul_ln181_fu_164_p1));

assign mul_ln19_fu_184_p1 = t_fu_174_p2;

assign mul_ln19_fu_184_p2 = ($signed(55'd36028797010583551) * $signed(mul_ln19_fu_184_p1));

assign r_vec_coeffs_address0 = zext_ln181_15_reg_232;

assign r_vec_coeffs_d0 = {{add_ln19_fu_194_p2[63:32]}};

assign sext_ln19_4_fu_190_p1 = $signed(mul_ln19_fu_184_p2);

assign t_fu_174_p2 = ($signed({{1'b0}, {32'd58728449}}) * $signed(trunc_ln18_fu_170_p1));

assign tmp_fu_113_p3 = {{i_0_reg_79}, {8'd0}};

assign trunc_ln18_fu_170_p1 = mul_ln181_fu_164_p2[31:0];

assign v_vec_coeffs_address0 = zext_ln181_15_fu_151_p1;

assign zext_ln176_fu_121_p1 = tmp_fu_113_p3;

assign zext_ln181_14_fu_142_p1 = i_0_i_reg_90;

assign zext_ln181_15_fu_151_p1 = add_ln181_fu_146_p2;

assign zext_ln181_fu_137_p1 = i_0_i_reg_90;

always @ (posedge ap_clk) begin
    zext_ln176_reg_219[7:0] <= 8'b00000000;
    zext_ln176_reg_219[11] <= 1'b0;
    zext_ln181_15_reg_232[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //polyveck_pointwise_p
