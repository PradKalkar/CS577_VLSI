-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity poly_challenge is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    c_coeffs_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    c_coeffs_ce0 : OUT STD_LOGIC;
    c_coeffs_we0 : OUT STD_LOGIC;
    c_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    seed_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    seed_ce0 : OUT STD_LOGIC;
    seed_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of poly_challenge is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv9_D9 : STD_LOGIC_VECTOR (8 downto 0) := "011011001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv64_20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_24_fu_302_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_keccak_absorb_2_fu_273_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal state_pos_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_keccak_absorb_2_fu_273_ap_ready : STD_LOGIC;
    signal grp_keccak_absorb_2_fu_273_ap_done : STD_LOGIC;
    signal state_s_addr_reg_527 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_s_addr_7_reg_532 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_fu_369_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_540 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln523_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal signs_fu_406_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_25_fu_418_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln531_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln531_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal pos_fu_441_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pos_reg_570 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal c_coeffs_addr_1_reg_584 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal icmp_ln537_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln540_fu_467_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln540_reg_589 : STD_LOGIC_VECTOR (0 downto 0);
    signal signs_3_fu_481_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal signs_3_reg_594 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_26_fu_490_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_26_reg_599 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal buf_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_ce0 : STD_LOGIC;
    signal buf_we0 : STD_LOGIC;
    signal buf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_s_ce0 : STD_LOGIC;
    signal state_s_we0 : STD_LOGIC;
    signal state_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_s_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_s_ce1 : STD_LOGIC;
    signal state_s_we1 : STD_LOGIC;
    signal state_s_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_s_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_2_fu_273_ap_start : STD_LOGIC;
    signal grp_keccak_absorb_2_fu_273_ap_idle : STD_LOGIC;
    signal grp_keccak_absorb_2_fu_273_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_absorb_2_fu_273_s_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_2_fu_273_s_we0 : STD_LOGIC;
    signal grp_keccak_absorb_2_fu_273_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_2_fu_273_s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_absorb_2_fu_273_s_ce1 : STD_LOGIC;
    signal grp_keccak_absorb_2_fu_273_s_we1 : STD_LOGIC;
    signal grp_keccak_absorb_2_fu_273_s_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_2_fu_273_m_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_keccak_absorb_2_fu_273_m_ce0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_fu_288_ap_start : STD_LOGIC;
    signal grp_keccak_squeezeblocks_fu_288_ap_done : STD_LOGIC;
    signal grp_keccak_squeezeblocks_fu_288_ap_idle : STD_LOGIC;
    signal grp_keccak_squeezeblocks_fu_288_ap_ready : STD_LOGIC;
    signal grp_keccak_squeezeblocks_fu_288_out_r_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_keccak_squeezeblocks_fu_288_out_r_ce0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_fu_288_out_r_we0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_fu_288_out_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_keccak_squeezeblocks_fu_288_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_squeezeblocks_fu_288_s_ce0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_fu_288_s_we0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_fu_288_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_squeezeblocks_fu_288_s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_squeezeblocks_fu_288_s_ce1 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_fu_288_s_we1 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_fu_288_s_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_i_i_reg_169 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln362_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_180 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal signs_0_reg_192 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_reg_204 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln527_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_reg_215 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal pos_0_reg_227 : STD_LOGIC_VECTOR (31 downto 0);
    signal signs_1_reg_239 : STD_LOGIC_VECTOR (63 downto 0);
    signal pos_1_reg_250 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln529_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pos_2_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_block_state15_on_subcall_done : BOOLEAN;
    signal grp_keccak_absorb_2_fu_273_ap_start_reg : STD_LOGIC := '0';
    signal grp_keccak_squeezeblocks_fu_288_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln363_fu_308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln450_3_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln524_fu_375_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln528_fu_424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln536_fu_447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln539_fu_462_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln539_1_fu_485_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal xor_ln450_fu_349_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal xor_ln451_fu_356_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln540_fu_509_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_s_fu_313_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln450_fu_328_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_331_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln450_fu_339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln450_fu_343_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln524_fu_384_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln13_fu_388_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln524_1_fu_380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln524_2_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln524_fu_400_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln536_1_fu_452_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal signs_2_fu_471_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln14_fu_496_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln540_fu_503_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);

    component keccak_absorb_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce0 : OUT STD_LOGIC;
        s_we0 : OUT STD_LOGIC;
        s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce1 : OUT STD_LOGIC;
        s_we1 : OUT STD_LOGIC;
        s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        pos_r : IN STD_LOGIC_VECTOR (6 downto 0);
        m_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        m_ce0 : OUT STD_LOGIC;
        m_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        m_offset : IN STD_LOGIC_VECTOR (12 downto 0);
        mlen : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component keccak_squeezeblocks IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce0 : OUT STD_LOGIC;
        s_we0 : OUT STD_LOGIC;
        s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce1 : OUT STD_LOGIC;
        s_we1 : OUT STD_LOGIC;
        s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component poly_challenge_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component poly_uniform_statdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    buf_U : component poly_challenge_buf
    generic map (
        DataWidth => 8,
        AddressRange => 136,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_address0,
        ce0 => buf_ce0,
        we0 => buf_we0,
        d0 => grp_keccak_squeezeblocks_fu_288_out_r_d0,
        q0 => buf_q0);

    state_s_U : component poly_uniform_statdEe
    generic map (
        DataWidth => 64,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => state_s_address0,
        ce0 => state_s_ce0,
        we0 => state_s_we0,
        d0 => state_s_d0,
        q0 => state_s_q0,
        address1 => state_s_address1,
        ce1 => state_s_ce1,
        we1 => state_s_we1,
        d1 => state_s_d1,
        q1 => state_s_q1);

    grp_keccak_absorb_2_fu_273 : component keccak_absorb_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_keccak_absorb_2_fu_273_ap_start,
        ap_done => grp_keccak_absorb_2_fu_273_ap_done,
        ap_idle => grp_keccak_absorb_2_fu_273_ap_idle,
        ap_ready => grp_keccak_absorb_2_fu_273_ap_ready,
        s_address0 => grp_keccak_absorb_2_fu_273_s_address0,
        s_ce0 => grp_keccak_absorb_2_fu_273_s_ce0,
        s_we0 => grp_keccak_absorb_2_fu_273_s_we0,
        s_d0 => grp_keccak_absorb_2_fu_273_s_d0,
        s_q0 => state_s_q0,
        s_address1 => grp_keccak_absorb_2_fu_273_s_address1,
        s_ce1 => grp_keccak_absorb_2_fu_273_s_ce1,
        s_we1 => grp_keccak_absorb_2_fu_273_s_we1,
        s_d1 => grp_keccak_absorb_2_fu_273_s_d1,
        s_q1 => state_s_q1,
        pos_r => ap_const_lv7_0,
        m_address0 => grp_keccak_absorb_2_fu_273_m_address0,
        m_ce0 => grp_keccak_absorb_2_fu_273_m_ce0,
        m_q0 => seed_q0,
        m_offset => ap_const_lv13_0,
        mlen => ap_const_lv64_20,
        ap_return => grp_keccak_absorb_2_fu_273_ap_return);

    grp_keccak_squeezeblocks_fu_288 : component keccak_squeezeblocks
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_keccak_squeezeblocks_fu_288_ap_start,
        ap_done => grp_keccak_squeezeblocks_fu_288_ap_done,
        ap_idle => grp_keccak_squeezeblocks_fu_288_ap_idle,
        ap_ready => grp_keccak_squeezeblocks_fu_288_ap_ready,
        out_r_address0 => grp_keccak_squeezeblocks_fu_288_out_r_address0,
        out_r_ce0 => grp_keccak_squeezeblocks_fu_288_out_r_ce0,
        out_r_we0 => grp_keccak_squeezeblocks_fu_288_out_r_we0,
        out_r_d0 => grp_keccak_squeezeblocks_fu_288_out_r_d0,
        s_address0 => grp_keccak_squeezeblocks_fu_288_s_address0,
        s_ce0 => grp_keccak_squeezeblocks_fu_288_s_ce0,
        s_we0 => grp_keccak_squeezeblocks_fu_288_s_we0,
        s_d0 => grp_keccak_squeezeblocks_fu_288_s_d0,
        s_q0 => state_s_q0,
        s_address1 => grp_keccak_squeezeblocks_fu_288_s_address1,
        s_ce1 => grp_keccak_squeezeblocks_fu_288_s_ce1,
        s_we1 => grp_keccak_squeezeblocks_fu_288_s_we1,
        s_d1 => grp_keccak_squeezeblocks_fu_288_s_d1,
        s_q1 => state_s_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_keccak_absorb_2_fu_273_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_keccak_absorb_2_fu_273_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln362_fu_296_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_keccak_absorb_2_fu_273_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_keccak_absorb_2_fu_273_ap_ready = ap_const_logic_1)) then 
                    grp_keccak_absorb_2_fu_273_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_keccak_squeezeblocks_fu_288_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_keccak_squeezeblocks_fu_288_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln531_fu_435_p2 = ap_const_lv1_1)))) then 
                    grp_keccak_squeezeblocks_fu_288_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_keccak_squeezeblocks_fu_288_ap_ready = ap_const_logic_1)) then 
                    grp_keccak_squeezeblocks_fu_288_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_i_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln362_fu_296_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_i_i_reg_169 <= i_24_fu_302_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_i_reg_169 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_0_reg_180 <= i_reg_540;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_keccak_squeezeblocks_fu_288_ap_done = ap_const_logic_1))) then 
                i_0_reg_180 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_1_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln523_fu_363_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_1_reg_204 <= ap_const_lv9_0;
            elsif (((icmp_ln527_fu_412_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i_1_reg_204 <= i_25_fu_418_p2;
            end if; 
        end if;
    end process;

    i_2_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln527_fu_412_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i_2_reg_215 <= ap_const_lv9_D9;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                i_2_reg_215 <= i_26_reg_599;
            end if; 
        end if;
    end process;

    pos_0_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln527_fu_412_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                pos_0_reg_227 <= ap_const_lv32_8;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                pos_0_reg_227 <= pos_reg_570;
            end if; 
        end if;
    end process;

    pos_1_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln529_fu_429_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                pos_1_reg_250 <= pos_0_reg_227;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln537_fu_456_p2 = ap_const_lv1_1))) then 
                pos_1_reg_250 <= pos_reg_570;
            end if; 
        end if;
    end process;

    pos_2_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln531_fu_435_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                pos_2_reg_261 <= pos_1_reg_250;
            elsif (((ap_const_boolean_0 = ap_block_state15_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln531_reg_566 = ap_const_lv1_1))) then 
                pos_2_reg_261 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    signs_0_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                signs_0_reg_192 <= signs_fu_406_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_keccak_squeezeblocks_fu_288_ap_done = ap_const_logic_1))) then 
                signs_0_reg_192 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    signs_1_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln527_fu_412_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                signs_1_reg_239 <= signs_0_reg_192;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                signs_1_reg_239 <= signs_3_reg_594;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln537_fu_456_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                c_coeffs_addr_1_reg_584 <= zext_ln539_fu_462_p1(8 - 1 downto 0);
                    signs_3_reg_594(62 downto 0) <= signs_3_fu_481_p1(62 downto 0);
                trunc_ln540_reg_589 <= trunc_ln540_fu_467_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                i_26_reg_599 <= i_26_fu_490_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_reg_540 <= i_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                icmp_ln531_reg_566 <= icmp_ln531_fu_435_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                pos_reg_570 <= pos_fu_441_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_keccak_absorb_2_fu_273_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                state_pos_reg_522 <= grp_keccak_absorb_2_fu_273_ap_return;
                state_s_addr_reg_527 <= zext_ln450_3_fu_323_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    signs_3_reg_594(63) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, grp_keccak_absorb_2_fu_273_ap_done, ap_CS_fsm_state10, icmp_ln523_fu_363_p2, ap_CS_fsm_state12, ap_CS_fsm_state17, icmp_ln537_fu_456_p2, grp_keccak_squeezeblocks_fu_288_ap_done, icmp_ln362_fu_296_p2, ap_CS_fsm_state9, icmp_ln527_fu_412_p2, ap_CS_fsm_state13, icmp_ln529_fu_429_p2, ap_CS_fsm_state15, ap_block_state15_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln362_fu_296_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_keccak_absorb_2_fu_273_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_keccak_squeezeblocks_fu_288_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln523_fu_363_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln527_fu_412_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln529_fu_429_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_boolean_0 = ap_block_state15_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((icmp_ln537_fu_456_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state15_on_subcall_done_assign_proc : process(icmp_ln531_reg_566, grp_keccak_squeezeblocks_fu_288_ap_done)
    begin
                ap_block_state15_on_subcall_done <= ((grp_keccak_squeezeblocks_fu_288_ap_done = ap_const_logic_0) and (icmp_ln531_reg_566 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state13, icmp_ln529_fu_429_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln529_fu_429_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13, icmp_ln529_fu_429_p2)
    begin
        if (((icmp_ln529_fu_429_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    buf_address0_assign_proc : process(ap_CS_fsm_state10, icmp_ln531_reg_566, ap_CS_fsm_state16, grp_keccak_squeezeblocks_fu_288_out_r_address0, ap_CS_fsm_state9, ap_CS_fsm_state15, zext_ln524_fu_375_p1, zext_ln536_fu_447_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            buf_address0 <= zext_ln536_fu_447_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            buf_address0 <= zext_ln524_fu_375_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln531_reg_566 = ap_const_lv1_1)))) then 
            buf_address0 <= grp_keccak_squeezeblocks_fu_288_out_r_address0;
        else 
            buf_address0 <= "XXXXXXXX";
        end if; 
    end process;


    buf_ce0_assign_proc : process(ap_CS_fsm_state10, icmp_ln531_reg_566, ap_CS_fsm_state16, grp_keccak_squeezeblocks_fu_288_out_r_ce0, ap_CS_fsm_state9, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln531_reg_566 = ap_const_lv1_1)))) then 
            buf_ce0 <= grp_keccak_squeezeblocks_fu_288_out_r_ce0;
        else 
            buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_we0_assign_proc : process(icmp_ln531_reg_566, grp_keccak_squeezeblocks_fu_288_out_r_we0, ap_CS_fsm_state9, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln531_reg_566 = ap_const_lv1_1)))) then 
            buf_we0 <= grp_keccak_squeezeblocks_fu_288_out_r_we0;
        else 
            buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c_coeffs_address0_assign_proc : process(ap_CS_fsm_state12, c_coeffs_addr_1_reg_584, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, zext_ln528_fu_424_p1, zext_ln539_fu_462_p1, zext_ln539_1_fu_485_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            c_coeffs_address0 <= c_coeffs_addr_1_reg_584;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            c_coeffs_address0 <= zext_ln539_1_fu_485_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            c_coeffs_address0 <= zext_ln539_fu_462_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            c_coeffs_address0 <= zext_ln528_fu_424_p1(8 - 1 downto 0);
        else 
            c_coeffs_address0 <= "XXXXXXXX";
        end if; 
    end process;


    c_coeffs_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            c_coeffs_ce0 <= ap_const_logic_1;
        else 
            c_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_coeffs_d0_assign_proc : process(c_coeffs_q0, ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state19, sext_ln540_fu_509_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            c_coeffs_d0 <= sext_ln540_fu_509_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            c_coeffs_d0 <= c_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            c_coeffs_d0 <= ap_const_lv32_0;
        else 
            c_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    c_coeffs_we0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state18, icmp_ln527_fu_412_p2, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((icmp_ln527_fu_412_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            c_coeffs_we0 <= ap_const_logic_1;
        else 
            c_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_keccak_absorb_2_fu_273_ap_start <= grp_keccak_absorb_2_fu_273_ap_start_reg;
    grp_keccak_squeezeblocks_fu_288_ap_start <= grp_keccak_squeezeblocks_fu_288_ap_start_reg;
    i_24_fu_302_p2 <= std_logic_vector(unsigned(i_0_i_i_reg_169) + unsigned(ap_const_lv5_1));
    i_25_fu_418_p2 <= std_logic_vector(unsigned(i_1_reg_204) + unsigned(ap_const_lv9_1));
    i_26_fu_490_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(i_2_reg_215));
    i_fu_369_p2 <= std_logic_vector(unsigned(i_0_reg_180) + unsigned(ap_const_lv4_1));
    i_s_fu_313_p4 <= grp_keccak_absorb_2_fu_273_ap_return(31 downto 3);
    icmp_ln362_fu_296_p2 <= "1" when (i_0_i_i_reg_169 = ap_const_lv5_19) else "0";
    icmp_ln523_fu_363_p2 <= "1" when (i_0_reg_180 = ap_const_lv4_8) else "0";
    icmp_ln527_fu_412_p2 <= "1" when (i_1_reg_204 = ap_const_lv9_100) else "0";
    icmp_ln529_fu_429_p2 <= "1" when (i_2_reg_215 = ap_const_lv9_100) else "0";
    icmp_ln531_fu_435_p2 <= "1" when (unsigned(pos_1_reg_250) > unsigned(ap_const_lv32_87)) else "0";
    icmp_ln537_fu_456_p2 <= "1" when (unsigned(zext_ln536_1_fu_452_p1) > unsigned(i_2_reg_215)) else "0";
    pos_fu_441_p2 <= std_logic_vector(unsigned(pos_2_reg_261) + unsigned(ap_const_lv32_1));
    seed_address0 <= grp_keccak_absorb_2_fu_273_m_address0;
    seed_ce0 <= grp_keccak_absorb_2_fu_273_m_ce0;
        sext_ln540_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln540_fu_503_p2),32));

    shl_ln13_fu_388_p3 <= (trunc_ln524_fu_384_p1 & ap_const_lv3_0);
    shl_ln14_fu_496_p3 <= (trunc_ln540_reg_589 & ap_const_lv1_0);
    shl_ln450_fu_343_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1F),to_integer(unsigned('0' & zext_ln450_fu_339_p1(31-1 downto 0)))));
    shl_ln524_fu_400_p2 <= std_logic_vector(shift_left(unsigned(zext_ln524_1_fu_380_p1),to_integer(unsigned('0' & zext_ln524_2_fu_396_p1(31-1 downto 0)))));
    shl_ln_fu_331_p3 <= (trunc_ln450_fu_328_p1 & ap_const_lv3_0);
    signs_2_fu_471_p4 <= signs_1_reg_239(63 downto 1);
    signs_3_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(signs_2_fu_471_p4),64));
    signs_fu_406_p2 <= (signs_0_reg_192 or shl_ln524_fu_400_p2);
    state_s_addr_7_reg_532 <= ap_const_lv64_10(5 - 1 downto 0);

    state_s_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, state_s_addr_reg_527, state_s_addr_7_reg_532, ap_CS_fsm_state6, icmp_ln531_reg_566, grp_keccak_absorb_2_fu_273_s_address0, grp_keccak_squeezeblocks_fu_288_s_address0, icmp_ln362_fu_296_p2, ap_CS_fsm_state9, ap_CS_fsm_state15, zext_ln363_fu_308_p1, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_s_address0 <= state_s_addr_7_reg_532;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_s_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_s_address0 <= state_s_addr_reg_527;
        elsif (((icmp_ln362_fu_296_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            state_s_address0 <= zext_ln363_fu_308_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln531_reg_566 = ap_const_lv1_1)))) then 
            state_s_address0 <= grp_keccak_squeezeblocks_fu_288_s_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_s_address0 <= grp_keccak_absorb_2_fu_273_s_address0;
        else 
            state_s_address0 <= "XXXXX";
        end if; 
    end process;


    state_s_address1_assign_proc : process(ap_CS_fsm_state3, icmp_ln531_reg_566, grp_keccak_absorb_2_fu_273_s_address1, grp_keccak_squeezeblocks_fu_288_s_address1, ap_CS_fsm_state9, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln531_reg_566 = ap_const_lv1_1)))) then 
            state_s_address1 <= grp_keccak_squeezeblocks_fu_288_s_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_s_address1 <= grp_keccak_absorb_2_fu_273_s_address1;
        else 
            state_s_address1 <= "XXXXX";
        end if; 
    end process;


    state_s_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state6, icmp_ln531_reg_566, grp_keccak_absorb_2_fu_273_s_ce0, grp_keccak_squeezeblocks_fu_288_s_ce0, icmp_ln362_fu_296_p2, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln362_fu_296_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            state_s_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln531_reg_566 = ap_const_lv1_1)))) then 
            state_s_ce0 <= grp_keccak_squeezeblocks_fu_288_s_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_s_ce0 <= grp_keccak_absorb_2_fu_273_s_ce0;
        else 
            state_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_s_ce1_assign_proc : process(ap_CS_fsm_state3, icmp_ln531_reg_566, grp_keccak_absorb_2_fu_273_s_ce1, grp_keccak_squeezeblocks_fu_288_s_ce1, ap_CS_fsm_state9, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln531_reg_566 = ap_const_lv1_1)))) then 
            state_s_ce1 <= grp_keccak_squeezeblocks_fu_288_s_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_s_ce1 <= grp_keccak_absorb_2_fu_273_s_ce1;
        else 
            state_s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_s_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln531_reg_566, grp_keccak_absorb_2_fu_273_s_d0, grp_keccak_squeezeblocks_fu_288_s_d0, icmp_ln362_fu_296_p2, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state5, xor_ln450_fu_349_p2, ap_CS_fsm_state7, xor_ln451_fu_356_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_s_d0 <= xor_ln451_fu_356_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_s_d0 <= xor_ln450_fu_349_p2;
        elsif (((icmp_ln362_fu_296_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            state_s_d0 <= ap_const_lv64_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln531_reg_566 = ap_const_lv1_1)))) then 
            state_s_d0 <= grp_keccak_squeezeblocks_fu_288_s_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_s_d0 <= grp_keccak_absorb_2_fu_273_s_d0;
        else 
            state_s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_s_d1_assign_proc : process(ap_CS_fsm_state3, icmp_ln531_reg_566, grp_keccak_absorb_2_fu_273_s_d1, grp_keccak_squeezeblocks_fu_288_s_d1, ap_CS_fsm_state9, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln531_reg_566 = ap_const_lv1_1)))) then 
            state_s_d1 <= grp_keccak_squeezeblocks_fu_288_s_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_s_d1 <= grp_keccak_absorb_2_fu_273_s_d1;
        else 
            state_s_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_s_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln531_reg_566, grp_keccak_absorb_2_fu_273_s_we0, grp_keccak_squeezeblocks_fu_288_s_we0, icmp_ln362_fu_296_p2, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln362_fu_296_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            state_s_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln531_reg_566 = ap_const_lv1_1)))) then 
            state_s_we0 <= grp_keccak_squeezeblocks_fu_288_s_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_s_we0 <= grp_keccak_absorb_2_fu_273_s_we0;
        else 
            state_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_s_we1_assign_proc : process(ap_CS_fsm_state3, icmp_ln531_reg_566, grp_keccak_absorb_2_fu_273_s_we1, grp_keccak_squeezeblocks_fu_288_s_we1, ap_CS_fsm_state9, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln531_reg_566 = ap_const_lv1_1)))) then 
            state_s_we1 <= grp_keccak_squeezeblocks_fu_288_s_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_s_we1 <= grp_keccak_absorb_2_fu_273_s_we1;
        else 
            state_s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln540_fu_503_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) - unsigned(shl_ln14_fu_496_p3));
    trunc_ln450_fu_328_p1 <= state_pos_reg_522(3 - 1 downto 0);
    trunc_ln524_fu_384_p1 <= i_0_reg_180(3 - 1 downto 0);
    trunc_ln540_fu_467_p1 <= signs_1_reg_239(1 - 1 downto 0);
    xor_ln450_fu_349_p2 <= (state_s_q0 xor shl_ln450_fu_343_p2);
    xor_ln451_fu_356_p2 <= (state_s_q0 xor ap_const_lv64_8000000000000000);
    zext_ln363_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_reg_169),64));
    zext_ln450_3_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_s_fu_313_p4),64));
    zext_ln450_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_331_p3),64));
    zext_ln524_1_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buf_q0),64));
    zext_ln524_2_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln13_fu_388_p3),64));
    zext_ln524_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_180),64));
    zext_ln528_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_204),64));
    zext_ln536_1_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buf_q0),9));
    zext_ln536_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pos_2_reg_261),64));
    zext_ln539_1_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_215),64));
    zext_ln539_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buf_q0),64));
end behav;
