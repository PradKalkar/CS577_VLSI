// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _shake256_squeezebloc_1_HH_
#define _shake256_squeezebloc_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "KeccakF1600_StatePer_1.h"

namespace ap_rtl {

struct shake256_squeezebloc_1 : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > out_r_address0;
    sc_out< sc_logic > out_r_ce0;
    sc_out< sc_logic > out_r_we0;
    sc_out< sc_lv<8> > out_r_d0;
    sc_out< sc_lv<5> > state_s_address0;
    sc_out< sc_logic > state_s_ce0;
    sc_out< sc_logic > state_s_we0;
    sc_out< sc_lv<64> > state_s_d0;
    sc_in< sc_lv<64> > state_s_q0;
    sc_out< sc_lv<5> > state_s_address1;
    sc_out< sc_logic > state_s_ce1;
    sc_out< sc_logic > state_s_we1;
    sc_out< sc_lv<64> > state_s_d1;
    sc_in< sc_lv<64> > state_s_q1;


    // Module declarations
    shake256_squeezebloc_1(sc_module_name name);
    SC_HAS_PROCESS(shake256_squeezebloc_1);

    ~shake256_squeezebloc_1();

    sc_trace_file* mVcdFile;

    KeccakF1600_StatePer_1* grp_KeccakF1600_StatePer_1_fu_118;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > i_fu_132_p2;
    sc_signal< sc_lv<5> > i_reg_218;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > icmp_ln477_fu_126_p2;
    sc_signal< sc_lv<8> > add_ln479_fu_143_p2;
    sc_signal< sc_lv<8> > shl_ln_fu_149_p3;
    sc_signal< sc_lv<8> > shl_ln_reg_233;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<64> > state_s_load_reg_238;
    sc_signal< sc_lv<4> > i_11_fu_163_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > grp_KeccakF1600_StatePer_1_fu_118_ap_start;
    sc_signal< sc_logic > grp_KeccakF1600_StatePer_1_fu_118_ap_done;
    sc_signal< sc_logic > grp_KeccakF1600_StatePer_1_fu_118_ap_idle;
    sc_signal< sc_logic > grp_KeccakF1600_StatePer_1_fu_118_ap_ready;
    sc_signal< sc_lv<5> > grp_KeccakF1600_StatePer_1_fu_118_state_address0;
    sc_signal< sc_logic > grp_KeccakF1600_StatePer_1_fu_118_state_ce0;
    sc_signal< sc_logic > grp_KeccakF1600_StatePer_1_fu_118_state_we0;
    sc_signal< sc_lv<64> > grp_KeccakF1600_StatePer_1_fu_118_state_d0;
    sc_signal< sc_lv<5> > grp_KeccakF1600_StatePer_1_fu_118_state_address1;
    sc_signal< sc_logic > grp_KeccakF1600_StatePer_1_fu_118_state_ce1;
    sc_signal< sc_logic > grp_KeccakF1600_StatePer_1_fu_118_state_we1;
    sc_signal< sc_lv<64> > grp_KeccakF1600_StatePer_1_fu_118_state_d1;
    sc_signal< sc_lv<1> > ap_phi_mux_p_01_i_phi_fu_75_p4;
    sc_signal< sc_lv<1> > p_01_i_reg_70;
    sc_signal< sc_lv<8> > p_0_rec_i_reg_83;
    sc_signal< sc_lv<5> > i_0_i_reg_95;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > icmp_ln47_fu_157_p2;
    sc_signal< sc_lv<4> > i_0_i1_reg_107;
    sc_signal< sc_logic > grp_KeccakF1600_StatePer_1_fu_118_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<64> > zext_ln478_fu_138_p1;
    sc_signal< sc_lv<64> > zext_ln48_2_fu_210_p1;
    sc_signal< sc_lv<3> > trunc_ln48_fu_169_p1;
    sc_signal< sc_lv<6> > shl_ln2_fu_173_p3;
    sc_signal< sc_lv<64> > zext_ln48_fu_181_p1;
    sc_signal< sc_lv<64> > lshr_ln48_fu_185_p2;
    sc_signal< sc_lv<8> > zext_ln48_1_fu_195_p1;
    sc_signal< sc_lv<8> > add_ln48_1_fu_199_p2;
    sc_signal< sc_lv<8> > add_ln48_fu_204_p2;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<5> ap_const_lv5_11;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<8> ap_const_lv8_88;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln479_fu_143_p2();
    void thread_add_ln48_1_fu_199_p2();
    void thread_add_ln48_fu_204_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_mux_p_01_i_phi_fu_75_p4();
    void thread_ap_ready();
    void thread_grp_KeccakF1600_StatePer_1_fu_118_ap_start();
    void thread_i_11_fu_163_p2();
    void thread_i_fu_132_p2();
    void thread_icmp_ln477_fu_126_p2();
    void thread_icmp_ln47_fu_157_p2();
    void thread_lshr_ln48_fu_185_p2();
    void thread_out_r_address0();
    void thread_out_r_ce0();
    void thread_out_r_d0();
    void thread_out_r_we0();
    void thread_shl_ln2_fu_173_p3();
    void thread_shl_ln_fu_149_p3();
    void thread_state_s_address0();
    void thread_state_s_address1();
    void thread_state_s_ce0();
    void thread_state_s_ce1();
    void thread_state_s_d0();
    void thread_state_s_d1();
    void thread_state_s_we0();
    void thread_state_s_we1();
    void thread_trunc_ln48_fu_169_p1();
    void thread_zext_ln478_fu_138_p1();
    void thread_zext_ln48_1_fu_195_p1();
    void thread_zext_ln48_2_fu_210_p1();
    void thread_zext_ln48_fu_181_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
