// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module load64_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_0_read,
        x_1_read,
        x_offset,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] x_0_read;
input  [7:0] x_1_read;
input  [63:0] x_offset;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[63:0] ap_return;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] trunc_ln31_fu_66_p1;
reg   [0:0] trunc_ln31_reg_139;
wire   [3:0] i_fu_76_p2;
wire    ap_CS_fsm_state2;
wire   [63:0] r_fu_123_p2;
wire   [0:0] icmp_ln30_fu_70_p2;
reg   [3:0] i_0_reg_44;
reg   [63:0] r_0_reg_55;
wire   [0:0] trunc_ln31_1_fu_82_p1;
wire   [0:0] xor_ln31_fu_86_p2;
wire   [7:0] select_ln31_fu_91_p3;
wire   [2:0] trunc_ln31_2_fu_101_p1;
wire   [5:0] shl_ln_fu_105_p3;
wire   [63:0] zext_ln31_fu_97_p1;
wire   [63:0] zext_ln31_1_fu_113_p1;
wire   [63:0] shl_ln31_fu_117_p2;
reg   [63:0] ap_return_preg;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_return_preg = 64'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 64'd0;
    end else begin
        if (((icmp_ln30_fu_70_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_return_preg <= r_0_reg_55;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_70_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_44 <= i_fu_76_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_44 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_70_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        r_0_reg_55 <= r_fu_123_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_55 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        trunc_ln31_reg_139 <= trunc_ln31_fu_66_p1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln30_fu_70_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln30_fu_70_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln30_fu_70_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_return = r_0_reg_55;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln30_fu_70_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign i_fu_76_p2 = (i_0_reg_44 + 4'd1);

assign icmp_ln30_fu_70_p2 = ((i_0_reg_44 == 4'd8) ? 1'b1 : 1'b0);

assign r_fu_123_p2 = (shl_ln31_fu_117_p2 | r_0_reg_55);

assign select_ln31_fu_91_p3 = ((xor_ln31_fu_86_p2[0:0] === 1'b1) ? x_1_read : x_0_read);

assign shl_ln31_fu_117_p2 = zext_ln31_fu_97_p1 << zext_ln31_1_fu_113_p1;

assign shl_ln_fu_105_p3 = {{trunc_ln31_2_fu_101_p1}, {3'd0}};

assign trunc_ln31_1_fu_82_p1 = i_0_reg_44[0:0];

assign trunc_ln31_2_fu_101_p1 = i_0_reg_44[2:0];

assign trunc_ln31_fu_66_p1 = x_offset[0:0];

assign xor_ln31_fu_86_p2 = (trunc_ln31_reg_139 ^ trunc_ln31_1_fu_82_p1);

assign zext_ln31_1_fu_113_p1 = shl_ln_fu_105_p3;

assign zext_ln31_fu_97_p1 = select_ln31_fu_91_p3;

endmodule //load64_3
