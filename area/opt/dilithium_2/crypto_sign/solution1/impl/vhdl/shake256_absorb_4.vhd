-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity shake256_absorb_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    state_s_ce0 : OUT STD_LOGIC;
    state_s_we0 : OUT STD_LOGIC;
    state_s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    state_s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    state_s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    state_s_ce1 : OUT STD_LOGIC;
    state_s_we1 : OUT STD_LOGIC;
    state_s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    state_s_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    in_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_offset : IN STD_LOGIC_VECTOR (12 downto 0);
    inlen : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (9 downto 0) );
end;


architecture behav of shake256_absorb_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_58 : STD_LOGIC_VECTOR (6 downto 0) := "1011000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv64_58 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001011000";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv64_FFFFFFFFFFFFFFA8 : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111110101000";
    constant ap_const_lv64_88 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010001000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv64_FFFFFFFFFFFFFF78 : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111101111000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln388_fu_378_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln400_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln400_reg_829 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln388_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln402_fu_400_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln402_reg_833 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_fu_413_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_841 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln402_2_fu_436_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln402_2_reg_846 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln401_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_s_addr_reg_851 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln409_1_fu_466_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln409_1_reg_856 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_KeccakF1600_StatePer_1_fu_356_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_356_ap_done : STD_LOGIC;
    signal ap_block_state5_on_subcall_done : BOOLEAN;
    signal add_ln411_fu_473_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln411_reg_861 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln411_2_fu_479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln411_2_reg_866 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln409_fu_489_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln409_reg_875 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln409_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln418_2_fu_507_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln418_2_reg_880 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_reg_885 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_11_fu_527_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_11_reg_894 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln411_2_fu_551_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln411_2_reg_899 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln410_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_s_addr_2_reg_904 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln412_fu_562_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln412_reg_909 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln415_fu_568_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln415_reg_914 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln417_fu_579_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln417_reg_922 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln418_2_fu_607_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln418_2_reg_927 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln417_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_s_addr_1_reg_932 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln420_fu_638_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln420_reg_937 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln420_fu_642_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln420_reg_942 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln420_fu_648_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln420_reg_947 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln421_fu_652_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln421_reg_952 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln421_fu_657_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln421_reg_957 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln423_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln423_reg_963 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_12_fu_673_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal zext_ln427_fu_684_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln427_reg_975 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln424_fu_667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln426_fu_687_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln426_reg_980 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_13_fu_704_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_13_reg_988 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln426_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_14_fu_736_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_14_reg_1001 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal icmp_ln30_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_s_addr_3_reg_1011 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln429_fu_761_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln429_reg_1016 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_fu_790_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_ce0 : STD_LOGIC;
    signal t_we0 : STD_LOGIC;
    signal t_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_356_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_356_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_356_state_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_356_state_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_356_state_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_356_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_356_state_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_356_state_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_356_state_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_356_state_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_load64_1_fu_364_ap_start : STD_LOGIC;
    signal grp_load64_1_fu_364_ap_done : STD_LOGIC;
    signal grp_load64_1_fu_364_ap_idle : STD_LOGIC;
    signal grp_load64_1_fu_364_ap_ready : STD_LOGIC;
    signal grp_load64_1_fu_364_x_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_load64_1_fu_364_x_ce0 : STD_LOGIC;
    signal grp_load64_1_fu_364_x_offset : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_load64_1_fu_364_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_ln388_reg_199 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_i_reg_210 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_phi_mux_p_27_i5_phi_fu_225_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_27_i5_reg_221 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_p_23_i_phi_fu_237_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_23_i_reg_233 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln404_fu_452_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_p_2_i_phi_fu_249_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_2_i_reg_246 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv_i_reg_256 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_38_rec_i_reg_267 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_i_reg_279 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_3_i_reg_290 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_4_i_reg_301 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_i_reg_312 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_0_i2_reg_323 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_0_i3_reg_335 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln429_fu_803_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_state_pos_write_assi_phi_fu_350_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal state_pos_write_assi_reg_347 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_KeccakF1600_StatePer_1_fu_356_ap_start_reg : STD_LOGIC := '0';
    signal grp_load64_1_fu_364_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln388_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln402_1_fu_447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln411_1_fu_557_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln418_1_fu_618_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln425_fu_679_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln427_1_fu_725_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_fu_742_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln428_fu_756_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_371_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln428_fu_796_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_419_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln402_fu_427_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln402_1_fu_431_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln401_fu_403_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln402_fu_441_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln409_fu_458_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln409_fu_462_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln411_fu_470_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln418_1_fu_493_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln418_fu_503_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln3_fu_533_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln411_fu_541_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln411_1_fu_545_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln418_fu_585_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln2_fu_589_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln418_fu_597_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln418_fu_601_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln418_1_fu_613_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln_fu_623_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln419_fu_634_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln419_1_fu_630_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln426_1_fu_695_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln426_fu_691_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln427_fu_710_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln427_1_fu_715_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln427_2_fu_720_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln_fu_747_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln31_fu_768_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln4_fu_772_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_1_fu_764_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_2_fu_780_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln31_fu_784_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);

    component KeccakF1600_StatePer_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component load64_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        x_offset : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component shake256_absorb_4_t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    t_U : component shake256_absorb_4_t
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t_address0,
        ce0 => t_ce0,
        we0 => t_we0,
        d0 => t_d0,
        q0 => t_q0);

    grp_KeccakF1600_StatePer_1_fu_356 : component KeccakF1600_StatePer_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePer_1_fu_356_ap_start,
        ap_done => grp_KeccakF1600_StatePer_1_fu_356_ap_done,
        ap_idle => grp_KeccakF1600_StatePer_1_fu_356_ap_idle,
        ap_ready => grp_KeccakF1600_StatePer_1_fu_356_ap_ready,
        state_address0 => grp_KeccakF1600_StatePer_1_fu_356_state_address0,
        state_ce0 => grp_KeccakF1600_StatePer_1_fu_356_state_ce0,
        state_we0 => grp_KeccakF1600_StatePer_1_fu_356_state_we0,
        state_d0 => grp_KeccakF1600_StatePer_1_fu_356_state_d0,
        state_q0 => state_s_q0,
        state_address1 => grp_KeccakF1600_StatePer_1_fu_356_state_address1,
        state_ce1 => grp_KeccakF1600_StatePer_1_fu_356_state_ce1,
        state_we1 => grp_KeccakF1600_StatePer_1_fu_356_state_we1,
        state_d1 => grp_KeccakF1600_StatePer_1_fu_356_state_d1,
        state_q1 => state_s_q1);

    grp_load64_1_fu_364 : component load64_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_load64_1_fu_364_ap_start,
        ap_done => grp_load64_1_fu_364_ap_done,
        ap_idle => grp_load64_1_fu_364_ap_idle,
        ap_ready => grp_load64_1_fu_364_ap_ready,
        x_address0 => grp_load64_1_fu_364_x_address0,
        x_ce0 => grp_load64_1_fu_364_x_ce0,
        x_q0 => in_r_q0,
        x_offset => grp_load64_1_fu_364_x_offset,
        ap_return => grp_load64_1_fu_364_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv10_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_return_preg <= ap_phi_mux_state_pos_write_assi_phi_fu_350_p4;
                end if; 
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_1_fu_356_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_1_fu_356_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln401_fu_407_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((icmp_ln410_fu_521_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
                    grp_KeccakF1600_StatePer_1_fu_356_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_1_fu_356_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_1_fu_356_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_load64_1_fu_364_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_load64_1_fu_364_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln401_fu_407_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((icmp_ln417_fu_574_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((icmp_ln410_fu_521_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
                    grp_load64_1_fu_364_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_load64_1_fu_364_ap_ready = ap_const_logic_1)) then 
                    grp_load64_1_fu_364_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i2_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln426_fu_699_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                i_0_i2_reg_323 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i_0_i2_reg_323 <= i_14_reg_1001;
            end if; 
        end if;
    end process;

    i_1_i_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln388_fu_389_p2 = ap_const_lv1_1) and (icmp_ln400_fu_395_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_i_reg_210 <= ap_const_lv4_0;
            elsif (((grp_load64_1_fu_364_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_1_i_reg_210 <= i_reg_841;
            end if; 
        end if;
    end process;

    i_2_i_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln409_fu_483_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_2_i_reg_279 <= ap_const_lv5_0;
            elsif (((grp_load64_1_fu_364_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_2_i_reg_279 <= i_11_reg_894;
            end if; 
        end if;
    end process;

    i_3_i_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_load64_1_fu_364_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i_3_i_reg_290 <= add_ln417_reg_922;
            elsif (((icmp_ln409_fu_483_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_3_i_reg_290 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_4_i_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln423_fu_661_p2 = ap_const_lv1_0) and (icmp_ln417_fu_574_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_4_i_reg_301 <= ap_const_lv4_0;
            elsif (((icmp_ln424_fu_667_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i_4_i_reg_301 <= i_12_fu_673_p2;
            end if; 
        end if;
    end process;

    i_5_i_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln424_fu_667_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i_5_i_reg_312 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_5_i_reg_312 <= i_13_reg_988;
            end if; 
        end if;
    end process;

    indvars_iv_i_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then 
                indvars_iv_i_reg_256 <= ap_phi_mux_p_2_i_phi_fu_249_p4;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_KeccakF1600_StatePer_1_fu_356_ap_done = ap_const_logic_1))) then 
                indvars_iv_i_reg_256 <= add_ln415_reg_914;
            end if; 
        end if;
    end process;

    p_23_i_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln388_fu_389_p2 = ap_const_lv1_1) and (icmp_ln400_fu_395_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_23_i_reg_233(4) <= '1';
            elsif (((icmp_ln400_reg_829 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then 
                p_23_i_reg_233(4) <= '0';
            end if; 
        end if;
    end process;

    p_27_i5_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln388_fu_389_p2 = ap_const_lv1_1) and (icmp_ln400_fu_395_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_27_i5_reg_221(3) <= '0';
                p_27_i5_reg_221(4) <= '0';
                p_27_i5_reg_221(6) <= '0';
            elsif (((icmp_ln400_reg_829 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then 
                p_27_i5_reg_221(3) <= '1';
                p_27_i5_reg_221(4) <= '1';
                p_27_i5_reg_221(6) <= '1';
            end if; 
        end if;
    end process;

    p_2_i_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln388_fu_389_p2 = ap_const_lv1_1) and (icmp_ln400_fu_395_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_2_i_reg_246 <= inlen;
            elsif (((icmp_ln400_reg_829 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then 
                p_2_i_reg_246 <= add_ln404_fu_452_p2;
            end if; 
        end if;
    end process;

    p_38_rec_i_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then 
                p_38_rec_i_reg_267 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_KeccakF1600_StatePer_1_fu_356_ap_done = ap_const_logic_1))) then 
                p_38_rec_i_reg_267 <= add_ln412_reg_909;
            end if; 
        end if;
    end process;

    phi_ln388_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln388_fu_389_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln388_reg_199 <= add_ln388_fu_378_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln388_reg_199 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    r_0_i3_reg_335_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln426_fu_699_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                r_0_i3_reg_335 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                r_0_i3_reg_335 <= r_fu_790_p2;
            end if; 
        end if;
    end process;

    state_pos_write_assi_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln423_fu_661_p2 = ap_const_lv1_1) and (icmp_ln417_fu_574_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                state_pos_write_assi_reg_347 <= zext_ln421_fu_657_p1;
            elsif (((icmp_ln423_reg_963 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                state_pos_write_assi_reg_347 <= add_ln429_fu_803_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln410_fu_521_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                add_ln411_2_reg_899 <= add_ln411_2_fu_551_p2;
                state_s_addr_2_reg_904 <= zext_ln411_1_fu_557_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then
                add_ln411_reg_861 <= add_ln411_fu_473_p2;
                    zext_ln409_1_reg_856(5 downto 4) <= zext_ln409_1_fu_466_p1(5 downto 4);
                    zext_ln411_2_reg_866(11 downto 0) <= zext_ln411_2_fu_479_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln410_fu_521_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                add_ln412_reg_909 <= add_ln412_fu_562_p2;
                add_ln415_reg_914 <= add_ln415_fu_568_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln417_reg_922 <= add_ln417_fu_579_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln417_fu_574_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                add_ln418_2_reg_927 <= add_ln418_2_fu_607_p2;
                state_s_addr_1_reg_932 <= zext_ln418_1_fu_618_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln417_fu_574_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    add_ln421_reg_952(8 downto 3) <= add_ln421_fu_652_p2(8 downto 3);
                icmp_ln423_reg_963 <= icmp_ln423_fu_661_p2;
                sub_ln420_reg_942 <= sub_ln420_fu_642_p2;
                trunc_ln420_reg_947 <= trunc_ln420_fu_648_p1;
                    zext_ln420_reg_937(7 downto 3) <= zext_ln420_fu_638_p1(7 downto 3);
                    zext_ln421_reg_957(8 downto 3) <= zext_ln421_fu_657_p1(8 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_11_reg_894 <= i_11_fu_527_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                i_13_reg_988 <= i_13_fu_704_p2;
                    zext_ln426_reg_980(31 downto 0) <= zext_ln426_fu_687_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                i_14_reg_1001 <= i_14_fu_736_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_reg_841 <= i_fu_413_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln388_fu_389_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln400_reg_829 <= icmp_ln400_fu_395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_730_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                state_s_addr_3_reg_1011 <= zext_ln428_fu_756_p1(5 - 1 downto 0);
                trunc_ln429_reg_1016 <= trunc_ln429_fu_761_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln401_fu_407_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                state_s_addr_reg_851 <= zext_ln402_1_fu_447_p1(5 - 1 downto 0);
                    zext_ln402_2_reg_846(11 downto 0) <= zext_ln402_2_fu_436_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln409_fu_483_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_reg_885 <= indvars_iv_i_reg_256(7 downto 3);
                trunc_ln409_reg_875 <= trunc_ln409_fu_489_p1;
                    zext_ln418_2_reg_880(2 downto 1) <= zext_ln418_2_fu_507_p1(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln388_fu_389_p2 = ap_const_lv1_1) and (icmp_ln400_fu_395_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln402_reg_833 <= trunc_ln402_fu_400_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln424_fu_667_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    zext_ln427_reg_975(11 downto 0) <= zext_ln427_fu_684_p1(11 downto 0);
            end if;
        end if;
    end process;
    zext_ln402_2_reg_846(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln409_1_reg_856(3 downto 0) <= "0000";
    zext_ln409_1_reg_856(8 downto 6) <= "000";
    zext_ln411_2_reg_866(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln418_2_reg_880(0) <= '0';
    zext_ln418_2_reg_880(4 downto 3) <= "00";
    zext_ln420_reg_937(2 downto 0) <= "000";
    zext_ln420_reg_937(13 downto 8) <= "000000";
    add_ln421_reg_952(2 downto 0) <= "000";
    zext_ln421_reg_957(2 downto 0) <= "000";
    zext_ln421_reg_957(9) <= '0';
    zext_ln427_reg_975(13 downto 12) <= "00";
    zext_ln426_reg_980(63 downto 32) <= "00000000000000000000000000000000";
    p_27_i5_reg_221(2 downto 0) <= "000";
    p_27_i5_reg_221(5) <= '0';
    p_23_i_reg_233(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln400_fu_395_p2, icmp_ln388_fu_389_p2, ap_CS_fsm_state3, icmp_ln401_fu_407_p2, ap_CS_fsm_state5, grp_KeccakF1600_StatePer_1_fu_356_ap_done, ap_block_state5_on_subcall_done, ap_CS_fsm_state6, icmp_ln409_fu_483_p2, ap_CS_fsm_state7, icmp_ln410_fu_521_p2, ap_CS_fsm_state10, icmp_ln417_fu_574_p2, icmp_ln423_fu_661_p2, ap_CS_fsm_state12, icmp_ln424_fu_667_p2, ap_CS_fsm_state13, icmp_ln426_fu_699_p2, ap_CS_fsm_state15, icmp_ln30_fu_730_p2, grp_load64_1_fu_364_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state8, ap_CS_fsm_state11)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln388_fu_389_p2 = ap_const_lv1_1) and (icmp_ln400_fu_395_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((icmp_ln388_fu_389_p2 = ap_const_lv1_1) and (icmp_ln400_fu_395_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln401_fu_407_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((grp_load64_1_fu_364_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln409_fu_483_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln410_fu_521_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((grp_load64_1_fu_364_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_KeccakF1600_StatePer_1_fu_356_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln423_fu_661_p2 = ap_const_lv1_0) and (icmp_ln417_fu_574_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif (((icmp_ln423_fu_661_p2 = ap_const_lv1_1) and (icmp_ln417_fu_574_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((grp_load64_1_fu_364_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln424_fu_667_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln426_fu_699_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln30_fu_730_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln388_fu_378_p2 <= std_logic_vector(unsigned(phi_ln388_reg_199) + unsigned(ap_const_lv3_1));
    add_ln402_1_fu_431_p2 <= std_logic_vector(unsigned(trunc_ln402_reg_833) + unsigned(zext_ln402_fu_427_p1));
    add_ln402_fu_441_p2 <= std_logic_vector(unsigned(zext_ln401_fu_403_p1) + unsigned(ap_const_lv5_6));
    add_ln404_fu_452_p2 <= std_logic_vector(unsigned(inlen) + unsigned(ap_const_lv64_FFFFFFFFFFFFFFA8));
    add_ln411_1_fu_545_p2 <= std_logic_vector(unsigned(zext_ln411_fu_541_p1) + unsigned(p_38_rec_i_reg_267));
    add_ln411_2_fu_551_p2 <= std_logic_vector(unsigned(zext_ln411_2_reg_866) + unsigned(add_ln411_1_fu_545_p2));
    add_ln411_fu_473_p2 <= std_logic_vector(unsigned(zext_ln409_fu_462_p1) + unsigned(trunc_ln411_fu_470_p1));
    add_ln412_fu_562_p2 <= std_logic_vector(unsigned(p_38_rec_i_reg_267) + unsigned(ap_const_lv64_88));
    add_ln415_fu_568_p2 <= std_logic_vector(unsigned(indvars_iv_i_reg_256) + unsigned(ap_const_lv64_FFFFFFFFFFFFFF78));
    add_ln417_fu_579_p2 <= std_logic_vector(unsigned(i_3_i_reg_290) + unsigned(ap_const_lv5_1));
    add_ln418_1_fu_613_p2 <= std_logic_vector(unsigned(zext_ln418_2_reg_880) + unsigned(i_3_i_reg_290));
    add_ln418_2_fu_607_p2 <= std_logic_vector(unsigned(zext_ln411_2_reg_866) + unsigned(add_ln418_fu_601_p2));
    add_ln418_fu_601_p2 <= std_logic_vector(unsigned(zext_ln418_fu_597_p1) + unsigned(p_38_rec_i_reg_267));
    add_ln421_fu_652_p2 <= std_logic_vector(unsigned(zext_ln409_1_reg_856) + unsigned(zext_ln419_1_fu_630_p1));
    add_ln427_1_fu_715_p2 <= std_logic_vector(unsigned(add_ln427_fu_710_p2) + unsigned(trunc_ln409_reg_875));
    add_ln427_2_fu_720_p2 <= std_logic_vector(unsigned(add_ln427_1_fu_715_p2) + unsigned(zext_ln427_reg_975));
    add_ln427_fu_710_p2 <= std_logic_vector(unsigned(zext_ln420_reg_937) + unsigned(trunc_ln426_fu_691_p1));
    add_ln429_fu_803_p2 <= std_logic_vector(unsigned(trunc_ln429_reg_1016) + unsigned(zext_ln421_reg_957));
    and_ln_fu_623_p3 <= (tmp_reg_885 & ap_const_lv3_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state5_on_subcall_done_assign_proc : process(icmp_ln400_reg_829, grp_KeccakF1600_StatePer_1_fu_356_ap_done)
    begin
                ap_block_state5_on_subcall_done <= ((icmp_ln400_reg_829 = ap_const_lv1_0) and (grp_KeccakF1600_StatePer_1_fu_356_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_23_i_phi_fu_237_p4_assign_proc : process(icmp_ln400_reg_829, ap_CS_fsm_state5, p_23_i_reg_233)
    begin
        if (((icmp_ln400_reg_829 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_phi_mux_p_23_i_phi_fu_237_p4 <= ap_const_lv5_0;
        else 
            ap_phi_mux_p_23_i_phi_fu_237_p4 <= p_23_i_reg_233;
        end if; 
    end process;


    ap_phi_mux_p_27_i5_phi_fu_225_p4_assign_proc : process(icmp_ln400_reg_829, ap_CS_fsm_state5, p_27_i5_reg_221)
    begin
        if (((icmp_ln400_reg_829 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_phi_mux_p_27_i5_phi_fu_225_p4 <= ap_const_lv7_58;
        else 
            ap_phi_mux_p_27_i5_phi_fu_225_p4 <= p_27_i5_reg_221;
        end if; 
    end process;


    ap_phi_mux_p_2_i_phi_fu_249_p4_assign_proc : process(icmp_ln400_reg_829, ap_CS_fsm_state5, add_ln404_fu_452_p2, p_2_i_reg_246)
    begin
        if (((icmp_ln400_reg_829 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_phi_mux_p_2_i_phi_fu_249_p4 <= add_ln404_fu_452_p2;
        else 
            ap_phi_mux_p_2_i_phi_fu_249_p4 <= p_2_i_reg_246;
        end if; 
    end process;


    ap_phi_mux_state_pos_write_assi_phi_fu_350_p4_assign_proc : process(icmp_ln423_reg_963, add_ln429_fu_803_p2, state_pos_write_assi_reg_347, ap_CS_fsm_state17)
    begin
        if (((icmp_ln423_reg_963 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            ap_phi_mux_state_pos_write_assi_phi_fu_350_p4 <= add_ln429_fu_803_p2;
        else 
            ap_phi_mux_state_pos_write_assi_phi_fu_350_p4 <= state_pos_write_assi_reg_347;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_state_pos_write_assi_phi_fu_350_p4, ap_CS_fsm_state17, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_return <= ap_phi_mux_state_pos_write_assi_phi_fu_350_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    grp_KeccakF1600_StatePer_1_fu_356_ap_start <= grp_KeccakF1600_StatePer_1_fu_356_ap_start_reg;
    grp_fu_371_p2 <= (state_s_q0 xor grp_load64_1_fu_364_ap_return);
    grp_load64_1_fu_364_ap_start <= grp_load64_1_fu_364_ap_start_reg;

    grp_load64_1_fu_364_x_offset_assign_proc : process(zext_ln402_2_reg_846, add_ln411_2_reg_899, add_ln418_2_reg_927, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_load64_1_fu_364_x_offset <= add_ln418_2_reg_927;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_load64_1_fu_364_x_offset <= add_ln411_2_reg_899;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_load64_1_fu_364_x_offset <= zext_ln402_2_reg_846;
        else 
            grp_load64_1_fu_364_x_offset <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_11_fu_527_p2 <= std_logic_vector(unsigned(i_2_i_reg_279) + unsigned(ap_const_lv5_1));
    i_12_fu_673_p2 <= std_logic_vector(unsigned(i_4_i_reg_301) + unsigned(ap_const_lv4_1));
    i_13_fu_704_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(i_5_i_reg_312));
    i_14_fu_736_p2 <= std_logic_vector(unsigned(i_0_i2_reg_323) + unsigned(ap_const_lv4_1));
    i_fu_413_p2 <= std_logic_vector(unsigned(i_1_i_reg_210) + unsigned(ap_const_lv4_1));
    icmp_ln30_fu_730_p2 <= "1" when (i_0_i2_reg_323 = ap_const_lv4_8) else "0";
    icmp_ln388_fu_389_p2 <= "1" when (phi_ln388_reg_199 = ap_const_lv3_7) else "0";
    icmp_ln400_fu_395_p2 <= "1" when (unsigned(inlen) < unsigned(ap_const_lv64_58)) else "0";
    icmp_ln401_fu_407_p2 <= "1" when (i_1_i_reg_210 = ap_const_lv4_B) else "0";
    icmp_ln409_fu_483_p2 <= "1" when (unsigned(indvars_iv_i_reg_256) < unsigned(ap_const_lv64_88)) else "0";
    icmp_ln410_fu_521_p2 <= "1" when (i_2_i_reg_279 = ap_const_lv5_11) else "0";
    icmp_ln417_fu_574_p2 <= "1" when (i_3_i_reg_290 = tmp_reg_885) else "0";
    icmp_ln423_fu_661_p2 <= "1" when (indvars_iv_i_reg_256 = zext_ln419_fu_634_p1) else "0";
    icmp_ln424_fu_667_p2 <= "1" when (i_4_i_reg_301 = ap_const_lv4_8) else "0";
    icmp_ln426_fu_699_p2 <= "1" when (unsigned(zext_ln426_1_fu_695_p1) < unsigned(trunc_ln420_reg_947)) else "0";

    in_r_address0_assign_proc : process(ap_CS_fsm_state13, grp_load64_1_fu_364_x_address0, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state11, zext_ln427_1_fu_725_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            in_r_address0 <= zext_ln427_1_fu_725_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            in_r_address0 <= grp_load64_1_fu_364_x_address0;
        else 
            in_r_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    in_r_ce0_assign_proc : process(ap_CS_fsm_state13, grp_load64_1_fu_364_x_ce0, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            in_r_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            in_r_ce0 <= grp_load64_1_fu_364_x_ce0;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln_fu_747_p4 <= add_ln421_reg_952(8 downto 3);
    r_fu_790_p2 <= (shl_ln31_fu_784_p2 or r_0_i3_reg_335);
        sext_ln409_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_p_23_i_phi_fu_237_p4),6));

        sext_ln418_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln418_1_fu_493_p4),3));

    shl_ln2_fu_589_p3 <= (trunc_ln418_fu_585_p1 & ap_const_lv3_0);
    shl_ln31_fu_784_p2 <= std_logic_vector(shift_left(unsigned(zext_ln31_1_fu_764_p1),to_integer(unsigned('0' & zext_ln31_2_fu_780_p1(31-1 downto 0)))));
    shl_ln3_fu_533_p3 <= (i_2_i_reg_279 & ap_const_lv3_0);
    shl_ln4_fu_772_p3 <= (trunc_ln31_fu_768_p1 & ap_const_lv3_0);
    shl_ln_fu_419_p3 <= (i_1_i_reg_210 & ap_const_lv3_0);

    state_s_address0_assign_proc : process(icmp_ln400_reg_829, ap_CS_fsm_state3, icmp_ln401_fu_407_p2, state_s_addr_reg_851, ap_CS_fsm_state5, ap_CS_fsm_state7, icmp_ln410_fu_521_p2, state_s_addr_2_reg_904, ap_CS_fsm_state10, state_s_addr_1_reg_932, ap_CS_fsm_state15, state_s_addr_3_reg_1011, grp_KeccakF1600_StatePer_1_fu_356_state_address0, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state17, zext_ln402_1_fu_447_p1, zext_ln411_1_fu_557_p1, zext_ln418_1_fu_618_p1, zext_ln428_fu_756_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            state_s_address0 <= state_s_addr_3_reg_1011;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_s_address0 <= zext_ln428_fu_756_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_s_address0 <= state_s_addr_1_reg_932;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_s_address0 <= zext_ln418_1_fu_618_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_s_address0 <= state_s_addr_2_reg_904;
        elsif (((icmp_ln410_fu_521_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            state_s_address0 <= zext_ln411_1_fu_557_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_s_address0 <= state_s_addr_reg_851;
        elsif (((icmp_ln401_fu_407_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_s_address0 <= zext_ln402_1_fu_447_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or ((icmp_ln400_reg_829 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            state_s_address0 <= grp_KeccakF1600_StatePer_1_fu_356_state_address0;
        else 
            state_s_address0 <= "XXXXX";
        end if; 
    end process;

    state_s_address1 <= grp_KeccakF1600_StatePer_1_fu_356_state_address1;

    state_s_ce0_assign_proc : process(icmp_ln400_reg_829, ap_CS_fsm_state3, icmp_ln401_fu_407_p2, ap_CS_fsm_state5, ap_CS_fsm_state7, icmp_ln410_fu_521_p2, ap_CS_fsm_state10, ap_CS_fsm_state15, grp_KeccakF1600_StatePer_1_fu_356_state_ce0, grp_load64_1_fu_364_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln401_fu_407_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((grp_load64_1_fu_364_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((grp_load64_1_fu_364_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((grp_load64_1_fu_364_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln410_fu_521_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            state_s_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or ((icmp_ln400_reg_829 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            state_s_ce0 <= grp_KeccakF1600_StatePer_1_fu_356_state_ce0;
        else 
            state_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_s_ce1_assign_proc : process(icmp_ln400_reg_829, ap_CS_fsm_state5, grp_KeccakF1600_StatePer_1_fu_356_state_ce1, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((icmp_ln400_reg_829 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            state_s_ce1 <= grp_KeccakF1600_StatePer_1_fu_356_state_ce1;
        else 
            state_s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_s_d0_assign_proc : process(icmp_ln400_reg_829, ap_CS_fsm_state5, grp_KeccakF1600_StatePer_1_fu_356_state_d0, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state17, grp_fu_371_p2, xor_ln428_fu_796_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            state_s_d0 <= xor_ln428_fu_796_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_s_d0 <= grp_fu_371_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or ((icmp_ln400_reg_829 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            state_s_d0 <= grp_KeccakF1600_StatePer_1_fu_356_state_d0;
        else 
            state_s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    state_s_d1 <= grp_KeccakF1600_StatePer_1_fu_356_state_d1;

    state_s_we0_assign_proc : process(icmp_ln400_reg_829, ap_CS_fsm_state5, icmp_ln423_reg_963, grp_KeccakF1600_StatePer_1_fu_356_state_we0, grp_load64_1_fu_364_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state17)
    begin
        if ((((icmp_ln423_reg_963 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((grp_load64_1_fu_364_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((grp_load64_1_fu_364_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((grp_load64_1_fu_364_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            state_s_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or ((icmp_ln400_reg_829 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            state_s_we0 <= grp_KeccakF1600_StatePer_1_fu_356_state_we0;
        else 
            state_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_s_we1_assign_proc : process(icmp_ln400_reg_829, ap_CS_fsm_state5, grp_KeccakF1600_StatePer_1_fu_356_state_we1, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((icmp_ln400_reg_829 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            state_s_we1 <= grp_KeccakF1600_StatePer_1_fu_356_state_we1;
        else 
            state_s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln420_fu_642_p2 <= std_logic_vector(unsigned(indvars_iv_i_reg_256) - unsigned(zext_ln419_fu_634_p1));

    t_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12, zext_ln426_reg_980, ap_CS_fsm_state15, ap_CS_fsm_state14, zext_ln388_fu_384_p1, zext_ln425_fu_679_p1, zext_ln31_fu_742_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            t_address0 <= zext_ln31_fu_742_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            t_address0 <= zext_ln426_reg_980(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            t_address0 <= zext_ln425_fu_679_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_address0 <= zext_ln388_fu_384_p1(3 - 1 downto 0);
        else 
            t_address0 <= "XXX";
        end if; 
    end process;


    t_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            t_ce0 <= ap_const_logic_1;
        else 
            t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t_d0_assign_proc : process(in_r_q0, ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            t_d0 <= in_r_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            t_d0 <= ap_const_lv8_0;
        else 
            t_d0 <= "XXXXXXXX";
        end if; 
    end process;


    t_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12, icmp_ln424_fu_667_p2, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((icmp_ln424_fu_667_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            t_we0 <= ap_const_logic_1;
        else 
            t_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln31_fu_768_p1 <= i_0_i2_reg_323(3 - 1 downto 0);
    trunc_ln402_fu_400_p1 <= in_offset(12 - 1 downto 0);
    trunc_ln409_fu_489_p1 <= p_38_rec_i_reg_267(14 - 1 downto 0);
    trunc_ln411_fu_470_p1 <= in_offset(12 - 1 downto 0);
    trunc_ln418_1_fu_493_p4 <= p_23_i_reg_233(4 downto 3);
    trunc_ln418_fu_585_p1 <= i_3_i_reg_290(4 - 1 downto 0);
    trunc_ln420_fu_648_p1 <= sub_ln420_fu_642_p2(33 - 1 downto 0);
    trunc_ln426_fu_691_p1 <= i_5_i_reg_312(14 - 1 downto 0);
    trunc_ln429_fu_761_p1 <= sub_ln420_reg_942(10 - 1 downto 0);
    xor_ln428_fu_796_p2 <= (state_s_q0 xor r_0_i3_reg_335);
    zext_ln31_1_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_q0),64));
    zext_ln31_2_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln4_fu_772_p3),64));
    zext_ln31_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i2_reg_323),64));
    zext_ln388_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln388_reg_199),64));
    zext_ln401_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_i_reg_210),5));
    zext_ln402_1_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln402_fu_441_p2),64));
    zext_ln402_2_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln402_1_fu_431_p2),64));
    zext_ln402_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_419_p3),12));
    zext_ln409_1_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln409_fu_458_p1),9));
    zext_ln409_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_27_i5_phi_fu_225_p4),12));
    zext_ln411_1_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_i_reg_279),64));
    zext_ln411_2_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln411_fu_473_p2),64));
    zext_ln411_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_fu_533_p3),64));
    zext_ln418_1_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln418_1_fu_613_p2),64));
    zext_ln418_2_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln418_fu_503_p1),5));
    zext_ln418_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_589_p3),64));
    zext_ln419_1_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_623_p3),9));
    zext_ln419_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_623_p3),64));
    zext_ln420_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_623_p3),14));
    zext_ln421_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln421_fu_652_p2),10));
    zext_ln425_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_i_reg_301),64));
    zext_ln426_1_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_i_reg_312),33));
    zext_ln426_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_i_reg_312),64));
    zext_ln427_1_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln427_2_fu_720_p2),64));
    zext_ln427_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln411_reg_861),14));
    zext_ln428_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_747_p4),64));
end behav;
