-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity shake256_squeezebloc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    state_s_ce0 : OUT STD_LOGIC;
    state_s_we0 : OUT STD_LOGIC;
    state_s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    state_s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    state_s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    state_s_ce1 : OUT STD_LOGIC;
    state_s_we1 : OUT STD_LOGIC;
    state_s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    state_s_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of shake256_squeezebloc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_88 : STD_LOGIC_VECTOR (9 downto 0) := "0010001000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_137_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_236 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln477_fu_131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln479_fu_148_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln480_fu_154_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_160_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_reg_256 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal state_s_load_reg_261 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_12_fu_174_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_KeccakF1600_StatePer_1_fu_117_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_117_ap_done : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_117_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_117_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_117_state_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_117_state_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_117_state_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_117_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_117_state_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_117_state_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_117_state_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_117_state_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_01_i_reg_70 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_0_rec_i_reg_82 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_i_reg_94 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln47_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i1_reg_106 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_117_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln475_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln478_fu_143_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_3_fu_225_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln48_fu_180_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln3_fu_184_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln48_fu_192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln48_fu_196_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_1_fu_206_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln48_1_fu_210_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln48_2_fu_215_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln48_fu_219_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component KeccakF1600_StatePer_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_KeccakF1600_StatePer_1_fu_117 : component KeccakF1600_StatePer_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePer_1_fu_117_ap_start,
        ap_done => grp_KeccakF1600_StatePer_1_fu_117_ap_done,
        ap_idle => grp_KeccakF1600_StatePer_1_fu_117_ap_idle,
        ap_ready => grp_KeccakF1600_StatePer_1_fu_117_ap_ready,
        state_address0 => grp_KeccakF1600_StatePer_1_fu_117_state_address0,
        state_ce0 => grp_KeccakF1600_StatePer_1_fu_117_state_ce0,
        state_we0 => grp_KeccakF1600_StatePer_1_fu_117_state_we0,
        state_d0 => grp_KeccakF1600_StatePer_1_fu_117_state_d0,
        state_q0 => state_s_q0,
        state_address1 => grp_KeccakF1600_StatePer_1_fu_117_state_address1,
        state_ce1 => grp_KeccakF1600_StatePer_1_fu_117_state_ce1,
        state_we1 => grp_KeccakF1600_StatePer_1_fu_117_state_we1,
        state_d1 => grp_KeccakF1600_StatePer_1_fu_117_state_d1,
        state_q1 => state_s_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_1_fu_117_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_1_fu_117_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln475_fu_125_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_KeccakF1600_StatePer_1_fu_117_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_1_fu_117_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_1_fu_117_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i1_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln47_fu_168_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_0_i1_reg_106 <= i_12_fu_174_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_i1_reg_106 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln47_fu_168_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_0_i_reg_94 <= i_reg_236;
            elsif (((grp_KeccakF1600_StatePer_1_fu_117_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_i_reg_94 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_01_i_reg_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln477_fu_131_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_01_i_reg_70 <= add_ln480_fu_154_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_01_i_reg_70 <= ap_const_lv3_5;
            end if; 
        end if;
    end process;

    p_0_rec_i_reg_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln477_fu_131_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_0_rec_i_reg_82 <= add_ln479_fu_148_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0_rec_i_reg_82 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_reg_236 <= i_fu_137_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    shl_ln_reg_256(7 downto 3) <= shl_ln_fu_160_p3(7 downto 3);
                state_s_load_reg_261 <= state_s_q0;
            end if;
        end if;
    end process;
    shl_ln_reg_256(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln477_fu_131_p2, ap_CS_fsm_state6, grp_KeccakF1600_StatePer_1_fu_117_ap_done, ap_CS_fsm_state3, icmp_ln47_fu_168_p2, ap_CS_fsm_state2, icmp_ln475_fu_125_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln475_fu_125_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_KeccakF1600_StatePer_1_fu_117_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln477_fu_131_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln47_fu_168_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln479_fu_148_p2 <= std_logic_vector(unsigned(p_0_rec_i_reg_82) + unsigned(ap_const_lv10_88));
    add_ln480_fu_154_p2 <= std_logic_vector(unsigned(p_01_i_reg_70) + unsigned(ap_const_lv3_7));
    add_ln48_1_fu_210_p2 <= std_logic_vector(unsigned(zext_ln48_1_fu_206_p1) + unsigned(shl_ln_reg_256));
    add_ln48_fu_219_p2 <= std_logic_vector(unsigned(p_0_rec_i_reg_82) + unsigned(zext_ln48_2_fu_215_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln475_fu_125_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln475_fu_125_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln475_fu_125_p2)
    begin
        if (((icmp_ln475_fu_125_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_KeccakF1600_StatePer_1_fu_117_ap_start <= grp_KeccakF1600_StatePer_1_fu_117_ap_start_reg;
    i_12_fu_174_p2 <= std_logic_vector(unsigned(i_0_i1_reg_106) + unsigned(ap_const_lv4_1));
    i_fu_137_p2 <= std_logic_vector(unsigned(i_0_i_reg_94) + unsigned(ap_const_lv5_1));
    icmp_ln475_fu_125_p2 <= "1" when (p_01_i_reg_70 = ap_const_lv3_0) else "0";
    icmp_ln477_fu_131_p2 <= "1" when (i_0_i_reg_94 = ap_const_lv5_11) else "0";
    icmp_ln47_fu_168_p2 <= "1" when (i_0_i1_reg_106 = ap_const_lv4_8) else "0";
    lshr_ln48_fu_196_p2 <= std_logic_vector(shift_right(unsigned(state_s_load_reg_261),to_integer(unsigned('0' & zext_ln48_fu_192_p1(31-1 downto 0)))));
    out_r_address0 <= zext_ln48_3_fu_225_p1(10 - 1 downto 0);

    out_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= lshr_ln48_fu_196_p2(8 - 1 downto 0);

    out_r_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln47_fu_168_p2)
    begin
        if (((icmp_ln47_fu_168_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln3_fu_184_p3 <= (trunc_ln48_fu_180_p1 & ap_const_lv3_0);
    shl_ln_fu_160_p3 <= (i_0_i_reg_94 & ap_const_lv3_0);

    state_s_address0_assign_proc : process(ap_CS_fsm_state4, grp_KeccakF1600_StatePer_1_fu_117_state_address0, ap_CS_fsm_state3, zext_ln478_fu_143_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_s_address0 <= zext_ln478_fu_143_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_s_address0 <= grp_KeccakF1600_StatePer_1_fu_117_state_address0;
        else 
            state_s_address0 <= "XXXXX";
        end if; 
    end process;

    state_s_address1 <= grp_KeccakF1600_StatePer_1_fu_117_state_address1;

    state_s_ce0_assign_proc : process(ap_CS_fsm_state4, grp_KeccakF1600_StatePer_1_fu_117_state_ce0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_s_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_s_ce0 <= grp_KeccakF1600_StatePer_1_fu_117_state_ce0;
        else 
            state_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_s_ce1_assign_proc : process(grp_KeccakF1600_StatePer_1_fu_117_state_ce1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_s_ce1 <= grp_KeccakF1600_StatePer_1_fu_117_state_ce1;
        else 
            state_s_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    state_s_d0 <= grp_KeccakF1600_StatePer_1_fu_117_state_d0;
    state_s_d1 <= grp_KeccakF1600_StatePer_1_fu_117_state_d1;

    state_s_we0_assign_proc : process(grp_KeccakF1600_StatePer_1_fu_117_state_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_s_we0 <= grp_KeccakF1600_StatePer_1_fu_117_state_we0;
        else 
            state_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_s_we1_assign_proc : process(grp_KeccakF1600_StatePer_1_fu_117_state_we1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_s_we1 <= grp_KeccakF1600_StatePer_1_fu_117_state_we1;
        else 
            state_s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln48_fu_180_p1 <= i_0_i1_reg_106(3 - 1 downto 0);
    zext_ln478_fu_143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_94),64));
    zext_ln48_1_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i1_reg_106),8));
    zext_ln48_2_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln48_1_fu_210_p2),10));
    zext_ln48_3_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln48_fu_219_p2),64));
    zext_ln48_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_fu_184_p3),64));
end behav;
