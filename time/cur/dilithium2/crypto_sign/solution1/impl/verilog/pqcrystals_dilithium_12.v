// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pqcrystals_dilithium_12 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_coeffs_address0,
        a_coeffs_ce0,
        a_coeffs_we0,
        a_coeffs_d0,
        a_coeffs_q0,
        a_coeffs_offset
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] a_coeffs_address0;
output   a_coeffs_ce0;
output   a_coeffs_we0;
output  [31:0] a_coeffs_d0;
input  [31:0] a_coeffs_q0;
input  [3:0] a_coeffs_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] a_coeffs_address0;
reg a_coeffs_ce0;
reg a_coeffs_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [11:0] tmp_fu_62_p3;
reg   [11:0] tmp_reg_125;
wire   [8:0] i_fu_76_p2;
reg   [8:0] i_reg_133;
wire    ap_CS_fsm_state2;
reg   [9:0] a_coeffs_addr_reg_138;
wire   [0:0] icmp_ln32_fu_70_p2;
reg   [8:0] i_0_reg_51;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln33_1_fu_91_p1;
wire  signed [31:0] grp_fu_116_p3;
wire   [11:0] zext_ln33_fu_82_p1;
wire   [11:0] add_ln33_fu_86_p2;
wire   [31:0] add_ln36_fu_96_p2;
wire  signed [8:0] trunc_ln_fu_102_p4;
wire  signed [23:0] grp_fu_116_p1;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

crypto_sign_mac_mibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 24 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
crypto_sign_mac_mibs_U80(
    .din0(trunc_ln_fu_102_p4),
    .din1(grp_fu_116_p1),
    .din2(a_coeffs_q0),
    .dout(grp_fu_116_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_51 <= i_reg_133;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_51 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_70_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        a_coeffs_addr_reg_138 <= zext_ln33_1_fu_91_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_133 <= i_fu_76_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_reg_125[11 : 8] <= tmp_fu_62_p3[11 : 8];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_coeffs_address0 = a_coeffs_addr_reg_138;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_coeffs_address0 = zext_ln33_1_fu_91_p1;
    end else begin
        a_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        a_coeffs_ce0 = 1'b1;
    end else begin
        a_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_coeffs_we0 = 1'b1;
    end else begin
        a_coeffs_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln32_fu_70_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_fu_70_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln32_fu_70_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_coeffs_d0 = grp_fu_116_p3;

assign add_ln33_fu_86_p2 = (tmp_reg_125 + zext_ln33_fu_82_p1);

assign add_ln36_fu_96_p2 = (a_coeffs_q0 + 32'd4194304);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign grp_fu_116_p1 = 32'd4286586879;

assign i_fu_76_p2 = (i_0_reg_51 + 9'd1);

assign icmp_ln32_fu_70_p2 = ((i_0_reg_51 == 9'd256) ? 1'b1 : 1'b0);

assign tmp_fu_62_p3 = {{a_coeffs_offset}, {8'd0}};

assign trunc_ln_fu_102_p4 = {{add_ln36_fu_96_p2[31:23]}};

assign zext_ln33_1_fu_91_p1 = add_ln33_fu_86_p2;

assign zext_ln33_fu_82_p1 = i_0_reg_51;

always @ (posedge ap_clk) begin
    tmp_reg_125[7:0] <= 8'b00000000;
end

endmodule //pqcrystals_dilithium_12
