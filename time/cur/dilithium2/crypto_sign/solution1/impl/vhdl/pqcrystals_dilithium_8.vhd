-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pqcrystals_dilithium_8 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_coeffs_ce0 : OUT STD_LOGIC;
    r_coeffs_we0 : OUT STD_LOGIC;
    r_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    r_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_coeffs_ce1 : OUT STD_LOGIC;
    r_coeffs_we1 : OUT STD_LOGIC;
    r_coeffs_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    r_coeffs_offset : IN STD_LOGIC_VECTOR (3 downto 0);
    a_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    a_ce1 : OUT STD_LOGIC;
    a_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_offset : IN STD_LOGIC_VECTOR (10 downto 0) );
end;


architecture behav of pqcrystals_dilithium_8 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal trunc_ln606_fu_205_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln606_reg_667 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_fu_219_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_675 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln607_fu_225_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln607_reg_680 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln606_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln607_fu_241_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln607_reg_686 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_269_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_reg_697 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_6_reg_707 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln3_reg_722 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_reg_727 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln612_fu_472_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln612_reg_732 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln4_reg_737 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_reg_742 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_0_reg_194 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln607_1_fu_256_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln607_3_fu_284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln608_1_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln609_1_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln612_1_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln609_1_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln610_1_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln611_1_fu_533_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln612_1_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln613_1_fu_602_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln614_1_fu_622_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln616_fu_375_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln617_fu_386_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln618_fu_502_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln619_fu_513_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln620_fu_571_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln621_fu_582_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln622_fu_633_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln623_fu_644_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln607_1_fu_229_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln607_fu_237_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln606_fu_209_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln607_fu_247_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln607_fu_251_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln607_1_fu_261_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_276_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1_fu_289_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln608_fu_303_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_309_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln609_fu_331_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln609_fu_336_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln609_1_fu_340_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln612_fu_350_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln612_fu_355_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln612_1_fu_359_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln607_2_fu_265_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln616_fu_369_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln608_fu_299_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln617_fu_380_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln609_fu_391_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln_fu_395_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln609_fu_406_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_411_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln2_fu_423_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln610_fu_437_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_442_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln609_fu_402_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln618_fu_496_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln610_fu_433_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln619_fu_507_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln611_fu_521_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_526_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln1_fu_538_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln612_fu_548_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_553_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln611_fu_518_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln620_fu_565_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln612_fu_544_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln621_fu_576_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln613_fu_590_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_595_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln614_fu_610_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_615_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln613_fu_587_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln622_fu_627_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln614_fu_607_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln623_fu_638_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_0_reg_194 <= i_reg_675;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_194 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_675 <= i_fu_219_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    shl_ln_reg_697(7 downto 3) <= shl_ln_fu_269_p3(7 downto 3);
                tmp_6_reg_707 <= a_q0(7 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln606_fu_213_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                sub_ln607_reg_686 <= sub_ln607_fu_241_p2;
                trunc_ln607_reg_680 <= trunc_ln607_fu_225_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_3_reg_742 <= a_q1(7 downto 5);
                tmp_reg_727 <= a_q0(7 downto 7);
                trunc_ln3_reg_722 <= a_q0(6 downto 4);
                trunc_ln4_reg_737 <= a_q1(4 downto 2);
                trunc_ln612_reg_732 <= trunc_ln612_fu_472_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                trunc_ln606_reg_667 <= trunc_ln606_fu_205_p1;
            end if;
        end if;
    end process;
    shl_ln_reg_697(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln606_fu_213_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln606_fu_213_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln607_1_fu_256_p1, sext_ln609_1_fu_345_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_address0 <= sext_ln609_1_fu_345_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_address0 <= zext_ln607_1_fu_256_p1(12 - 1 downto 0);
        else 
            a_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    a_address1 <= sext_ln612_1_fu_364_p1(12 - 1 downto 0);

    a_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_ce1 <= ap_const_logic_1;
        else 
            a_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln607_fu_251_p2 <= std_logic_vector(unsigned(trunc_ln606_reg_667) + unsigned(sext_ln607_fu_247_p1));
    add_ln609_1_fu_340_p2 <= std_logic_vector(unsigned(a_offset) + unsigned(sext_ln609_fu_336_p1));
    add_ln609_fu_331_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(sub_ln607_reg_686));
    add_ln612_1_fu_359_p2 <= std_logic_vector(unsigned(a_offset) + unsigned(sext_ln612_fu_355_p1));
    add_ln612_fu_350_p2 <= std_logic_vector(unsigned(ap_const_lv8_2) + unsigned(sub_ln607_reg_686));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln606_fu_213_p2)
    begin
        if ((((icmp_ln606_fu_213_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln606_fu_213_p2)
    begin
        if (((icmp_ln606_fu_213_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_219_p2 <= std_logic_vector(unsigned(i_0_reg_194) + unsigned(ap_const_lv6_1));
    icmp_ln606_fu_213_p2 <= "1" when (i_0_reg_194 = ap_const_lv6_20) else "0";
    or_ln1_fu_538_p3 <= (trunc_ln612_reg_732 & tmp_reg_727);
    or_ln608_fu_303_p2 <= (shl_ln_fu_269_p3 or ap_const_lv8_1);
    or_ln609_fu_406_p2 <= (shl_ln_reg_697 or ap_const_lv8_2);
    or_ln610_fu_437_p2 <= (shl_ln_reg_697 or ap_const_lv8_3);
    or_ln611_fu_521_p2 <= (shl_ln_reg_697 or ap_const_lv8_4);
    or_ln612_fu_548_p2 <= (shl_ln_reg_697 or ap_const_lv8_5);
    or_ln613_fu_590_p2 <= (shl_ln_reg_697 or ap_const_lv8_6);
    or_ln614_fu_610_p2 <= (shl_ln_reg_697 or ap_const_lv8_7);
    or_ln_fu_395_p3 <= (trunc_ln609_fu_391_p1 & tmp_6_reg_707);

    r_coeffs_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, zext_ln607_3_fu_284_p1, zext_ln609_1_fu_418_p1, zext_ln611_1_fu_533_p1, ap_CS_fsm_state5, zext_ln613_1_fu_602_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_coeffs_address0 <= zext_ln613_1_fu_602_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_coeffs_address0 <= zext_ln611_1_fu_533_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_coeffs_address0 <= zext_ln609_1_fu_418_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_coeffs_address0 <= zext_ln607_3_fu_284_p1(10 - 1 downto 0);
        else 
            r_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, zext_ln608_1_fu_316_p1, zext_ln610_1_fu_449_p1, ap_CS_fsm_state5, zext_ln612_1_fu_560_p1, zext_ln614_1_fu_622_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_coeffs_address1 <= zext_ln614_1_fu_622_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_coeffs_address1 <= zext_ln612_1_fu_560_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_coeffs_address1 <= zext_ln610_1_fu_449_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_coeffs_address1 <= zext_ln608_1_fu_316_p1(10 - 1 downto 0);
        else 
            r_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            r_coeffs_ce0 <= ap_const_logic_1;
        else 
            r_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            r_coeffs_ce1 <= ap_const_logic_1;
        else 
            r_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state5, sext_ln616_fu_375_p1, sext_ln618_fu_502_p1, sext_ln620_fu_571_p1, sext_ln622_fu_633_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_coeffs_d0 <= sext_ln622_fu_633_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_coeffs_d0 <= sext_ln620_fu_571_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_coeffs_d0 <= sext_ln618_fu_502_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_coeffs_d0 <= sext_ln616_fu_375_p1;
        else 
            r_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_d1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state5, sext_ln617_fu_386_p1, sext_ln619_fu_513_p1, sext_ln621_fu_582_p1, sext_ln623_fu_644_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_coeffs_d1 <= sext_ln623_fu_644_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_coeffs_d1 <= sext_ln621_fu_582_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_coeffs_d1 <= sext_ln619_fu_513_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_coeffs_d1 <= sext_ln617_fu_386_p1;
        else 
            r_coeffs_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            r_coeffs_we0 <= ap_const_logic_1;
        else 
            r_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            r_coeffs_we1 <= ap_const_logic_1;
        else 
            r_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln607_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln607_fu_241_p2),10));

        sext_ln609_1_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln609_1_fu_340_p2),64));

        sext_ln609_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln609_fu_331_p2),11));

        sext_ln612_1_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln612_1_fu_359_p2),64));

        sext_ln612_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln612_fu_350_p2),11));

        sext_ln616_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln616_fu_369_p2),32));

        sext_ln617_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln617_fu_380_p2),32));

        sext_ln618_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln618_fu_496_p2),32));

        sext_ln619_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln619_fu_507_p2),32));

        sext_ln620_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln620_fu_565_p2),32));

        sext_ln621_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln621_fu_576_p2),32));

        sext_ln622_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln622_fu_627_p2),32));

        sext_ln623_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln623_fu_638_p2),32));

    shl_ln607_1_fu_229_p3 <= (trunc_ln607_fu_225_p1 & ap_const_lv2_0);
    shl_ln_fu_269_p3 <= (trunc_ln607_reg_680 & ap_const_lv3_0);
    sub_ln607_fu_241_p2 <= std_logic_vector(unsigned(zext_ln607_fu_237_p1) - unsigned(zext_ln606_fu_209_p1));
    sub_ln616_fu_369_p2 <= std_logic_vector(unsigned(ap_const_lv4_2) - unsigned(zext_ln607_2_fu_265_p1));
    sub_ln617_fu_380_p2 <= std_logic_vector(unsigned(ap_const_lv4_2) - unsigned(zext_ln608_fu_299_p1));
    sub_ln618_fu_496_p2 <= std_logic_vector(unsigned(ap_const_lv4_2) - unsigned(zext_ln609_fu_402_p1));
    sub_ln619_fu_507_p2 <= std_logic_vector(unsigned(ap_const_lv4_2) - unsigned(zext_ln610_fu_433_p1));
    sub_ln620_fu_565_p2 <= std_logic_vector(unsigned(ap_const_lv4_2) - unsigned(zext_ln611_fu_518_p1));
    sub_ln621_fu_576_p2 <= std_logic_vector(unsigned(ap_const_lv4_2) - unsigned(zext_ln612_fu_544_p1));
    sub_ln622_fu_627_p2 <= std_logic_vector(unsigned(ap_const_lv4_2) - unsigned(zext_ln613_fu_587_p1));
    sub_ln623_fu_638_p2 <= std_logic_vector(unsigned(ap_const_lv4_2) - unsigned(zext_ln614_fu_607_p1));
    tmp_1_fu_553_p3 <= (r_coeffs_offset & or_ln612_fu_548_p2);
    tmp_2_fu_595_p3 <= (r_coeffs_offset & or_ln613_fu_590_p2);
    tmp_4_fu_276_p4 <= ((r_coeffs_offset & trunc_ln607_reg_680) & ap_const_lv3_0);
    tmp_5_fu_309_p3 <= (r_coeffs_offset & or_ln608_fu_303_p2);
    tmp_7_fu_615_p3 <= (r_coeffs_offset & or_ln614_fu_610_p2);
    tmp_8_fu_411_p3 <= (r_coeffs_offset & or_ln609_fu_406_p2);
    tmp_9_fu_442_p3 <= (r_coeffs_offset & or_ln610_fu_437_p2);
    tmp_s_fu_526_p3 <= (r_coeffs_offset & or_ln611_fu_521_p2);
    trunc_ln1_fu_289_p4 <= a_q0(5 downto 3);
    trunc_ln2_fu_423_p4 <= a_q0(3 downto 1);
    trunc_ln606_fu_205_p1 <= a_offset(10 - 1 downto 0);
    trunc_ln607_1_fu_261_p1 <= a_q0(3 - 1 downto 0);
    trunc_ln607_fu_225_p1 <= i_0_reg_194(5 - 1 downto 0);
    trunc_ln609_fu_391_p1 <= a_q0(1 - 1 downto 0);
    trunc_ln612_fu_472_p1 <= a_q1(2 - 1 downto 0);
    zext_ln606_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_194),8));
    zext_ln607_1_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln607_fu_251_p2),64));
    zext_ln607_2_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln607_1_fu_261_p1),4));
    zext_ln607_3_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_276_p4),64));
    zext_ln607_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln607_1_fu_229_p3),8));
    zext_ln608_1_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_309_p3),64));
    zext_ln608_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1_fu_289_p4),4));
    zext_ln609_1_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_411_p3),64));
    zext_ln609_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_395_p3),4));
    zext_ln610_1_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_442_p3),64));
    zext_ln610_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln2_fu_423_p4),4));
    zext_ln611_1_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_526_p3),64));
    zext_ln611_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln3_reg_722),4));
    zext_ln612_1_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_553_p3),64));
    zext_ln612_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1_fu_538_p3),4));
    zext_ln613_1_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_595_p3),64));
    zext_ln613_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln4_reg_737),4));
    zext_ln614_1_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_615_p3),64));
    zext_ln614_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_742),4));
end behav;
