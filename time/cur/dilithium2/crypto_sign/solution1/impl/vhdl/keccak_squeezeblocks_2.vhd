-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity keccak_squeezeblocks_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_r_ce1 : OUT STD_LOGIC;
    out_r_we1 : OUT STD_LOGIC;
    out_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_offset : IN STD_LOGIC_VECTOR (1 downto 0);
    nblocks : IN STD_LOGIC_VECTOR (3 downto 0);
    s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce0 : OUT STD_LOGIC;
    s_we0 : OUT STD_LOGIC;
    s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce1 : OUT STD_LOGIC;
    s_we1 : OUT STD_LOGIC;
    s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of keccak_squeezeblocks_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_A8 : STD_LOGIC_VECTOR (9 downto 0) := "0010101000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv10_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000000101";
    constant ap_const_lv10_6 : STD_LOGIC_VECTOR (9 downto 0) := "0000000110";
    constant ap_const_lv10_7 : STD_LOGIC_VECTOR (9 downto 0) := "0000000111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln490_3_fu_223_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln490_3_reg_440 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_239_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_451 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln490_1_fu_262_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln490_1_reg_456 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln489_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln492_fu_273_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln493_fu_279_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln50_2_reg_483 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal trunc_ln50_3_reg_488 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln50_4_reg_493 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln50_5_reg_498 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln50_6_reg_503 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln50_7_reg_508 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_217_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_217_ap_done : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_217_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_217_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_217_state_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_217_state_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_217_state_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_217_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_217_state_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_217_state_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_217_state_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_217_state_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal nblocks_assign_1_reg_184 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_0_rec_reg_194 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_206 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_KeccakF1600_StatePer_1_fu_217_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln487_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln490_1_fu_268_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln490_2_fu_285_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_fu_310_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_1_fu_380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln50_2_fu_390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_3_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln50_4_fu_410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_5_fu_420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_6_fu_430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln50_fu_289_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_245_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln490_fu_253_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln490_fu_258_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln50_fu_305_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln50_1_fu_375_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln50_2_fu_385_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln50_3_fu_395_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln50_4_fu_405_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln50_5_fu_415_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln50_6_fu_425_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component KeccakF1600_StatePer_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_KeccakF1600_StatePer_1_fu_217 : component KeccakF1600_StatePer_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePer_1_fu_217_ap_start,
        ap_done => grp_KeccakF1600_StatePer_1_fu_217_ap_done,
        ap_idle => grp_KeccakF1600_StatePer_1_fu_217_ap_idle,
        ap_ready => grp_KeccakF1600_StatePer_1_fu_217_ap_ready,
        state_address0 => grp_KeccakF1600_StatePer_1_fu_217_state_address0,
        state_ce0 => grp_KeccakF1600_StatePer_1_fu_217_state_ce0,
        state_we0 => grp_KeccakF1600_StatePer_1_fu_217_state_we0,
        state_d0 => grp_KeccakF1600_StatePer_1_fu_217_state_d0,
        state_q0 => s_q0,
        state_address1 => grp_KeccakF1600_StatePer_1_fu_217_state_address1,
        state_ce1 => grp_KeccakF1600_StatePer_1_fu_217_state_ce1,
        state_we1 => grp_KeccakF1600_StatePer_1_fu_217_state_we1,
        state_d1 => grp_KeccakF1600_StatePer_1_fu_217_state_d1,
        state_q1 => s_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_1_fu_217_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_1_fu_217_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln487_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_KeccakF1600_StatePer_1_fu_217_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_1_fu_217_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_1_fu_217_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_0_reg_206 <= i_reg_451;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_KeccakF1600_StatePer_1_fu_217_ap_done = ap_const_logic_1))) then 
                i_0_reg_206 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    nblocks_assign_1_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln489_fu_233_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                nblocks_assign_1_reg_184 <= add_ln493_fu_279_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                nblocks_assign_1_reg_184 <= nblocks;
            end if; 
        end if;
    end process;

    p_0_rec_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln489_fu_233_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_0_rec_reg_194 <= add_ln492_fu_273_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0_rec_reg_194 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln489_fu_233_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln490_1_reg_456 <= add_ln490_1_fu_262_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_reg_451 <= i_fu_239_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                trunc_ln50_2_reg_483 <= s_q0(23 downto 16);
                trunc_ln50_3_reg_488 <= s_q0(31 downto 24);
                trunc_ln50_4_reg_493 <= s_q0(39 downto 32);
                trunc_ln50_5_reg_498 <= s_q0(47 downto 40);
                trunc_ln50_6_reg_503 <= s_q0(55 downto 48);
                trunc_ln50_7_reg_508 <= s_q0(63 downto 56);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    zext_ln490_3_reg_440(1 downto 0) <= zext_ln490_3_fu_223_p1(1 downto 0);
            end if;
        end if;
    end process;
    zext_ln490_3_reg_440(7 downto 2) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln489_fu_233_p2, grp_KeccakF1600_StatePer_1_fu_217_ap_done, ap_CS_fsm_state3, ap_CS_fsm_state2, icmp_ln487_fu_227_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln487_fu_227_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_KeccakF1600_StatePer_1_fu_217_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln489_fu_233_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln490_1_fu_262_p2 <= std_logic_vector(unsigned(zext_ln490_fu_258_p1) + unsigned(p_0_rec_reg_194));
    add_ln490_fu_253_p2 <= std_logic_vector(unsigned(shl_ln_fu_245_p3) + unsigned(zext_ln490_3_reg_440));
    add_ln492_fu_273_p2 <= std_logic_vector(unsigned(p_0_rec_reg_194) + unsigned(ap_const_lv10_A8));
    add_ln493_fu_279_p2 <= std_logic_vector(unsigned(nblocks_assign_1_reg_184) + unsigned(ap_const_lv4_F));
    add_ln50_1_fu_375_p2 <= std_logic_vector(unsigned(ap_const_lv10_2) + unsigned(add_ln490_1_reg_456));
    add_ln50_2_fu_385_p2 <= std_logic_vector(unsigned(ap_const_lv10_3) + unsigned(add_ln490_1_reg_456));
    add_ln50_3_fu_395_p2 <= std_logic_vector(unsigned(ap_const_lv10_4) + unsigned(add_ln490_1_reg_456));
    add_ln50_4_fu_405_p2 <= std_logic_vector(unsigned(ap_const_lv10_5) + unsigned(add_ln490_1_reg_456));
    add_ln50_5_fu_415_p2 <= std_logic_vector(unsigned(ap_const_lv10_6) + unsigned(add_ln490_1_reg_456));
    add_ln50_6_fu_425_p2 <= std_logic_vector(unsigned(ap_const_lv10_7) + unsigned(add_ln490_1_reg_456));
    add_ln50_fu_305_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(add_ln490_1_reg_456));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln487_fu_227_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln487_fu_227_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln487_fu_227_p2)
    begin
        if (((icmp_ln487_fu_227_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_KeccakF1600_StatePer_1_fu_217_ap_start <= grp_KeccakF1600_StatePer_1_fu_217_ap_start_reg;
    i_fu_239_p2 <= std_logic_vector(unsigned(i_0_reg_206) + unsigned(ap_const_lv5_1));
    icmp_ln487_fu_227_p2 <= "1" when (nblocks_assign_1_reg_184 = ap_const_lv4_0) else "0";
    icmp_ln489_fu_233_p2 <= "1" when (i_0_reg_206 = ap_const_lv5_15) else "0";

    out_r_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, zext_ln490_2_fu_285_p1, zext_ln50_1_fu_380_p1, ap_CS_fsm_state6, zext_ln50_3_fu_400_p1, ap_CS_fsm_state7, zext_ln50_5_fu_420_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_r_address0 <= zext_ln50_5_fu_420_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            out_r_address0 <= zext_ln50_3_fu_400_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_r_address0 <= zext_ln50_1_fu_380_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_r_address0 <= zext_ln490_2_fu_285_p1(10 - 1 downto 0);
        else 
            out_r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    out_r_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, zext_ln50_fu_310_p1, ap_CS_fsm_state6, zext_ln50_2_fu_390_p1, ap_CS_fsm_state7, zext_ln50_4_fu_410_p1, zext_ln50_6_fu_430_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_r_address1 <= zext_ln50_6_fu_430_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            out_r_address1 <= zext_ln50_4_fu_410_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_r_address1 <= zext_ln50_2_fu_390_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_r_address1 <= zext_ln50_fu_310_p1(10 - 1 downto 0);
        else 
            out_r_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    out_r_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            out_r_ce1 <= ap_const_logic_1;
        else 
            out_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_d0_assign_proc : process(trunc_ln50_2_reg_483, ap_CS_fsm_state5, trunc_ln50_4_reg_493, trunc_ln50_6_reg_503, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state7, trunc_ln50_fu_289_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_r_d0 <= trunc_ln50_6_reg_503;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            out_r_d0 <= trunc_ln50_4_reg_493;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_r_d0 <= trunc_ln50_2_reg_483;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_r_d0 <= trunc_ln50_fu_289_p1;
        else 
            out_r_d0 <= "XXXXXXXX";
        end if; 
    end process;


    out_r_d1_assign_proc : process(s_q0, ap_CS_fsm_state5, trunc_ln50_3_reg_488, trunc_ln50_5_reg_498, trunc_ln50_7_reg_508, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_r_d1 <= trunc_ln50_7_reg_508;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            out_r_d1 <= trunc_ln50_5_reg_498;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_r_d1 <= trunc_ln50_3_reg_488;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_r_d1 <= s_q0(15 downto 8);
        else 
            out_r_d1 <= "XXXXXXXX";
        end if; 
    end process;


    out_r_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            out_r_we1 <= ap_const_logic_1;
        else 
            out_r_we1 <= ap_const_logic_0;
        end if; 
    end process;


    s_address0_assign_proc : process(ap_CS_fsm_state4, grp_KeccakF1600_StatePer_1_fu_217_state_address0, ap_CS_fsm_state3, zext_ln490_1_fu_268_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s_address0 <= zext_ln490_1_fu_268_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_address0 <= grp_KeccakF1600_StatePer_1_fu_217_state_address0;
        else 
            s_address0 <= "XXXXX";
        end if; 
    end process;

    s_address1 <= grp_KeccakF1600_StatePer_1_fu_217_state_address1;

    s_ce0_assign_proc : process(ap_CS_fsm_state4, grp_KeccakF1600_StatePer_1_fu_217_state_ce0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_ce0 <= grp_KeccakF1600_StatePer_1_fu_217_state_ce0;
        else 
            s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_ce1_assign_proc : process(grp_KeccakF1600_StatePer_1_fu_217_state_ce1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_ce1 <= grp_KeccakF1600_StatePer_1_fu_217_state_ce1;
        else 
            s_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    s_d0 <= grp_KeccakF1600_StatePer_1_fu_217_state_d0;
    s_d1 <= grp_KeccakF1600_StatePer_1_fu_217_state_d1;

    s_we0_assign_proc : process(grp_KeccakF1600_StatePer_1_fu_217_state_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_we0 <= grp_KeccakF1600_StatePer_1_fu_217_state_we0;
        else 
            s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s_we1_assign_proc : process(grp_KeccakF1600_StatePer_1_fu_217_state_we1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_we1 <= grp_KeccakF1600_StatePer_1_fu_217_state_we1;
        else 
            s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln_fu_245_p3 <= (i_0_reg_206 & ap_const_lv3_0);
    trunc_ln50_fu_289_p1 <= s_q0(8 - 1 downto 0);
    zext_ln490_1_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_206),64));
    zext_ln490_2_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln490_1_reg_456),64));
    zext_ln490_3_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_offset),8));
    zext_ln490_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln490_fu_253_p2),10));
    zext_ln50_1_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln50_1_fu_375_p2),64));
    zext_ln50_2_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln50_2_fu_385_p2),64));
    zext_ln50_3_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln50_3_fu_395_p2),64));
    zext_ln50_4_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln50_4_fu_405_p2),64));
    zext_ln50_5_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln50_5_fu_415_p2),64));
    zext_ln50_6_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln50_6_fu_425_p2),64));
    zext_ln50_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln50_fu_305_p2),64));
end behav;
