-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity polyvecl_uniform_gam is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v_vec_coeffs_ce0 : OUT STD_LOGIC;
    v_vec_coeffs_we0 : OUT STD_LOGIC;
    v_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    seed_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    seed_ce0 : OUT STD_LOGIC;
    seed_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    nonce : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of polyvecl_uniform_gam is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv9_88 : STD_LOGIC_VECTOR (8 downto 0) := "010001000";
    constant ap_const_lv7_30 : STD_LOGIC_VECTOR (6 downto 0) := "0110000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv19_20000 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000000101";
    constant ap_const_lv10_6 : STD_LOGIC_VECTOR (9 downto 0) := "0000000110";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv10_7 : STD_LOGIC_VECTOR (9 downto 0) := "0000000111";
    constant ap_const_lv10_8 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal buf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_416 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal buf_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal shl_ln47_fu_421_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln47_reg_1040 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_fu_431_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln_reg_1045 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_445_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_1058 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal t_0_fu_464_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_0_reg_1063 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln46_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_1_reg_1068 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_11_fu_485_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln416_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln416_reg_1081 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln416_fu_506_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln416_reg_1089 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln26_fu_520_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln26_reg_1094 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln416_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_13_fu_530_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_13_reg_1102 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln30_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_s_addr_3_reg_1112 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_fu_580_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_keccak_absorb_fu_395_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal state_pos_write_assi_reg_1122 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_keccak_absorb_fu_395_ap_ready : STD_LOGIC;
    signal grp_keccak_absorb_fu_395_ap_done : STD_LOGIC;
    signal state_s_addr_2_reg_1127 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_12_fu_653_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_12_reg_1135 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal trunc_ln855_fu_659_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln855_reg_1140 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln854_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln855_fu_675_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln855_reg_1146 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln855_1_fu_765_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln855_1_reg_1183 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal buf_ce0 : STD_LOGIC;
    signal buf_we0 : STD_LOGIC;
    signal buf_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal buf_ce1 : STD_LOGIC;
    signal state_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_s_ce0 : STD_LOGIC;
    signal state_s_we0 : STD_LOGIC;
    signal state_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_s_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_s_ce1 : STD_LOGIC;
    signal state_s_we1 : STD_LOGIC;
    signal state_s_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_s_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_fu_395_ap_start : STD_LOGIC;
    signal grp_keccak_absorb_fu_395_ap_idle : STD_LOGIC;
    signal grp_keccak_absorb_fu_395_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_absorb_fu_395_s_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_fu_395_s_we0 : STD_LOGIC;
    signal grp_keccak_absorb_fu_395_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_fu_395_s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_absorb_fu_395_s_ce1 : STD_LOGIC;
    signal grp_keccak_absorb_fu_395_s_we1 : STD_LOGIC;
    signal grp_keccak_absorb_fu_395_s_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_squeezeblocks_1_fu_408_ap_start : STD_LOGIC;
    signal grp_keccak_squeezeblocks_1_fu_408_ap_done : STD_LOGIC;
    signal grp_keccak_squeezeblocks_1_fu_408_ap_idle : STD_LOGIC;
    signal grp_keccak_squeezeblocks_1_fu_408_ap_ready : STD_LOGIC;
    signal grp_keccak_squeezeblocks_1_fu_408_out_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_keccak_squeezeblocks_1_fu_408_out_r_ce0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_1_fu_408_out_r_we0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_1_fu_408_out_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_keccak_squeezeblocks_1_fu_408_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_squeezeblocks_1_fu_408_s_ce0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_1_fu_408_s_we0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_1_fu_408_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_squeezeblocks_1_fu_408_s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_squeezeblocks_1_fu_408_s_ce1 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_1_fu_408_s_we1 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_1_fu_408_s_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_reg_326 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_0_i_i_i_i_reg_338 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln362_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_i_reg_349 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_0_i1_i_reg_360 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_0_i2_i_reg_372 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_i_reg_384 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_keccak_absorb_fu_395_ap_start_reg : STD_LOGIC := '0';
    signal grp_keccak_squeezeblocks_1_fu_408_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln363_fu_491_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_fu_549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln450_1_fu_603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln855_1_fu_681_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln856_fu_691_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln857_fu_701_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln855_2_fu_715_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln861_fu_743_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln862_fu_753_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln860_2_fu_800_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln866_fu_848_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln867_fu_858_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln865_1_fu_897_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln871_fu_945_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln872_fu_955_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln870_1_fu_994_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln417_fu_586_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal xor_ln450_fu_629_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal xor_ln451_fu_636_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln875_fu_758_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln876_fu_863_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln877_fu_960_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln878_fu_1033_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln47_fu_427_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln47_fu_451_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln47_1_fu_455_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln47_fu_459_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln5_fu_512_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln_fu_536_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_fu_544_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln31_fu_558_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_562_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_1_fu_554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_2_fu_570_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln31_fu_574_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_s_fu_593_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln450_fu_608_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln4_fu_611_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln450_fu_619_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln450_fu_623_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln6_fu_663_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln855_fu_671_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln854_fu_643_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln856_fu_686_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln857_fu_696_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_706_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln858_fu_720_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_i_fu_724_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln861_fu_738_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln862_fu_748_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln860_fu_734_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal lshr_ln_fu_772_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln860_fu_786_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_255_fu_792_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln860_1_fu_782_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_817_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln7_fu_805_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln863_fu_813_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln863_fu_825_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln863_i_fu_831_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln866_fu_843_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln867_fu_853_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln863_fu_839_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal lshr_ln1_fu_870_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln865_fu_884_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_256_fu_889_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln865_fu_880_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_914_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln8_fu_902_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln868_fu_910_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln868_fu_922_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln868_i_fu_928_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln871_fu_940_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln872_fu_950_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln868_fu_936_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal lshr_ln2_fu_967_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln870_fu_981_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_257_fu_986_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln870_fu_977_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_1007_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln9_fu_999_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln872_fu_1015_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln872_i_fu_1021_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln872_1_fu_1029_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);

    component keccak_absorb IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce0 : OUT STD_LOGIC;
        s_we0 : OUT STD_LOGIC;
        s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce1 : OUT STD_LOGIC;
        s_we1 : OUT STD_LOGIC;
        s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        r : IN STD_LOGIC_VECTOR (8 downto 0);
        pos_r : IN STD_LOGIC_VECTOR (6 downto 0);
        m_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        m_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component keccak_squeezeblocks_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce0 : OUT STD_LOGIC;
        s_we0 : OUT STD_LOGIC;
        s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce1 : OUT STD_LOGIC;
        s_we1 : OUT STD_LOGIC;
        s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component polyvecl_uniform_fYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component poly_uniform_statdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    buf_U : component polyvecl_uniform_fYi
    generic map (
        DataWidth => 8,
        AddressRange => 680,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_address0,
        ce0 => buf_ce0,
        we0 => buf_we0,
        d0 => grp_keccak_squeezeblocks_1_fu_408_out_r_d0,
        q0 => buf_q0,
        address1 => buf_address1,
        ce1 => buf_ce1,
        q1 => buf_q1);

    state_s_U : component poly_uniform_statdEe
    generic map (
        DataWidth => 64,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => state_s_address0,
        ce0 => state_s_ce0,
        we0 => state_s_we0,
        d0 => state_s_d0,
        q0 => state_s_q0,
        address1 => state_s_address1,
        ce1 => state_s_ce1,
        we1 => state_s_we1,
        d1 => state_s_d1,
        q1 => state_s_q1);

    grp_keccak_absorb_fu_395 : component keccak_absorb
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_keccak_absorb_fu_395_ap_start,
        ap_done => grp_keccak_absorb_fu_395_ap_done,
        ap_idle => grp_keccak_absorb_fu_395_ap_idle,
        ap_ready => grp_keccak_absorb_fu_395_ap_ready,
        s_address0 => grp_keccak_absorb_fu_395_s_address0,
        s_ce0 => grp_keccak_absorb_fu_395_s_ce0,
        s_we0 => grp_keccak_absorb_fu_395_s_we0,
        s_d0 => grp_keccak_absorb_fu_395_s_d0,
        s_q0 => state_s_q0,
        s_address1 => grp_keccak_absorb_fu_395_s_address1,
        s_ce1 => grp_keccak_absorb_fu_395_s_ce1,
        s_we1 => grp_keccak_absorb_fu_395_s_we1,
        s_d1 => grp_keccak_absorb_fu_395_s_d1,
        s_q1 => state_s_q1,
        r => ap_const_lv9_88,
        pos_r => ap_const_lv7_30,
        m_0_read => t_0_reg_1063,
        m_1_read => t_1_reg_1068,
        ap_return => grp_keccak_absorb_fu_395_ap_return);

    grp_keccak_squeezeblocks_1_fu_408 : component keccak_squeezeblocks_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_keccak_squeezeblocks_1_fu_408_ap_start,
        ap_done => grp_keccak_squeezeblocks_1_fu_408_ap_done,
        ap_idle => grp_keccak_squeezeblocks_1_fu_408_ap_idle,
        ap_ready => grp_keccak_squeezeblocks_1_fu_408_ap_ready,
        out_r_address0 => grp_keccak_squeezeblocks_1_fu_408_out_r_address0,
        out_r_ce0 => grp_keccak_squeezeblocks_1_fu_408_out_r_ce0,
        out_r_we0 => grp_keccak_squeezeblocks_1_fu_408_out_r_we0,
        out_r_d0 => grp_keccak_squeezeblocks_1_fu_408_out_r_d0,
        s_address0 => grp_keccak_squeezeblocks_1_fu_408_s_address0,
        s_ce0 => grp_keccak_squeezeblocks_1_fu_408_s_ce0,
        s_we0 => grp_keccak_squeezeblocks_1_fu_408_s_we0,
        s_d0 => grp_keccak_squeezeblocks_1_fu_408_s_d0,
        s_q0 => state_s_q0,
        s_address1 => grp_keccak_squeezeblocks_1_fu_408_s_address1,
        s_ce1 => grp_keccak_squeezeblocks_1_fu_408_s_ce1,
        s_we1 => grp_keccak_squeezeblocks_1_fu_408_s_we1,
        s_d1 => grp_keccak_squeezeblocks_1_fu_408_s_d1,
        s_q1 => state_s_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_keccak_absorb_fu_395_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_keccak_absorb_fu_395_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln416_fu_500_p2 = ap_const_lv1_1))) then 
                    grp_keccak_absorb_fu_395_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_keccak_absorb_fu_395_ap_ready = ap_const_logic_1)) then 
                    grp_keccak_absorb_fu_395_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_keccak_squeezeblocks_1_fu_408_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_keccak_squeezeblocks_1_fu_408_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_keccak_squeezeblocks_1_fu_408_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_keccak_squeezeblocks_1_fu_408_ap_ready = ap_const_logic_1)) then 
                    grp_keccak_squeezeblocks_1_fu_408_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i1_i_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_0_i1_i_reg_360 <= i_13_reg_1102;
            elsif (((icmp_ln416_fu_500_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_0_i1_i_reg_360 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_0_i_i_i_i_reg_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln362_fu_479_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_i_i_i_i_reg_338 <= i_11_fu_485_p2;
            elsif (((icmp_ln46_fu_439_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_i_i_i_i_reg_338 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_384_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i_0_i_reg_384 <= i_12_reg_1135;
            elsif (((grp_keccak_squeezeblocks_1_fu_408_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                i_0_i_reg_384 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_0_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln854_fu_647_p2 = ap_const_lv1_1))) then 
                i_0_reg_326 <= i_reg_1058;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_326 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_3_i_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln362_fu_479_p2 = ap_const_lv1_1))) then 
                i_3_i_reg_349 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_3_i_reg_349 <= add_ln416_reg_1089;
            end if; 
        end if;
    end process;

    r_0_i2_i_reg_372_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                r_0_i2_i_reg_372 <= r_fu_580_p2;
            elsif (((icmp_ln416_fu_500_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                r_0_i2_i_reg_372 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    reg_416_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                reg_416 <= buf_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                reg_416 <= buf_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln416_reg_1089 <= add_ln416_fu_506_p2;
                    zext_ln416_reg_1081(2 downto 0) <= zext_ln416_fu_496_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln854_fu_647_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                add_ln855_reg_1146 <= add_ln855_fu_675_p2;
                trunc_ln855_reg_1140 <= trunc_ln855_fu_659_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                i_12_reg_1135 <= i_12_fu_653_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_13_reg_1102 <= i_13_fu_530_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_1058 <= i_fu_445_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    shl_ln47_reg_1040(15 downto 2) <= shl_ln47_fu_421_p2(15 downto 2);
                    trunc_ln_reg_1045(7 downto 2) <= trunc_ln_fu_431_p3(7 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                    shl_ln855_1_reg_1183(7 downto 2) <= shl_ln855_1_fu_765_p3(7 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_keccak_absorb_fu_395_ap_done = ap_const_logic_1))) then
                state_pos_write_assi_reg_1122 <= grp_keccak_absorb_fu_395_ap_return;
                state_s_addr_2_reg_1127 <= zext_ln450_1_fu_603_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln30_fu_524_p2 = ap_const_lv1_1))) then
                    state_s_addr_3_reg_1112(2 downto 0) <= zext_ln416_reg_1081(5 - 1 downto 0)(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln46_fu_439_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                t_0_reg_1063 <= t_0_fu_464_p2;
                t_1_reg_1068 <= add_ln47_fu_459_p2(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln416_fu_500_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    zext_ln26_reg_1094(5 downto 3) <= zext_ln26_fu_520_p1(5 downto 3);
            end if;
        end if;
    end process;
    shl_ln47_reg_1040(1 downto 0) <= "00";
    trunc_ln_reg_1045(1 downto 0) <= "00";
    zext_ln416_reg_1081(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln26_reg_1094(2 downto 0) <= "000";
    zext_ln26_reg_1094(7 downto 6) <= "00";
    state_s_addr_3_reg_1112(4 downto 3) <= "00";
    shl_ln855_1_reg_1183(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln46_fu_439_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln416_fu_500_p2, ap_CS_fsm_state5, icmp_ln30_fu_524_p2, ap_CS_fsm_state8, grp_keccak_absorb_fu_395_ap_done, ap_CS_fsm_state15, icmp_ln854_fu_647_p2, grp_keccak_squeezeblocks_1_fu_408_ap_done, icmp_ln362_fu_479_p2, ap_CS_fsm_state14)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln46_fu_439_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln362_fu_479_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln416_fu_500_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln30_fu_524_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_keccak_absorb_fu_395_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_keccak_squeezeblocks_1_fu_408_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln854_fu_647_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln31_fu_544_p2 <= std_logic_vector(unsigned(zext_ln26_reg_1094) + unsigned(or_ln_fu_536_p3));
    add_ln416_fu_506_p2 <= std_logic_vector(unsigned(i_3_i_reg_349) + unsigned(ap_const_lv3_1));
    add_ln47_fu_459_p2 <= std_logic_vector(unsigned(shl_ln47_reg_1040) + unsigned(zext_ln47_fu_451_p1));
    add_ln855_fu_675_p2 <= std_logic_vector(unsigned(zext_ln855_fu_671_p1) + unsigned(zext_ln854_fu_643_p1));
    add_ln856_fu_686_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(add_ln855_reg_1146));
    add_ln857_fu_696_p2 <= std_logic_vector(unsigned(ap_const_lv10_2) + unsigned(add_ln855_reg_1146));
    add_ln861_fu_738_p2 <= std_logic_vector(unsigned(ap_const_lv10_3) + unsigned(add_ln855_reg_1146));
    add_ln862_fu_748_p2 <= std_logic_vector(unsigned(ap_const_lv10_4) + unsigned(add_ln855_reg_1146));
    add_ln866_fu_843_p2 <= std_logic_vector(unsigned(ap_const_lv10_5) + unsigned(add_ln855_reg_1146));
    add_ln867_fu_853_p2 <= std_logic_vector(unsigned(ap_const_lv10_6) + unsigned(add_ln855_reg_1146));
    add_ln871_fu_940_p2 <= std_logic_vector(unsigned(ap_const_lv10_7) + unsigned(add_ln855_reg_1146));
    add_ln872_fu_950_p2 <= std_logic_vector(unsigned(ap_const_lv10_8) + unsigned(add_ln855_reg_1146));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln46_fu_439_p2)
    begin
        if ((((icmp_ln46_fu_439_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln46_fu_439_p2)
    begin
        if (((icmp_ln46_fu_439_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    buf_address0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state15, grp_keccak_squeezeblocks_1_fu_408_out_r_address0, ap_CS_fsm_state14, zext_ln855_1_fu_681_p1, zext_ln856_fu_691_p1, zext_ln862_fu_753_p1, zext_ln867_fu_858_p1, zext_ln872_fu_955_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            buf_address0 <= zext_ln872_fu_955_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            buf_address0 <= zext_ln867_fu_858_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            buf_address0 <= zext_ln862_fu_753_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            buf_address0 <= zext_ln856_fu_691_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            buf_address0 <= zext_ln855_1_fu_681_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buf_address0 <= grp_keccak_squeezeblocks_1_fu_408_out_r_address0;
        else 
            buf_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    buf_address1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, zext_ln857_fu_701_p1, zext_ln861_fu_743_p1, zext_ln866_fu_848_p1, zext_ln871_fu_945_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            buf_address1 <= zext_ln871_fu_945_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            buf_address1 <= zext_ln866_fu_848_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            buf_address1 <= zext_ln861_fu_743_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            buf_address1 <= zext_ln857_fu_701_p1(10 - 1 downto 0);
        else 
            buf_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    buf_ce0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state15, grp_keccak_squeezeblocks_1_fu_408_out_r_ce0, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            buf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buf_ce0 <= grp_keccak_squeezeblocks_1_fu_408_out_r_ce0;
        else 
            buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_ce1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_ce1 <= ap_const_logic_1;
        else 
            buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_we0_assign_proc : process(grp_keccak_squeezeblocks_1_fu_408_out_r_we0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buf_we0 <= grp_keccak_squeezeblocks_1_fu_408_out_r_we0;
        else 
            buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_keccak_absorb_fu_395_ap_start <= grp_keccak_absorb_fu_395_ap_start_reg;
    grp_keccak_squeezeblocks_1_fu_408_ap_start <= grp_keccak_squeezeblocks_1_fu_408_ap_start_reg;
    i_11_fu_485_p2 <= std_logic_vector(unsigned(i_0_i_i_i_i_reg_338) + unsigned(ap_const_lv5_1));
    i_12_fu_653_p2 <= std_logic_vector(unsigned(i_0_i_reg_384) + unsigned(ap_const_lv7_1));
    i_13_fu_530_p2 <= std_logic_vector(unsigned(i_0_i1_i_reg_360) + unsigned(ap_const_lv4_1));
    i_fu_445_p2 <= std_logic_vector(unsigned(i_0_reg_326) + unsigned(ap_const_lv3_1));
    i_s_fu_593_p4 <= grp_keccak_absorb_fu_395_ap_return(31 downto 3);
    icmp_ln30_fu_524_p2 <= "1" when (i_0_i1_i_reg_360 = ap_const_lv4_8) else "0";
    icmp_ln362_fu_479_p2 <= "1" when (i_0_i_i_i_i_reg_338 = ap_const_lv5_19) else "0";
    icmp_ln416_fu_500_p2 <= "1" when (i_3_i_reg_349 = ap_const_lv3_6) else "0";
    icmp_ln46_fu_439_p2 <= "1" when (i_0_reg_326 = ap_const_lv3_4) else "0";
    icmp_ln854_fu_647_p2 <= "1" when (i_0_i_reg_384 = ap_const_lv7_40) else "0";
    lshr_ln1_fu_870_p4 <= reg_416(7 downto 4);
    lshr_ln2_fu_967_p4 <= reg_416(7 downto 6);
    lshr_ln_fu_772_p4 <= reg_416(7 downto 2);
    or_ln860_fu_786_p2 <= (shl_ln855_1_fu_765_p3 or ap_const_lv8_1);
    or_ln863_fu_825_p2 <= (tmp_1_fu_817_p3 or shl_ln7_fu_805_p3);
    or_ln863_i_fu_831_p3 <= (trunc_ln863_fu_813_p1 & or_ln863_fu_825_p2);
    or_ln865_fu_884_p2 <= (shl_ln855_1_reg_1183 or ap_const_lv8_2);
    or_ln868_fu_922_p2 <= (tmp_3_fu_914_p3 or shl_ln8_fu_902_p3);
    or_ln868_i_fu_928_p3 <= (trunc_ln868_fu_910_p1 & or_ln868_fu_922_p2);
    or_ln870_fu_981_p2 <= (shl_ln855_1_reg_1183 or ap_const_lv8_3);
    or_ln872_fu_1015_p2 <= (tmp_4_fu_1007_p3 or shl_ln9_fu_999_p3);
    or_ln872_i_fu_1021_p3 <= (buf_q0 & or_ln872_fu_1015_p2);
    or_ln_fu_536_p3 <= (ap_const_lv4_A & i_0_i1_i_reg_360);
    r_fu_580_p2 <= (shl_ln31_fu_574_p2 or r_0_i2_i_reg_372);
    seed_address0 <= zext_ln31_fu_549_p1(8 - 1 downto 0);

    seed_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            seed_ce0 <= ap_const_logic_1;
        else 
            seed_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln31_fu_574_p2 <= std_logic_vector(shift_left(unsigned(zext_ln31_1_fu_554_p1),to_integer(unsigned('0' & zext_ln31_2_fu_570_p1(31-1 downto 0)))));
    shl_ln450_fu_623_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1F),to_integer(unsigned('0' & zext_ln450_fu_619_p1(31-1 downto 0)))));
    shl_ln47_fu_421_p2 <= std_logic_vector(shift_left(unsigned(nonce),to_integer(unsigned('0' & ap_const_lv16_2(16-1 downto 0)))));
    shl_ln4_fu_611_p3 <= (trunc_ln450_fu_608_p1 & ap_const_lv3_0);
    shl_ln5_fu_512_p3 <= (i_3_i_reg_349 & ap_const_lv3_0);
    shl_ln6_fu_663_p3 <= (trunc_ln855_fu_659_p1 & ap_const_lv3_0);
    shl_ln7_fu_805_p3 <= (buf_q1 & ap_const_lv6_0);
    shl_ln855_1_fu_765_p3 <= (trunc_ln855_reg_1140 & ap_const_lv2_0);
    shl_ln8_fu_902_p3 <= (buf_q1 & ap_const_lv4_0);
    shl_ln9_fu_999_p3 <= (buf_q1 & ap_const_lv2_0);
    shl_ln_fu_562_p3 <= (trunc_ln31_fu_558_p1 & ap_const_lv3_0);

    state_s_address0_assign_proc : process(ap_CS_fsm_state3, zext_ln416_reg_1081, ap_CS_fsm_state5, state_s_addr_3_reg_1112, ap_CS_fsm_state8, state_s_addr_2_reg_1127, grp_keccak_absorb_fu_395_s_address0, grp_keccak_squeezeblocks_1_fu_408_s_address0, ap_CS_fsm_state7, ap_CS_fsm_state14, zext_ln363_fu_491_p1, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            state_s_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            state_s_address0 <= state_s_addr_2_reg_1127;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_s_address0 <= state_s_addr_3_reg_1112;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_s_address0 <= zext_ln416_reg_1081(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_s_address0 <= zext_ln363_fu_491_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_s_address0 <= grp_keccak_squeezeblocks_1_fu_408_s_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_s_address0 <= grp_keccak_absorb_fu_395_s_address0;
        else 
            state_s_address0 <= "XXXXX";
        end if; 
    end process;


    state_s_address1_assign_proc : process(ap_CS_fsm_state8, grp_keccak_absorb_fu_395_s_address1, grp_keccak_squeezeblocks_1_fu_408_s_address1, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_s_address1 <= grp_keccak_squeezeblocks_1_fu_408_s_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_s_address1 <= grp_keccak_absorb_fu_395_s_address1;
        else 
            state_s_address1 <= "XXXXX";
        end if; 
    end process;


    state_s_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state8, grp_keccak_absorb_fu_395_s_ce0, grp_keccak_squeezeblocks_1_fu_408_s_ce0, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_s_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_s_ce0 <= grp_keccak_squeezeblocks_1_fu_408_s_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_s_ce0 <= grp_keccak_absorb_fu_395_s_ce0;
        else 
            state_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_s_ce1_assign_proc : process(ap_CS_fsm_state8, grp_keccak_absorb_fu_395_s_ce1, grp_keccak_squeezeblocks_1_fu_408_s_ce1, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_s_ce1 <= grp_keccak_squeezeblocks_1_fu_408_s_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_s_ce1 <= grp_keccak_absorb_fu_395_s_ce1;
        else 
            state_s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_s_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, grp_keccak_absorb_fu_395_s_d0, grp_keccak_squeezeblocks_1_fu_408_s_d0, ap_CS_fsm_state7, ap_CS_fsm_state14, xor_ln417_fu_586_p2, ap_CS_fsm_state10, xor_ln450_fu_629_p2, ap_CS_fsm_state12, xor_ln451_fu_636_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_s_d0 <= xor_ln451_fu_636_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_s_d0 <= xor_ln450_fu_629_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_s_d0 <= xor_ln417_fu_586_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_s_d0 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_s_d0 <= grp_keccak_squeezeblocks_1_fu_408_s_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_s_d0 <= grp_keccak_absorb_fu_395_s_d0;
        else 
            state_s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_s_d1_assign_proc : process(ap_CS_fsm_state8, grp_keccak_absorb_fu_395_s_d1, grp_keccak_squeezeblocks_1_fu_408_s_d1, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_s_d1 <= grp_keccak_squeezeblocks_1_fu_408_s_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_s_d1 <= grp_keccak_absorb_fu_395_s_d1;
        else 
            state_s_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_s_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, grp_keccak_absorb_fu_395_s_we0, grp_keccak_squeezeblocks_1_fu_408_s_we0, icmp_ln362_fu_479_p2, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((icmp_ln362_fu_479_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            state_s_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_s_we0 <= grp_keccak_squeezeblocks_1_fu_408_s_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_s_we0 <= grp_keccak_absorb_fu_395_s_we0;
        else 
            state_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_s_we1_assign_proc : process(ap_CS_fsm_state8, grp_keccak_absorb_fu_395_s_we1, grp_keccak_squeezeblocks_1_fu_408_s_we1, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_s_we1 <= grp_keccak_squeezeblocks_1_fu_408_s_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_s_we1 <= grp_keccak_absorb_fu_395_s_we1;
        else 
            state_s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln875_fu_758_p2 <= std_logic_vector(unsigned(ap_const_lv19_20000) - unsigned(zext_ln860_fu_734_p1));
    sub_ln876_fu_863_p2 <= std_logic_vector(unsigned(ap_const_lv19_20000) - unsigned(zext_ln863_fu_839_p1));
    sub_ln877_fu_960_p2 <= std_logic_vector(unsigned(ap_const_lv19_20000) - unsigned(zext_ln868_fu_936_p1));
    sub_ln878_fu_1033_p2 <= std_logic_vector(unsigned(ap_const_lv19_20000) - unsigned(zext_ln872_1_fu_1029_p1));
    t_0_fu_464_p2 <= std_logic_vector(unsigned(zext_ln47_1_fu_455_p1) + unsigned(trunc_ln_reg_1045));
    tmp_1_fu_817_p3 <= (ap_const_lv6_0 & zext_ln860_1_fu_782_p1);
    tmp_255_fu_792_p3 <= (i_0_reg_326 & or_ln860_fu_786_p2);
    tmp_256_fu_889_p3 <= (i_0_reg_326 & or_ln865_fu_884_p2);
    tmp_257_fu_986_p3 <= (i_0_reg_326 & or_ln870_fu_981_p2);
    tmp_3_fu_914_p3 <= (ap_const_lv4_0 & zext_ln865_fu_880_p1);
    tmp_4_fu_1007_p3 <= (ap_const_lv2_0 & zext_ln870_fu_977_p1);
    tmp_7_i_fu_724_p4 <= ((trunc_ln858_fu_720_p1 & buf_q0) & reg_416);
    tmp_s_fu_706_p4 <= ((i_0_reg_326 & trunc_ln855_reg_1140) & ap_const_lv2_0);
    trunc_ln31_fu_558_p1 <= i_0_i1_i_reg_360(3 - 1 downto 0);
    trunc_ln450_fu_608_p1 <= state_pos_write_assi_reg_1122(3 - 1 downto 0);
    trunc_ln47_fu_427_p1 <= nonce(6 - 1 downto 0);
    trunc_ln855_fu_659_p1 <= i_0_i_reg_384(6 - 1 downto 0);
    trunc_ln858_fu_720_p1 <= buf_q1(2 - 1 downto 0);
    trunc_ln863_fu_813_p1 <= buf_q0(4 - 1 downto 0);
    trunc_ln868_fu_910_p1 <= buf_q0(6 - 1 downto 0);
    trunc_ln_fu_431_p3 <= (trunc_ln47_fu_427_p1 & ap_const_lv2_0);

    v_vec_coeffs_address0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, zext_ln855_2_fu_715_p1, zext_ln860_2_fu_800_p1, zext_ln865_1_fu_897_p1, zext_ln870_1_fu_994_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            v_vec_coeffs_address0 <= zext_ln870_1_fu_994_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            v_vec_coeffs_address0 <= zext_ln865_1_fu_897_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            v_vec_coeffs_address0 <= zext_ln860_2_fu_800_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            v_vec_coeffs_address0 <= zext_ln855_2_fu_715_p1(10 - 1 downto 0);
        else 
            v_vec_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    v_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            v_vec_coeffs_ce0 <= ap_const_logic_1;
        else 
            v_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v_vec_coeffs_d0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, sub_ln875_fu_758_p2, sub_ln876_fu_863_p2, sub_ln877_fu_960_p2, sub_ln878_fu_1033_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            v_vec_coeffs_d0 <= sub_ln878_fu_1033_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            v_vec_coeffs_d0 <= sub_ln877_fu_960_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            v_vec_coeffs_d0 <= sub_ln876_fu_863_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            v_vec_coeffs_d0 <= sub_ln875_fu_758_p2;
        else 
            v_vec_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    v_vec_coeffs_we0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            v_vec_coeffs_we0 <= ap_const_logic_1;
        else 
            v_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln417_fu_586_p2 <= (state_s_q0 xor r_0_i2_i_reg_372);
    xor_ln450_fu_629_p2 <= (state_s_q0 xor shl_ln450_fu_623_p2);
    xor_ln451_fu_636_p2 <= (state_s_q0 xor ap_const_lv64_8000000000000000);
    zext_ln26_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln5_fu_512_p3),8));
    zext_ln31_1_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(seed_q0),64));
    zext_ln31_2_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_562_p3),64));
    zext_ln31_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_fu_544_p2),64));
    zext_ln363_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_i_i_reg_338),64));
    zext_ln416_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_i_reg_349),64));
    zext_ln450_1_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_s_fu_593_p4),64));
    zext_ln450_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln4_fu_611_p3),64));
    zext_ln47_1_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_326),8));
    zext_ln47_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_326),16));
    zext_ln854_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_384),10));
    zext_ln855_1_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln855_fu_675_p2),64));
    zext_ln855_2_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_706_p4),64));
    zext_ln855_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln6_fu_663_p3),10));
    zext_ln856_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln856_fu_686_p2),64));
    zext_ln857_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln857_fu_696_p2),64));
    zext_ln860_1_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_772_p4),8));
    zext_ln860_2_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_255_fu_792_p3),64));
    zext_ln860_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_i_fu_724_p4),19));
    zext_ln861_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln861_fu_738_p2),64));
    zext_ln862_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln862_fu_748_p2),64));
    zext_ln863_fu_839_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln863_i_fu_831_p3),19));
    zext_ln865_1_fu_897_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_256_fu_889_p3),64));
    zext_ln865_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_fu_870_p4),8));
    zext_ln866_fu_848_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln866_fu_843_p2),64));
    zext_ln867_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln867_fu_853_p2),64));
    zext_ln868_fu_936_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln868_i_fu_928_p3),19));
    zext_ln870_1_fu_994_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_257_fu_986_p3),64));
    zext_ln870_fu_977_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln2_fu_967_p4),8));
    zext_ln871_fu_945_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln871_fu_940_p2),64));
    zext_ln872_1_fu_1029_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln872_i_fu_1021_p3),19));
    zext_ln872_fu_955_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln872_fu_950_p2),64));
end behav;
