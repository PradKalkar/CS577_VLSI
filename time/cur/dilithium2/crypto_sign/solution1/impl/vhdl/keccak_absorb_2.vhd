-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity keccak_absorb_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce0 : OUT STD_LOGIC;
    s_we0 : OUT STD_LOGIC;
    s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce1 : OUT STD_LOGIC;
    s_we1 : OUT STD_LOGIC;
    s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    pos_r : IN STD_LOGIC_VECTOR (6 downto 0);
    m_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    m_ce0 : OUT STD_LOGIC;
    m_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    m_offset : IN STD_LOGIC_VECTOR (12 downto 0);
    mlen : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of keccak_absorb_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (21 downto 0) := "0000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (21 downto 0) := "0000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (21 downto 0) := "0001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (21 downto 0) := "0010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (21 downto 0) := "0100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv29_1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_const_lv64_88 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010001000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv64_FFFFFFFFFFFFFF78 : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111101111000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal m_offset_cast2_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_offset_cast2_reg_1206 : STD_LOGIC_VECTOR (63 downto 0);
    signal pos_cast1_fu_499_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pos_cast1_reg_1211 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln387_fu_503_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln389_fu_523_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln389_reg_1225 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln387_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln389_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln389_reg_1231 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln391_2_fu_576_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln391_2_reg_1235 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_70_fu_582_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_70_reg_1241 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln393_1_fu_594_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln393_1_reg_1246 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln394_fu_599_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln394_reg_1251 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_offset_cast17_fu_604_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal m_offset_cast17_reg_1257 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln392_fu_626_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln392_reg_1270 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_632_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_32_fu_649_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_32_reg_1283 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln30_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_addr_reg_1293 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_fu_710_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln399_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln399_reg_1303 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sub_ln399_fu_729_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln399_reg_1307 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln399_fu_735_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln399_reg_1312 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln399_1_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln399_1_reg_1317 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln400_1_fu_755_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln400_1_reg_1321 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_1122_reg_1326 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln401_2_fu_769_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln401_2_reg_1331 : STD_LOGIC_VECTOR (32 downto 0);
    signal i_33_fu_781_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal i_33_reg_1339 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln401_2_fu_808_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln401_2_reg_1344 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln400_fu_776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_addr_1_reg_1349 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln408_fu_849_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln408_reg_1354 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_KeccakF1600_StatePer_1_fu_473_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_473_ap_done : STD_LOGIC;
    signal ap_predicate_op138_call_state10 : BOOLEAN;
    signal ap_block_state10_on_subcall_done : BOOLEAN;
    signal add_ln410_fu_855_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln410_reg_1359 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln408_fu_866_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln408_reg_1368 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln408_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln416_1_fu_880_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln416_1_reg_1373 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_1124_reg_1378 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_34_fu_900_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_34_reg_1387 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal add_ln410_2_fu_924_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln410_2_reg_1392 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln409_fu_894_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_addr_3_reg_1397 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln411_fu_935_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln411_reg_1402 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln414_fu_941_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln414_reg_1407 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln416_fu_956_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln416_reg_1415 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_ln417_2_fu_984_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln417_2_reg_1420 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln416_fu_951_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_addr_2_reg_1425 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln419_fu_1015_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln419_reg_1430 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln419_fu_1019_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln419_reg_1435 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln419_fu_1025_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln419_reg_1440 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln420_fu_1029_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln420_reg_1445 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln422_fu_1035_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln422_reg_1452 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_35_fu_1047_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal add_ln426_fu_1061_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln426_reg_1464 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln423_fu_1041_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln425_fu_1066_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln425_reg_1469 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal i_36_fu_1083_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_36_reg_1477 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln425_fu_1078_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_37_fu_1115_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_37_reg_1490 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal icmp_ln30_1_fu_1109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_addr_4_reg_1500 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln428_fu_1140_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln428_reg_1505 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_1_fu_1169_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_ce0 : STD_LOGIC;
    signal t_we0 : STD_LOGIC;
    signal t_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_473_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_473_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_473_state_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_473_state_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_473_state_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_473_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_473_state_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_473_state_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_473_state_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_473_state_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_load64_2_fu_481_ap_start : STD_LOGIC;
    signal grp_load64_2_fu_481_ap_done : STD_LOGIC;
    signal grp_load64_2_fu_481_ap_idle : STD_LOGIC;
    signal grp_load64_2_fu_481_ap_ready : STD_LOGIC;
    signal grp_load64_2_fu_481_x_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_load64_2_fu_481_x_ce0 : STD_LOGIC;
    signal grp_load64_2_fu_481_x_offset : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_load64_2_fu_481_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_ln387_reg_231 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_05_rec_reg_242 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_reg_253 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_263 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_0_i_reg_275 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_1620_reg_287 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_p_12_phi_fu_302_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_12_reg_299 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_p_1_phi_fu_312_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_1_reg_309 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_reg_319 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_phi_mux_p_2722_phi_fu_334_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_2722_reg_330 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_23_reg_344 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln403_fu_825_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_p_2_phi_fu_362_p6 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_2_reg_359 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv_reg_373 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal p_38_rec_reg_384 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_reg_396 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_3_reg_407 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal i_4_reg_418 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_reg_429 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal i_0_i1_reg_440 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_0_i2_reg_452 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln428_fu_1182_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_p_34_phi_fu_467_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_34_reg_464 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_KeccakF1600_StatePer_1_fu_473_ap_start_reg : STD_LOGIC := '0';
    signal grp_load64_2_fu_481_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln387_fu_509_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum1_cast_fu_616_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln392_fu_638_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_fu_655_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln396_fu_679_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln401_1_fu_820_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln410_1_fu_930_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln417_1_fu_995_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln424_fu_1053_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln426_1_fu_1104_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_10_fu_1121_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln427_fu_1135_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln396_fu_716_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_488_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln427_fu_1175_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln389_fu_520_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln391_fu_538_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln391_fu_542_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_68_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln391_fu_533_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln391_1_fu_552_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_69_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal umax_fu_564_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln391_fu_572_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln393_fu_588_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_71_fu_607_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum1_fu_611_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln390_fu_660_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln396_fu_664_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln_fu_669_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln31_fu_688_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_692_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_8_fu_684_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_9_fu_700_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln31_fu_704_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1121_fu_745_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal shl_ln16_fu_787_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln401_fu_795_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln401_1_fu_799_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln401_3_fu_804_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln400_fu_772_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln401_fu_815_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln402_fu_831_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln402_1_fu_839_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln402_fu_835_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln402_fu_843_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1123_fu_870_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal shl_ln18_fu_906_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln410_fu_914_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln410_1_fu_918_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln417_fu_962_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln17_fu_966_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln417_fu_974_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln417_fu_978_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln416_fu_947_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln417_1_fu_990_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal and_ln_fu_1000_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln418_fu_1011_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln418_1_fu_1007_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln426_fu_1058_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln425_1_fu_1074_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln425_fu_1070_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln426_1_fu_1089_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln426_2_fu_1094_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln426_3_fu_1099_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln9_fu_1126_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln31_4_fu_1147_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln31_4_fu_1151_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_11_fu_1143_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_12_fu_1159_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln31_1_fu_1163_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (21 downto 0);

    component KeccakF1600_StatePer_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component load64_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        x_offset : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keccak_absorb_2_t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    t_U : component keccak_absorb_2_t
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t_address0,
        ce0 => t_ce0,
        we0 => t_we0,
        d0 => t_d0,
        q0 => t_q0);

    grp_KeccakF1600_StatePer_1_fu_473 : component KeccakF1600_StatePer_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePer_1_fu_473_ap_start,
        ap_done => grp_KeccakF1600_StatePer_1_fu_473_ap_done,
        ap_idle => grp_KeccakF1600_StatePer_1_fu_473_ap_idle,
        ap_ready => grp_KeccakF1600_StatePer_1_fu_473_ap_ready,
        state_address0 => grp_KeccakF1600_StatePer_1_fu_473_state_address0,
        state_ce0 => grp_KeccakF1600_StatePer_1_fu_473_state_ce0,
        state_we0 => grp_KeccakF1600_StatePer_1_fu_473_state_we0,
        state_d0 => grp_KeccakF1600_StatePer_1_fu_473_state_d0,
        state_q0 => s_q0,
        state_address1 => grp_KeccakF1600_StatePer_1_fu_473_state_address1,
        state_ce1 => grp_KeccakF1600_StatePer_1_fu_473_state_ce1,
        state_we1 => grp_KeccakF1600_StatePer_1_fu_473_state_we1,
        state_d1 => grp_KeccakF1600_StatePer_1_fu_473_state_d1,
        state_q1 => s_q1);

    grp_load64_2_fu_481 : component load64_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_load64_2_fu_481_ap_start,
        ap_done => grp_load64_2_fu_481_ap_done,
        ap_idle => grp_load64_2_fu_481_ap_idle,
        ap_ready => grp_load64_2_fu_481_ap_ready,
        x_address0 => grp_load64_2_fu_481_x_address0,
        x_ce0 => grp_load64_2_fu_481_x_ce0,
        x_q0 => m_q0,
        x_offset => grp_load64_2_fu_481_x_offset,
        ap_return => grp_load64_2_fu_481_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    ap_return_preg <= ap_phi_mux_p_34_phi_fu_467_p4;
                end if; 
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_1_fu_473_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_1_fu_473_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln409_fu_894_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((icmp_ln400_fu_776_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
                    grp_KeccakF1600_StatePer_1_fu_473_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_1_fu_473_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_1_fu_473_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_load64_2_fu_481_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_load64_2_fu_481_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln416_fu_951_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((icmp_ln409_fu_894_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((icmp_ln400_fu_776_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
                    grp_load64_2_fu_481_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_load64_2_fu_481_ap_ready = ap_const_logic_1)) then 
                    grp_load64_2_fu_481_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i1_reg_440_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln425_fu_1078_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                i_0_i1_reg_440 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                i_0_i1_reg_440 <= i_37_reg_1490;
            end if; 
        end if;
    end process;

    i_0_i_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_621_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_i_reg_263 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_0_i_reg_263 <= i_32_reg_1283;
            end if; 
        end if;
    end process;

    i_0_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_0_reg_253 <= i_fu_632_p2;
            elsif (((icmp_ln389_fu_527_p2 = ap_const_lv1_0) and (icmp_ln387_fu_514_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_253 <= zext_ln389_fu_523_p1;
            end if; 
        end if;
    end process;

    i_1_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln399_1_fu_739_p2 = ap_const_lv1_0) and (icmp_ln399_fu_723_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_1_reg_319 <= ap_const_lv29_0;
            elsif (((grp_load64_2_fu_481_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_1_reg_319 <= i_33_reg_1339;
            end if; 
        end if;
    end process;

    i_2_reg_396_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln408_fu_860_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i_2_reg_396 <= ap_const_lv5_0;
            elsif (((grp_load64_2_fu_481_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                i_2_reg_396 <= i_34_reg_1387;
            end if; 
        end if;
    end process;

    i_3_reg_407_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_load64_2_fu_481_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                i_3_reg_407 <= add_ln416_reg_1415;
            elsif (((icmp_ln408_fu_860_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i_3_reg_407 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_4_reg_418_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln422_fu_1035_p2 = ap_const_lv1_0) and (icmp_ln416_fu_951_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                i_4_reg_418 <= ap_const_lv4_0;
            elsif (((icmp_ln423_fu_1041_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                i_4_reg_418 <= i_35_fu_1047_p2;
            end if; 
        end if;
    end process;

    i_5_reg_429_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln423_fu_1041_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                i_5_reg_429 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                i_5_reg_429 <= i_36_reg_1477;
            end if; 
        end if;
    end process;

    indvars_iv_reg_373_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done))) then 
                indvars_iv_reg_373 <= ap_phi_mux_p_2_phi_fu_362_p6;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_KeccakF1600_StatePer_1_fu_473_ap_done = ap_const_logic_1))) then 
                indvars_iv_reg_373 <= add_ln414_reg_1407;
            end if; 
        end if;
    end process;

    p_05_rec_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_05_rec_reg_242 <= add_ln392_reg_1270;
            elsif (((icmp_ln389_fu_527_p2 = ap_const_lv1_0) and (icmp_ln387_fu_514_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_05_rec_reg_242 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    p_12_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln389_fu_527_p2 = ap_const_lv1_1) and (icmp_ln387_fu_514_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_12_reg_299 <= pos_cast1_reg_1211;
            elsif (((icmp_ln389_reg_1231 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                p_12_reg_299 <= add_ln394_reg_1251;
            end if; 
        end if;
    end process;

    p_1620_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln389_fu_527_p2 = ap_const_lv1_1) and (icmp_ln387_fu_514_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_1620_reg_287 <= ap_const_lv64_0;
            elsif (((icmp_ln389_reg_1231 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                p_1620_reg_287 <= xor_ln391_2_reg_1235;
            end if; 
        end if;
    end process;

    p_1_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln389_fu_527_p2 = ap_const_lv1_1) and (icmp_ln387_fu_514_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_1_reg_309 <= mlen;
            elsif (((icmp_ln389_reg_1231 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                p_1_reg_309 <= add_ln393_1_reg_1246;
            end if; 
        end if;
    end process;

    p_23_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln399_fu_723_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln399_fu_723_p2 = ap_const_lv1_0) and (icmp_ln399_1_fu_739_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
                p_23_reg_344 <= ap_phi_mux_p_12_phi_fu_302_p4;
            elsif (((icmp_ln399_1_reg_1317 = ap_const_lv1_0) and (icmp_ln399_reg_1303 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done))) then 
                p_23_reg_344 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_2722_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln399_fu_723_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln399_fu_723_p2 = ap_const_lv1_0) and (icmp_ln399_1_fu_739_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
                p_2722_reg_330 <= ap_const_lv32_0;
            elsif (((icmp_ln399_1_reg_1317 = ap_const_lv1_0) and (icmp_ln399_reg_1303 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done))) then 
                p_2722_reg_330 <= sub_ln399_reg_1307;
            end if; 
        end if;
    end process;

    p_2_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln399_fu_723_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln399_fu_723_p2 = ap_const_lv1_0) and (icmp_ln399_1_fu_739_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
                p_2_reg_359 <= ap_phi_mux_p_1_phi_fu_312_p4;
            elsif (((icmp_ln399_1_reg_1317 = ap_const_lv1_0) and (icmp_ln399_reg_1303 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done))) then 
                p_2_reg_359 <= sub_ln403_fu_825_p2;
            end if; 
        end if;
    end process;

    p_34_reg_464_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln422_fu_1035_p2 = ap_const_lv1_1) and (icmp_ln416_fu_951_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                p_34_reg_464 <= add_ln420_fu_1029_p2;
            elsif (((icmp_ln422_reg_1452 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                p_34_reg_464 <= add_ln428_fu_1182_p2;
            end if; 
        end if;
    end process;

    p_38_rec_reg_384_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done))) then 
                p_38_rec_reg_384 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_KeccakF1600_StatePer_1_fu_473_ap_done = ap_const_logic_1))) then 
                p_38_rec_reg_384 <= add_ln411_reg_1402;
            end if; 
        end if;
    end process;

    phi_ln387_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln387_fu_514_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln387_reg_231 <= add_ln387_fu_503_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln387_reg_231 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    r_0_i2_reg_452_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln425_fu_1078_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                r_0_i2_reg_452 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                r_0_i2_reg_452 <= r_1_fu_1169_p2;
            end if; 
        end if;
    end process;

    r_0_i_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_621_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_0_i_reg_275 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                r_0_i_reg_275 <= r_fu_710_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln392_reg_1270 <= add_ln392_fu_626_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln389_fu_527_p2 = ap_const_lv1_0) and (icmp_ln387_fu_514_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln393_1_reg_1246 <= add_ln393_1_fu_594_p2;
                add_ln394_reg_1251 <= add_ln394_fu_599_p2;
                empty_70_reg_1241 <= empty_70_fu_582_p2;
                    m_offset_cast17_reg_1257(12 downto 0) <= m_offset_cast17_fu_604_p1(12 downto 0);
                xor_ln391_2_reg_1235 <= xor_ln391_2_fu_576_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln400_fu_776_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                add_ln401_2_reg_1344 <= add_ln401_2_fu_808_p2;
                s_addr_1_reg_1349 <= zext_ln401_1_fu_820_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done))) then
                add_ln408_reg_1354 <= add_ln408_fu_849_p2;
                add_ln410_reg_1359 <= add_ln410_fu_855_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln409_fu_894_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                add_ln410_2_reg_1392 <= add_ln410_2_fu_924_p2;
                s_addr_3_reg_1397 <= zext_ln410_1_fu_930_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln409_fu_894_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                add_ln411_reg_1402 <= add_ln411_fu_935_p2;
                add_ln414_reg_1407 <= add_ln414_fu_941_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                add_ln416_reg_1415 <= add_ln416_fu_956_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln416_fu_951_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                add_ln417_2_reg_1420 <= add_ln417_2_fu_984_p2;
                s_addr_2_reg_1425 <= zext_ln417_1_fu_995_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln416_fu_951_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                add_ln420_reg_1445 <= add_ln420_fu_1029_p2;
                icmp_ln422_reg_1452 <= icmp_ln422_fu_1035_p2;
                sub_ln419_reg_1435 <= sub_ln419_fu_1019_p2;
                trunc_ln419_reg_1440 <= trunc_ln419_fu_1025_p1;
                    zext_ln419_reg_1430(7 downto 3) <= zext_ln419_fu_1015_p1(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln423_fu_1041_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                add_ln426_reg_1464 <= add_ln426_fu_1061_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_32_reg_1283 <= i_32_fu_649_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_33_reg_1339 <= i_33_fu_781_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                i_34_reg_1387 <= i_34_fu_900_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                i_36_reg_1477 <= i_36_fu_1083_p2;
                    zext_ln425_reg_1469(31 downto 0) <= zext_ln425_fu_1066_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                i_37_reg_1490 <= i_37_fu_1115_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln387_fu_514_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln389_reg_1231 <= icmp_ln389_fu_527_p2;
                    zext_ln389_reg_1225(2 downto 0) <= zext_ln389_fu_523_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln399_fu_723_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                icmp_ln399_1_reg_1317 <= icmp_ln399_1_fu_739_p2;
                sub_ln399_reg_1307 <= sub_ln399_fu_729_p2;
                    zext_ln399_reg_1312(31 downto 0) <= zext_ln399_fu_735_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                icmp_ln399_reg_1303 <= icmp_ln399_fu_723_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    m_offset_cast2_reg_1206(12 downto 0) <= m_offset_cast2_fu_495_p1(12 downto 0);
                    pos_cast1_reg_1211(6 downto 0) <= pos_cast1_fu_499_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_1_fu_1109_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                s_addr_4_reg_1500 <= zext_ln427_fu_1135_p1(5 - 1 downto 0);
                trunc_ln428_reg_1505 <= trunc_ln428_fu_1140_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_643_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                s_addr_reg_1293 <= zext_ln396_fu_679_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln399_1_fu_739_p2 = ap_const_lv1_0) and (icmp_ln399_fu_723_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                tmp_1122_reg_1326 <= sub_ln399_fu_729_p2(31 downto 3);
                    zext_ln400_1_reg_1321(28 downto 0) <= zext_ln400_1_fu_755_p1(28 downto 0);
                    zext_ln401_2_reg_1331(12 downto 0) <= zext_ln401_2_fu_769_p1(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln408_fu_860_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                tmp_1124_reg_1378 <= indvars_iv_reg_373(7 downto 3);
                trunc_ln408_reg_1368 <= trunc_ln408_fu_866_p1;
                    zext_ln416_1_reg_1373(28 downto 0) <= zext_ln416_1_fu_880_p1(28 downto 0);
            end if;
        end if;
    end process;
    m_offset_cast2_reg_1206(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    pos_cast1_reg_1211(31 downto 7) <= "0000000000000000000000000";
    zext_ln389_reg_1225(31 downto 3) <= "00000000000000000000000000000";
    m_offset_cast17_reg_1257(13) <= '0';
    zext_ln399_reg_1312(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln400_1_reg_1321(29) <= '0';
    zext_ln401_2_reg_1331(32 downto 13) <= "00000000000000000000";
    zext_ln416_1_reg_1373(29) <= '0';
    zext_ln419_reg_1430(2 downto 0) <= "000";
    zext_ln419_reg_1430(13 downto 8) <= "000000";
    zext_ln425_reg_1469(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln387_fu_514_p2, icmp_ln389_fu_527_p2, ap_CS_fsm_state3, ap_CS_fsm_state5, icmp_ln30_fu_643_p2, icmp_ln399_fu_723_p2, ap_CS_fsm_state7, icmp_ln399_1_fu_739_p2, ap_CS_fsm_state8, icmp_ln400_fu_776_p2, ap_CS_fsm_state10, grp_KeccakF1600_StatePer_1_fu_473_ap_done, ap_block_state10_on_subcall_done, ap_CS_fsm_state11, icmp_ln408_fu_860_p2, ap_CS_fsm_state12, icmp_ln409_fu_894_p2, ap_CS_fsm_state15, icmp_ln416_fu_951_p2, icmp_ln422_fu_1035_p2, ap_CS_fsm_state17, icmp_ln423_fu_1041_p2, ap_CS_fsm_state18, icmp_ln425_fu_1078_p2, ap_CS_fsm_state20, icmp_ln30_1_fu_1109_p2, grp_load64_2_fu_481_ap_done, exitcond_fu_621_p2, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state13, ap_CS_fsm_state16)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln389_fu_527_p2 = ap_const_lv1_0) and (icmp_ln387_fu_514_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((icmp_ln389_fu_527_p2 = ap_const_lv1_1) and (icmp_ln387_fu_514_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond_fu_621_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln30_fu_643_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln399_1_fu_739_p2 = ap_const_lv1_0) and (icmp_ln399_fu_723_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln400_fu_776_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((grp_load64_2_fu_481_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln408_fu_860_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln409_fu_894_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((grp_load64_2_fu_481_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_KeccakF1600_StatePer_1_fu_473_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln422_fu_1035_p2 = ap_const_lv1_0) and (icmp_ln416_fu_951_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                elsif (((icmp_ln422_fu_1035_p2 = ap_const_lv1_1) and (icmp_ln416_fu_951_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (((grp_load64_2_fu_481_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((icmp_ln423_fu_1041_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln425_fu_1078_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state20 => 
                if (((icmp_ln30_1_fu_1109_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln387_fu_503_p2 <= std_logic_vector(unsigned(phi_ln387_reg_231) + unsigned(ap_const_lv3_1));
    add_ln390_fu_660_p2 <= std_logic_vector(unsigned(zext_ln389_reg_1225) + unsigned(empty_70_reg_1241));
    add_ln392_fu_626_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(p_05_rec_reg_242));
    add_ln393_1_fu_594_p2 <= std_logic_vector(unsigned(mlen) + unsigned(add_ln393_fu_588_p2));
    add_ln393_fu_588_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(umax_fu_564_p3));
    add_ln394_fu_599_p2 <= std_logic_vector(unsigned(empty_70_fu_582_p2) + unsigned(pos_cast1_reg_1211));
    add_ln401_1_fu_799_p2 <= std_logic_vector(unsigned(zext_ln401_fu_795_p1) + unsigned(zext_ln401_2_reg_1331));
    add_ln401_2_fu_808_p2 <= std_logic_vector(unsigned(zext_ln401_3_fu_804_p1) + unsigned(p_1620_reg_287));
    add_ln401_fu_815_p2 <= std_logic_vector(unsigned(zext_ln400_fu_772_p1) + unsigned(zext_ln400_1_reg_1321));
    add_ln402_fu_843_p2 <= std_logic_vector(unsigned(zext_ln402_fu_831_p1) + unsigned(p_1620_reg_287));
    add_ln408_fu_849_p2 <= std_logic_vector(unsigned(trunc_ln402_1_fu_839_p1) + unsigned(trunc_ln402_fu_835_p1));
    add_ln410_1_fu_918_p2 <= std_logic_vector(unsigned(zext_ln410_fu_914_p1) + unsigned(p_38_rec_reg_384));
    add_ln410_2_fu_924_p2 <= std_logic_vector(unsigned(add_ln410_reg_1359) + unsigned(add_ln410_1_fu_918_p2));
    add_ln410_fu_855_p2 <= std_logic_vector(unsigned(add_ln402_fu_843_p2) + unsigned(m_offset_cast2_reg_1206));
    add_ln411_fu_935_p2 <= std_logic_vector(unsigned(p_38_rec_reg_384) + unsigned(ap_const_lv64_88));
    add_ln414_fu_941_p2 <= std_logic_vector(unsigned(indvars_iv_reg_373) + unsigned(ap_const_lv64_FFFFFFFFFFFFFF78));
    add_ln416_fu_956_p2 <= std_logic_vector(unsigned(i_3_reg_407) + unsigned(ap_const_lv5_1));
    add_ln417_1_fu_990_p2 <= std_logic_vector(unsigned(zext_ln416_1_reg_1373) + unsigned(zext_ln416_fu_947_p1));
    add_ln417_2_fu_984_p2 <= std_logic_vector(unsigned(add_ln410_reg_1359) + unsigned(add_ln417_fu_978_p2));
    add_ln417_fu_978_p2 <= std_logic_vector(unsigned(zext_ln417_fu_974_p1) + unsigned(p_38_rec_reg_384));
    add_ln420_fu_1029_p2 <= std_logic_vector(unsigned(p_23_reg_344) + unsigned(zext_ln418_1_fu_1007_p1));
    add_ln426_1_fu_1089_p2 <= std_logic_vector(unsigned(trunc_ln425_fu_1070_p1) + unsigned(zext_ln419_reg_1430));
    add_ln426_2_fu_1094_p2 <= std_logic_vector(unsigned(trunc_ln408_reg_1368) + unsigned(add_ln426_1_fu_1089_p2));
    add_ln426_3_fu_1099_p2 <= std_logic_vector(unsigned(add_ln426_reg_1464) + unsigned(add_ln426_2_fu_1094_p2));
    add_ln426_fu_1061_p2 <= std_logic_vector(unsigned(zext_ln426_fu_1058_p1) + unsigned(add_ln408_reg_1354));
    add_ln428_fu_1182_p2 <= std_logic_vector(unsigned(trunc_ln428_reg_1505) + unsigned(add_ln420_reg_1445));
    and_ln_fu_1000_p3 <= (tmp_1124_reg_1378 & ap_const_lv3_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state10_on_subcall_done_assign_proc : process(grp_KeccakF1600_StatePer_1_fu_473_ap_done, ap_predicate_op138_call_state10)
    begin
                ap_block_state10_on_subcall_done <= ((ap_predicate_op138_call_state10 = ap_const_boolean_1) and (grp_KeccakF1600_StatePer_1_fu_473_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_12_phi_fu_302_p4_assign_proc : process(icmp_ln389_reg_1231, add_ln394_reg_1251, ap_CS_fsm_state7, p_12_reg_299)
    begin
        if (((icmp_ln389_reg_1231 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_phi_mux_p_12_phi_fu_302_p4 <= add_ln394_reg_1251;
        else 
            ap_phi_mux_p_12_phi_fu_302_p4 <= p_12_reg_299;
        end if; 
    end process;


    ap_phi_mux_p_1_phi_fu_312_p4_assign_proc : process(icmp_ln389_reg_1231, add_ln393_1_reg_1246, ap_CS_fsm_state7, p_1_reg_309)
    begin
        if (((icmp_ln389_reg_1231 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_phi_mux_p_1_phi_fu_312_p4 <= add_ln393_1_reg_1246;
        else 
            ap_phi_mux_p_1_phi_fu_312_p4 <= p_1_reg_309;
        end if; 
    end process;


    ap_phi_mux_p_2722_phi_fu_334_p6_assign_proc : process(icmp_ln399_reg_1303, sub_ln399_reg_1307, icmp_ln399_1_reg_1317, ap_CS_fsm_state10, p_2722_reg_330)
    begin
        if (((icmp_ln399_1_reg_1317 = ap_const_lv1_0) and (icmp_ln399_reg_1303 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_phi_mux_p_2722_phi_fu_334_p6 <= sub_ln399_reg_1307;
        else 
            ap_phi_mux_p_2722_phi_fu_334_p6 <= p_2722_reg_330;
        end if; 
    end process;


    ap_phi_mux_p_2_phi_fu_362_p6_assign_proc : process(icmp_ln399_reg_1303, icmp_ln399_1_reg_1317, ap_CS_fsm_state10, sub_ln403_fu_825_p2, p_2_reg_359)
    begin
        if (((icmp_ln399_1_reg_1317 = ap_const_lv1_0) and (icmp_ln399_reg_1303 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_phi_mux_p_2_phi_fu_362_p6 <= sub_ln403_fu_825_p2;
        else 
            ap_phi_mux_p_2_phi_fu_362_p6 <= p_2_reg_359;
        end if; 
    end process;


    ap_phi_mux_p_34_phi_fu_467_p4_assign_proc : process(icmp_ln422_reg_1452, add_ln428_fu_1182_p2, p_34_reg_464, ap_CS_fsm_state22)
    begin
        if (((icmp_ln422_reg_1452 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            ap_phi_mux_p_34_phi_fu_467_p4 <= add_ln428_fu_1182_p2;
        else 
            ap_phi_mux_p_34_phi_fu_467_p4 <= p_34_reg_464;
        end if; 
    end process;


    ap_predicate_op138_call_state10_assign_proc : process(icmp_ln399_reg_1303, icmp_ln399_1_reg_1317)
    begin
                ap_predicate_op138_call_state10 <= ((icmp_ln399_1_reg_1317 = ap_const_lv1_0) and (icmp_ln399_reg_1303 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_p_34_phi_fu_467_p4, ap_CS_fsm_state22, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ap_return <= ap_phi_mux_p_34_phi_fu_467_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    empty_68_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln391_fu_542_p2),64));
    empty_69_fu_558_p2 <= "1" when (unsigned(xor_ln391_fu_533_p2) > unsigned(xor_ln391_1_fu_552_p2)) else "0";
    empty_70_fu_582_p2 <= (trunc_ln391_fu_572_p1 xor ap_const_lv32_FFFFFFFF);
    empty_71_fu_607_p1 <= p_05_rec_reg_242(14 - 1 downto 0);
    exitcond_fu_621_p2 <= "1" when (p_05_rec_reg_242 = xor_ln391_2_reg_1235) else "0";
    grp_KeccakF1600_StatePer_1_fu_473_ap_start <= grp_KeccakF1600_StatePer_1_fu_473_ap_start_reg;
    grp_fu_488_p2 <= (s_q0 xor grp_load64_2_fu_481_ap_return);
    grp_load64_2_fu_481_ap_start <= grp_load64_2_fu_481_ap_start_reg;

    grp_load64_2_fu_481_x_offset_assign_proc : process(add_ln401_2_reg_1344, add_ln410_2_reg_1392, add_ln417_2_reg_1420, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_load64_2_fu_481_x_offset <= add_ln417_2_reg_1420;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_load64_2_fu_481_x_offset <= add_ln410_2_reg_1392;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_load64_2_fu_481_x_offset <= add_ln401_2_reg_1344;
        else 
            grp_load64_2_fu_481_x_offset <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_32_fu_649_p2 <= std_logic_vector(unsigned(i_0_i_reg_263) + unsigned(ap_const_lv4_1));
    i_33_fu_781_p2 <= std_logic_vector(unsigned(i_1_reg_319) + unsigned(ap_const_lv29_1));
    i_34_fu_900_p2 <= std_logic_vector(unsigned(i_2_reg_396) + unsigned(ap_const_lv5_1));
    i_35_fu_1047_p2 <= std_logic_vector(unsigned(i_4_reg_418) + unsigned(ap_const_lv4_1));
    i_36_fu_1083_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(i_5_reg_429));
    i_37_fu_1115_p2 <= std_logic_vector(unsigned(i_0_i1_reg_440) + unsigned(ap_const_lv4_1));
    i_fu_632_p2 <= std_logic_vector(unsigned(i_0_reg_253) + unsigned(ap_const_lv32_1));
    icmp_ln30_1_fu_1109_p2 <= "1" when (i_0_i1_reg_440 = ap_const_lv4_8) else "0";
    icmp_ln30_fu_643_p2 <= "1" when (i_0_i_reg_263 = ap_const_lv4_8) else "0";
    icmp_ln387_fu_514_p2 <= "1" when (phi_ln387_reg_231 = ap_const_lv3_7) else "0";
    icmp_ln389_fu_527_p2 <= "1" when (trunc_ln389_fu_520_p1 = ap_const_lv3_0) else "0";
    icmp_ln399_1_fu_739_p2 <= "1" when (unsigned(ap_phi_mux_p_1_phi_fu_312_p4) < unsigned(zext_ln399_fu_735_p1)) else "0";
    icmp_ln399_fu_723_p2 <= "1" when (ap_phi_mux_p_12_phi_fu_302_p4 = ap_const_lv32_0) else "0";
    icmp_ln400_fu_776_p2 <= "1" when (i_1_reg_319 = tmp_1122_reg_1326) else "0";
    icmp_ln408_fu_860_p2 <= "1" when (unsigned(indvars_iv_reg_373) < unsigned(ap_const_lv64_88)) else "0";
    icmp_ln409_fu_894_p2 <= "1" when (i_2_reg_396 = ap_const_lv5_11) else "0";
    icmp_ln416_fu_951_p2 <= "1" when (i_3_reg_407 = tmp_1124_reg_1378) else "0";
    icmp_ln422_fu_1035_p2 <= "1" when (indvars_iv_reg_373 = zext_ln418_fu_1011_p1) else "0";
    icmp_ln423_fu_1041_p2 <= "1" when (i_4_reg_418 = ap_const_lv4_8) else "0";
    icmp_ln425_fu_1078_p2 <= "1" when (unsigned(zext_ln425_1_fu_1074_p1) < unsigned(trunc_ln419_reg_1440)) else "0";
    lshr_ln9_fu_1126_p4 <= add_ln420_reg_1445(31 downto 3);
    lshr_ln_fu_669_p4 <= sub_ln396_fu_664_p2(31 downto 3);

    m_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state18, grp_load64_2_fu_481_x_address0, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state16, sum1_cast_fu_616_p1, zext_ln426_1_fu_1104_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            m_address0 <= zext_ln426_1_fu_1104_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            m_address0 <= sum1_cast_fu_616_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_address0 <= grp_load64_2_fu_481_x_address0;
        else 
            m_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    m_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state18, grp_load64_2_fu_481_x_ce0, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_ce0 <= grp_load64_2_fu_481_x_ce0;
        else 
            m_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_offset_cast17_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_offset),14));
    m_offset_cast2_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_offset),64));
    pos_cast1_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pos_r),32));
    r_1_fu_1169_p2 <= (shl_ln31_1_fu_1163_p2 or r_0_i2_reg_452);
    r_fu_710_p2 <= (shl_ln31_fu_704_p2 or r_0_i_reg_275);

    s_address0_assign_proc : process(ap_CS_fsm_state5, s_addr_reg_1293, ap_CS_fsm_state7, ap_CS_fsm_state8, icmp_ln400_fu_776_p2, s_addr_1_reg_1349, ap_CS_fsm_state10, ap_predicate_op138_call_state10, ap_CS_fsm_state12, icmp_ln409_fu_894_p2, s_addr_3_reg_1397, ap_CS_fsm_state15, s_addr_2_reg_1425, ap_CS_fsm_state20, s_addr_4_reg_1500, grp_KeccakF1600_StatePer_1_fu_473_state_address0, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state22, zext_ln396_fu_679_p1, zext_ln401_1_fu_820_p1, zext_ln410_1_fu_930_p1, zext_ln417_1_fu_995_p1, zext_ln427_fu_1135_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            s_address0 <= s_addr_4_reg_1500;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            s_address0 <= zext_ln427_fu_1135_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            s_address0 <= s_addr_2_reg_1425;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            s_address0 <= zext_ln417_1_fu_995_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            s_address0 <= s_addr_3_reg_1397;
        elsif (((icmp_ln409_fu_894_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            s_address0 <= zext_ln410_1_fu_930_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            s_address0 <= s_addr_1_reg_1349;
        elsif (((icmp_ln400_fu_776_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            s_address0 <= zext_ln401_1_fu_820_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_address0 <= s_addr_reg_1293;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            s_address0 <= zext_ln396_fu_679_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_predicate_op138_call_state10 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            s_address0 <= grp_KeccakF1600_StatePer_1_fu_473_state_address0;
        else 
            s_address0 <= "XXXXX";
        end if; 
    end process;

    s_address1 <= grp_KeccakF1600_StatePer_1_fu_473_state_address1;

    s_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, icmp_ln400_fu_776_p2, ap_CS_fsm_state10, ap_predicate_op138_call_state10, ap_CS_fsm_state12, icmp_ln409_fu_894_p2, ap_CS_fsm_state15, ap_CS_fsm_state20, grp_KeccakF1600_StatePer_1_fu_473_state_ce0, grp_load64_2_fu_481_ap_done, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((grp_load64_2_fu_481_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((grp_load64_2_fu_481_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((grp_load64_2_fu_481_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((icmp_ln409_fu_894_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((icmp_ln400_fu_776_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            s_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_predicate_op138_call_state10 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            s_ce0 <= grp_KeccakF1600_StatePer_1_fu_473_state_ce0;
        else 
            s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_ce1_assign_proc : process(ap_CS_fsm_state10, ap_predicate_op138_call_state10, grp_KeccakF1600_StatePer_1_fu_473_state_ce1, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_predicate_op138_call_state10 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            s_ce1 <= grp_KeccakF1600_StatePer_1_fu_473_state_ce1;
        else 
            s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_d0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state10, ap_predicate_op138_call_state10, grp_KeccakF1600_StatePer_1_fu_473_state_d0, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state22, xor_ln396_fu_716_p2, grp_fu_488_p2, xor_ln427_fu_1175_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            s_d0 <= xor_ln427_fu_1175_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            s_d0 <= grp_fu_488_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_d0 <= xor_ln396_fu_716_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_predicate_op138_call_state10 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            s_d0 <= grp_KeccakF1600_StatePer_1_fu_473_state_d0;
        else 
            s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    s_d1 <= grp_KeccakF1600_StatePer_1_fu_473_state_d1;

    s_we0_assign_proc : process(icmp_ln389_reg_1231, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_predicate_op138_call_state10, icmp_ln422_reg_1452, grp_KeccakF1600_StatePer_1_fu_473_state_we0, grp_load64_2_fu_481_ap_done, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state22)
    begin
        if ((((icmp_ln422_reg_1452 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((grp_load64_2_fu_481_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((grp_load64_2_fu_481_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((grp_load64_2_fu_481_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((icmp_ln389_reg_1231 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            s_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_predicate_op138_call_state10 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            s_we0 <= grp_KeccakF1600_StatePer_1_fu_473_state_we0;
        else 
            s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s_we1_assign_proc : process(ap_CS_fsm_state10, ap_predicate_op138_call_state10, grp_KeccakF1600_StatePer_1_fu_473_state_we1, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_predicate_op138_call_state10 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            s_we1 <= grp_KeccakF1600_StatePer_1_fu_473_state_we1;
        else 
            s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln16_fu_787_p3 <= (i_1_reg_319 & ap_const_lv3_0);
    shl_ln17_fu_966_p3 <= (trunc_ln417_fu_962_p1 & ap_const_lv3_0);
    shl_ln18_fu_906_p3 <= (i_2_reg_396 & ap_const_lv3_0);
    shl_ln31_1_fu_1163_p2 <= std_logic_vector(shift_left(unsigned(zext_ln31_11_fu_1143_p1),to_integer(unsigned('0' & zext_ln31_12_fu_1159_p1(31-1 downto 0)))));
    shl_ln31_4_fu_1151_p3 <= (trunc_ln31_4_fu_1147_p1 & ap_const_lv3_0);
    shl_ln31_fu_704_p2 <= std_logic_vector(shift_left(unsigned(zext_ln31_8_fu_684_p1),to_integer(unsigned('0' & zext_ln31_9_fu_700_p1(31-1 downto 0)))));
    shl_ln_fu_692_p3 <= (trunc_ln31_fu_688_p1 & ap_const_lv3_0);
    sub_ln391_fu_542_p2 <= std_logic_vector(signed(ap_const_lv4_8) - signed(zext_ln391_fu_538_p1));
    sub_ln396_fu_664_p2 <= std_logic_vector(unsigned(add_ln394_reg_1251) - unsigned(add_ln390_fu_660_p2));
    sub_ln399_fu_729_p2 <= std_logic_vector(unsigned(ap_const_lv32_88) - unsigned(ap_phi_mux_p_12_phi_fu_302_p4));
    sub_ln403_fu_825_p2 <= std_logic_vector(unsigned(p_1_reg_309) - unsigned(zext_ln399_reg_1312));
    sub_ln419_fu_1019_p2 <= std_logic_vector(unsigned(indvars_iv_reg_373) - unsigned(zext_ln418_fu_1011_p1));
    sum1_cast_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_fu_611_p2),64));
    sum1_fu_611_p2 <= std_logic_vector(unsigned(m_offset_cast17_reg_1257) + unsigned(empty_71_fu_607_p1));

    t_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state17, zext_ln425_reg_1469, ap_CS_fsm_state20, ap_CS_fsm_state19, zext_ln387_fu_509_p1, zext_ln392_fu_638_p1, zext_ln31_fu_655_p1, zext_ln424_fu_1053_p1, zext_ln31_10_fu_1121_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            t_address0 <= zext_ln31_10_fu_1121_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            t_address0 <= zext_ln425_reg_1469(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            t_address0 <= zext_ln424_fu_1053_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            t_address0 <= zext_ln31_fu_655_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_address0 <= zext_ln392_fu_638_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_address0 <= zext_ln387_fu_509_p1(3 - 1 downto 0);
        else 
            t_address0 <= "XXX";
        end if; 
    end process;


    t_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state17, ap_CS_fsm_state20, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            t_ce0 <= ap_const_logic_1;
        else 
            t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t_d0_assign_proc : process(m_q0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            t_d0 <= m_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            t_d0 <= ap_const_lv8_0;
        else 
            t_d0 <= "XXXXXXXX";
        end if; 
    end process;


    t_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state17, icmp_ln423_fu_1041_p2, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln423_fu_1041_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            t_we0 <= ap_const_logic_1;
        else 
            t_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1121_fu_745_p4 <= ap_phi_mux_p_12_phi_fu_302_p4(31 downto 3);
    tmp_1123_fu_870_p4 <= p_23_reg_344(31 downto 3);
    trunc_ln31_4_fu_1147_p1 <= i_0_i1_reg_440(3 - 1 downto 0);
    trunc_ln31_fu_688_p1 <= i_0_i_reg_263(3 - 1 downto 0);
    trunc_ln389_fu_520_p1 <= pos_r(3 - 1 downto 0);
    trunc_ln391_fu_572_p1 <= umax_fu_564_p3(32 - 1 downto 0);
    trunc_ln402_1_fu_839_p1 <= p_1620_reg_287(14 - 1 downto 0);
    trunc_ln402_fu_835_p1 <= ap_phi_mux_p_2722_phi_fu_334_p6(14 - 1 downto 0);
    trunc_ln408_fu_866_p1 <= p_38_rec_reg_384(14 - 1 downto 0);
    trunc_ln417_fu_962_p1 <= i_3_reg_407(4 - 1 downto 0);
    trunc_ln419_fu_1025_p1 <= sub_ln419_fu_1019_p2(33 - 1 downto 0);
    trunc_ln425_fu_1070_p1 <= i_5_reg_429(14 - 1 downto 0);
    trunc_ln428_fu_1140_p1 <= sub_ln419_reg_1435(32 - 1 downto 0);
    umax_fu_564_p3 <= 
        xor_ln391_fu_533_p2 when (empty_69_fu_558_p2(0) = '1') else 
        xor_ln391_1_fu_552_p2;
    xor_ln391_1_fu_552_p2 <= (empty_68_fu_548_p1 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln391_2_fu_576_p2 <= (umax_fu_564_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln391_fu_533_p2 <= (mlen xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln396_fu_716_p2 <= (s_q0 xor r_0_i_reg_275);
    xor_ln427_fu_1175_p2 <= (s_q0 xor r_0_i2_reg_452);
    zext_ln31_10_fu_1121_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i1_reg_440),64));
    zext_ln31_11_fu_1143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_q0),64));
    zext_ln31_12_fu_1159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln31_4_fu_1151_p3),64));
    zext_ln31_8_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_q0),64));
    zext_ln31_9_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_692_p3),64));
    zext_ln31_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_263),64));
    zext_ln387_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln387_reg_231),64));
    zext_ln389_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln389_fu_520_p1),32));
    zext_ln391_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln389_fu_520_p1),4));
    zext_ln392_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_253),64));
    zext_ln396_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_669_p4),64));
    zext_ln399_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln399_fu_729_p2),64));
    zext_ln400_1_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1121_fu_745_p4),30));
    zext_ln400_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_319),30));
    zext_ln401_1_fu_820_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln401_fu_815_p2),64));
    zext_ln401_2_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_offset),33));
    zext_ln401_3_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln401_1_fu_799_p2),64));
    zext_ln401_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln16_fu_787_p3),33));
    zext_ln402_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_2722_phi_fu_334_p6),64));
    zext_ln410_1_fu_930_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_396),64));
    zext_ln410_fu_914_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln18_fu_906_p3),64));
    zext_ln416_1_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1123_fu_870_p4),30));
    zext_ln416_fu_947_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_407),30));
    zext_ln417_1_fu_995_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln417_1_fu_990_p2),64));
    zext_ln417_fu_974_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln17_fu_966_p3),64));
    zext_ln418_1_fu_1007_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_1000_p3),32));
    zext_ln418_fu_1011_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_1000_p3),64));
    zext_ln419_fu_1015_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_1000_p3),14));
    zext_ln424_fu_1053_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_418),64));
    zext_ln425_1_fu_1074_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_429),33));
    zext_ln425_fu_1066_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_429),64));
    zext_ln426_1_fu_1104_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln426_3_fu_1099_p2),64));
    zext_ln426_fu_1058_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_offset),14));
    zext_ln427_fu_1135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln9_fu_1126_p4),64));
end behav;
