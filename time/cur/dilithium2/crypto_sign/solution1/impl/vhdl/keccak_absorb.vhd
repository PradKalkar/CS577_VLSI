-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity keccak_absorb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce0 : OUT STD_LOGIC;
    s_we0 : OUT STD_LOGIC;
    s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce1 : OUT STD_LOGIC;
    s_we1 : OUT STD_LOGIC;
    s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    r : IN STD_LOGIC_VECTOR (8 downto 0);
    pos_r : IN STD_LOGIC_VECTOR (6 downto 0);
    m_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    m_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of keccak_absorb is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_510 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal t_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal reg_515 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_520 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal reg_524 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_528 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal reg_532 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_536_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_reg_1124 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_62_fu_540_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_62_reg_1130 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln391_fu_544_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln393_fu_564_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln391_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln393_1_fu_568_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln393_1_reg_1148 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln395_2_fu_612_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln395_2_reg_1156 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln393_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln395_fu_618_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln395_reg_1161 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast6_fu_622_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_cast6_reg_1166 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln397_fu_634_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln397_reg_1171 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln398_fu_640_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln398_reg_1176 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln396_fu_654_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_fu_667_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1205 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln401_fu_701_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln401_reg_1210 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_addr_reg_1245 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln403_fu_739_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln403_reg_1250 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln403_fu_747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln403_reg_1257 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln403_1_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln403_1_reg_1261 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln409_fu_764_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln409_reg_1265 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln412_fu_768_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln412_reg_1270 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln408_fu_777_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln408_reg_1275 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_KeccakF1600_StatePer_1_fu_504_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_504_ap_done : STD_LOGIC;
    signal ap_predicate_op126_call_state9 : BOOLEAN;
    signal ap_block_state9_on_subcall_done : BOOLEAN;
    signal sext_ln408_fu_781_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_68_fu_785_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_68_reg_1285 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_1292 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln416_1_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_1_reg_1297 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln414_fu_803_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal select_ln32_2_fu_817_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln32_2_reg_1308 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln32_3_fu_823_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln32_3_reg_1316 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln423_2_fu_839_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln423_2_reg_1324 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_6740_reg_1329 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln425_fu_853_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln425_reg_1335 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_fu_862_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln32_reg_1340 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln32_1_fu_868_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln32_1_reg_1348 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_8_fu_879_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_8_reg_1359 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal s_addr_6_reg_1364 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln415_fu_874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln418_fu_890_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln418_reg_1369 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln421_fu_895_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln421_reg_1374 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln423_fu_924_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln423_reg_1382 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal s_addr_5_reg_1387 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln423_fu_919_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln428_fu_978_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln428_reg_1392 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal trunc_ln428_fu_984_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln428_reg_1397 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln429_fu_988_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln429_reg_1402 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln429_fu_993_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln429_reg_1407 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln431_fu_997_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln431_reg_1413 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_addr_28_reg_1417 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_addr_29_reg_1422 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_addr_30_gep_fu_274_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_addr_30_reg_1427 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal t_addr_31_gep_fu_282_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_addr_31_reg_1432 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_addr_32_gep_fu_290_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_addr_32_reg_1437 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal t_addr_33_gep_fu_298_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_addr_33_reg_1442 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_addr_34_gep_fu_306_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_addr_34_reg_1447 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal t_addr_35_gep_fu_314_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_addr_35_reg_1452 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_9_fu_1012_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal s_addr_7_reg_1465 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal trunc_ln441_fu_1058_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln441_reg_1470 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_ce0 : STD_LOGIC;
    signal t_we0 : STD_LOGIC;
    signal t_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_ce1 : STD_LOGIC;
    signal t_we1 : STD_LOGIC;
    signal t_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_504_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_504_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_504_state_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_504_state_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_504_state_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_504_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_504_state_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_504_state_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_504_state_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_504_state_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_ln391_reg_336 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_05_rec_reg_347 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_reg_358 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln408_reg_367 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal p_12_reg_379 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_1_reg_389 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_phi_ln408_1_phi_fu_404_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln408_1_reg_400 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_p_23_phi_fu_417_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_23_reg_414 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln409_fu_772_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_p_2_phi_fu_432_p6 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_2_reg_429 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvars_iv_reg_440 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal p_38_rec_reg_450 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_reg_462 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_3_reg_473 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i_5_reg_484 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln436_fu_1007_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln441_fu_1088_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_p_34_phi_fu_498_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_34_reg_495 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_KeccakF1600_StatePer_1_fu_504_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln391_fu_550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln396_fu_673_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln400_fu_704_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln416_1_fu_885_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln425_1_fu_939_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln436_fu_1018_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln440_fu_1053_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln396_fu_660_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln438_fu_1037_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln400_fu_728_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln416_fu_912_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln425_fu_956_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln440_fu_1081_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln393_fu_561_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln395_fu_578_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln395_fu_582_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_65_fu_588_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_66_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln395_1_fu_592_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal umax_fu_604_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln397_fu_630_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln397_fu_626_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_67_fu_645_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln394_fu_678_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln400_fu_682_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln400_fu_686_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_7_i_fu_708_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln403_1_fu_735_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln403_2_fu_743_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln403_fu_753_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln416_fu_808_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln32_1_fu_812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_939_fu_829_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln32_fu_857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_7_i6_fu_900_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln423_fu_930_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln425_1_fu_934_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_7_i7_fu_944_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln_fu_963_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln427_fu_974_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln427_2_fu_970_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln436_2_fu_1003_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln438_fu_1023_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln438_fu_1027_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln438_1_fu_1032_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_940_fu_1044_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_7_i5_fu_1061_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);

    component KeccakF1600_StatePer_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keccak_absorb_2_t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    t_U : component keccak_absorb_2_t
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t_address0,
        ce0 => t_ce0,
        we0 => t_we0,
        d0 => t_d0,
        q0 => t_q0,
        address1 => t_address1,
        ce1 => t_ce1,
        we1 => t_we1,
        d1 => t_d1,
        q1 => t_q1);

    grp_KeccakF1600_StatePer_1_fu_504 : component KeccakF1600_StatePer_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePer_1_fu_504_ap_start,
        ap_done => grp_KeccakF1600_StatePer_1_fu_504_ap_done,
        ap_idle => grp_KeccakF1600_StatePer_1_fu_504_ap_idle,
        ap_ready => grp_KeccakF1600_StatePer_1_fu_504_ap_ready,
        state_address0 => grp_KeccakF1600_StatePer_1_fu_504_state_address0,
        state_ce0 => grp_KeccakF1600_StatePer_1_fu_504_state_ce0,
        state_we0 => grp_KeccakF1600_StatePer_1_fu_504_state_we0,
        state_d0 => grp_KeccakF1600_StatePer_1_fu_504_state_d0,
        state_q0 => s_q0,
        state_address1 => grp_KeccakF1600_StatePer_1_fu_504_state_address1,
        state_ce1 => grp_KeccakF1600_StatePer_1_fu_504_state_ce1,
        state_we1 => grp_KeccakF1600_StatePer_1_fu_504_state_we1,
        state_d1 => grp_KeccakF1600_StatePer_1_fu_504_state_d1,
        state_q1 => s_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_return_preg <= ap_phi_mux_p_34_phi_fu_498_p4;
                end if; 
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_1_fu_504_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_1_fu_504_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln415_fu_874_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln403_1_fu_758_p2 = ap_const_lv1_0) and (icmp_ln403_fu_747_p2 = ap_const_lv1_0)))) then 
                    grp_KeccakF1600_StatePer_1_fu_504_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_1_fu_504_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_1_fu_504_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_358_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_649_p2 = ap_const_lv1_0))) then 
                i_0_reg_358 <= i_fu_667_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln393_fu_572_p2 = ap_const_lv1_0) and (icmp_ln391_fu_555_p2 = ap_const_lv1_1))) then 
                i_0_reg_358 <= zext_ln393_fu_564_p1;
            end if; 
        end if;
    end process;

    i_2_reg_462_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln414_fu_803_p2 = ap_const_lv1_0))) then 
                i_2_reg_462 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_2_reg_462 <= i_8_reg_1359;
            end if; 
        end if;
    end process;

    i_3_reg_473_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_3_reg_473 <= add_ln423_reg_1382;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln414_fu_803_p2 = ap_const_lv1_1))) then 
                i_3_reg_473 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_5_reg_484_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                i_5_reg_484 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln436_fu_1007_p2 = ap_const_lv1_1))) then 
                i_5_reg_484 <= i_9_fu_1012_p2;
            end if; 
        end if;
    end process;

    indvars_iv_reg_440_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                indvars_iv_reg_440 <= sext_ln408_fu_781_p1;
            elsif (((grp_KeccakF1600_StatePer_1_fu_504_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                indvars_iv_reg_440 <= sub_ln421_reg_1374;
            end if; 
        end if;
    end process;

    p_05_rec_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_649_p2 = ap_const_lv1_0))) then 
                p_05_rec_reg_347 <= add_ln396_fu_654_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln393_fu_572_p2 = ap_const_lv1_0) and (icmp_ln391_fu_555_p2 = ap_const_lv1_1))) then 
                p_05_rec_reg_347 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    p_12_reg_379_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln393_fu_572_p2 = ap_const_lv1_1) and (icmp_ln391_fu_555_p2 = ap_const_lv1_1))) then 
                p_12_reg_379 <= empty_reg_1124;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                p_12_reg_379 <= add_ln398_reg_1176;
            end if; 
        end if;
    end process;

    p_1_reg_389_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln393_fu_572_p2 = ap_const_lv1_1) and (icmp_ln391_fu_555_p2 = ap_const_lv1_1))) then 
                p_1_reg_389 <= ap_const_lv2_2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                p_1_reg_389 <= add_ln397_reg_1171;
            end if; 
        end if;
    end process;

    p_23_reg_414_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln403_fu_747_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln403_fu_747_p2 = ap_const_lv1_0) and (icmp_ln403_1_fu_758_p2 = ap_const_lv1_1)))) then 
                p_23_reg_414 <= p_12_reg_379;
            elsif (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln403_1_reg_1261 = ap_const_lv1_0) and (icmp_ln403_reg_1257 = ap_const_lv1_0))) then 
                p_23_reg_414 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    p_2_reg_429_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln403_fu_747_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln403_fu_747_p2 = ap_const_lv1_0) and (icmp_ln403_1_fu_758_p2 = ap_const_lv1_1)))) then 
                p_2_reg_429 <= zext_ln403_fu_739_p1;
            elsif (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln403_1_reg_1261 = ap_const_lv1_0) and (icmp_ln403_reg_1257 = ap_const_lv1_0))) then 
                p_2_reg_429 <= sub_ln409_fu_772_p2;
            end if; 
        end if;
    end process;

    p_34_reg_495_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln431_fu_997_p2 = ap_const_lv1_1))) then 
                p_34_reg_495 <= zext_ln429_fu_993_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln431_reg_1413 = ap_const_lv1_0))) then 
                p_34_reg_495 <= add_ln441_fu_1088_p2;
            end if; 
        end if;
    end process;

    p_38_rec_reg_450_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                p_38_rec_reg_450 <= ap_const_lv64_0;
            elsif (((grp_KeccakF1600_StatePer_1_fu_504_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                p_38_rec_reg_450 <= add_ln418_reg_1369;
            end if; 
        end if;
    end process;

    phi_ln391_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln391_fu_555_p2 = ap_const_lv1_0))) then 
                phi_ln391_reg_336 <= add_ln391_fu_544_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln391_reg_336 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    phi_ln408_1_reg_400_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln403_fu_747_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln403_fu_747_p2 = ap_const_lv1_0) and (icmp_ln403_1_fu_758_p2 = ap_const_lv1_1)))) then 
                phi_ln408_1_reg_400 <= ap_const_lv1_0;
            elsif (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln403_1_reg_1261 = ap_const_lv1_0) and (icmp_ln403_reg_1257 = ap_const_lv1_0))) then 
                phi_ln408_1_reg_400 <= trunc_ln412_reg_1270;
            end if; 
        end if;
    end process;

    phi_ln408_reg_367_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln393_fu_572_p2 = ap_const_lv1_1) and (icmp_ln391_fu_555_p2 = ap_const_lv1_1))) then 
                phi_ln408_reg_367 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                phi_ln408_reg_367 <= trunc_ln401_reg_1210;
            end if; 
        end if;
    end process;

    reg_510_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                reg_510 <= t_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                reg_510 <= t_q0;
            end if; 
        end if;
    end process;

    reg_515_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                reg_515 <= t_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                reg_515 <= t_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln393_fu_572_p2 = ap_const_lv1_0) and (icmp_ln391_fu_555_p2 = ap_const_lv1_1))) then
                add_ln397_reg_1171 <= add_ln397_fu_634_p2;
                add_ln398_reg_1176 <= add_ln398_fu_640_p2;
                p_cast6_reg_1166 <= p_cast6_fu_622_p1;
                sext_ln395_reg_1161 <= sext_ln395_fu_618_p1;
                xor_ln395_2_reg_1156 <= xor_ln395_2_fu_612_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln415_fu_874_p2 = ap_const_lv1_1))) then
                add_ln418_reg_1369 <= add_ln418_fu_890_p2;
                sub_ln421_reg_1374 <= sub_ln421_fu_895_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln423_reg_1382 <= add_ln423_fu_924_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_ln429_reg_1402 <= add_ln429_fu_988_p2;
                icmp_ln431_reg_1413 <= icmp_ln431_fu_997_p2;
                sub_ln428_reg_1392 <= sub_ln428_fu_978_p2;
                trunc_ln428_reg_1397 <= trunc_ln428_fu_984_p1;
                    zext_ln429_reg_1407(8 downto 0) <= zext_ln429_fu_993_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_62_reg_1130 <= empty_62_fu_540_p1;
                empty_reg_1124 <= empty_fu_536_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    empty_68_reg_1285(8 downto 0) <= empty_68_fu_785_p1(8 downto 0);
                tmp_s_reg_1292 <= r(7 downto 3);
                xor_ln416_1_reg_1297 <= xor_ln416_1_fu_797_p2;
                    zext_ln408_reg_1275(5 downto 0) <= zext_ln408_fu_777_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_8_reg_1359 <= i_8_fu_879_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln403_fu_747_p2 = ap_const_lv1_0))) then
                icmp_ln403_1_reg_1261 <= icmp_ln403_1_fu_758_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                icmp_ln403_reg_1257 <= icmp_ln403_fu_747_p2;
                    zext_ln403_reg_1250(1 downto 0) <= zext_ln403_fu_739_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_520 <= t_q1;
                reg_524 <= t_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_528 <= t_q1;
                reg_532 <= t_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln423_fu_919_p2 = ap_const_lv1_0))) then
                s_addr_5_reg_1387 <= zext_ln425_1_fu_939_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln415_fu_874_p2 = ap_const_lv1_0))) then
                s_addr_6_reg_1364 <= zext_ln416_1_fu_885_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                s_addr_7_reg_1465 <= zext_ln440_fu_1053_p1(5 - 1 downto 0);
                trunc_ln441_reg_1470 <= trunc_ln441_fu_1058_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    s_addr_reg_1245(2 downto 0) <= zext_ln400_fu_704_p1(5 - 1 downto 0)(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln414_fu_803_p2 = ap_const_lv1_1))) then
                select_ln32_1_reg_1348 <= select_ln32_1_fu_868_p3;
                select_ln32_reg_1340 <= select_ln32_fu_862_p3;
                tmp_6740_reg_1329 <= indvars_iv_reg_440(7 downto 3);
                trunc_ln425_reg_1335 <= trunc_ln425_fu_853_p1;
                    zext_ln423_2_reg_1324(2 downto 0) <= zext_ln423_2_fu_839_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln414_fu_803_p2 = ap_const_lv1_0))) then
                select_ln32_2_reg_1308 <= select_ln32_2_fu_817_p3;
                select_ln32_3_reg_1316 <= select_ln32_3_fu_823_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_649_p2 = ap_const_lv1_1))) then
                tmp_reg_1205 <= sub_ln400_fu_686_p2(5 downto 3);
                trunc_ln401_reg_1210 <= trunc_ln401_fu_701_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln403_1_fu_758_p2 = ap_const_lv1_0) and (icmp_ln403_fu_747_p2 = ap_const_lv1_0))) then
                trunc_ln409_reg_1265 <= trunc_ln409_fu_764_p1;
                trunc_ln412_reg_1270 <= trunc_ln412_fu_768_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln391_fu_555_p2 = ap_const_lv1_1))) then
                    zext_ln393_1_reg_1148(2 downto 0) <= zext_ln393_1_fu_568_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln393_1_reg_1148(4 downto 3) <= "00";
    s_addr_reg_1245(4 downto 3) <= "00";
    zext_ln403_reg_1250(2) <= '0';
    zext_ln408_reg_1275(8 downto 6) <= "000";
    empty_68_reg_1285(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln423_2_reg_1324(29 downto 3) <= "000000000000000000000000000";
    zext_ln429_reg_1407(31 downto 9) <= "00000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln391_fu_555_p2, icmp_ln393_fu_572_p2, ap_CS_fsm_state3, exitcond_fu_649_p2, ap_CS_fsm_state9, grp_KeccakF1600_StatePer_1_fu_504_ap_done, ap_block_state9_on_subcall_done, icmp_ln414_fu_803_p2, ap_CS_fsm_state10, ap_CS_fsm_state11, icmp_ln415_fu_874_p2, ap_CS_fsm_state14, icmp_ln423_fu_919_p2, ap_CS_fsm_state16, icmp_ln431_fu_997_p2, ap_CS_fsm_state20, ap_CS_fsm_state13, icmp_ln436_fu_1007_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln393_fu_572_p2 = ap_const_lv1_0) and (icmp_ln391_fu_555_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln393_fu_572_p2 = ap_const_lv1_1) and (icmp_ln391_fu_555_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_649_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln414_fu_803_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln415_fu_874_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state13 => 
                if (((grp_KeccakF1600_StatePer_1_fu_504_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln423_fu_919_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln431_fu_997_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln436_fu_1007_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln391_fu_544_p2 <= std_logic_vector(unsigned(phi_ln391_reg_336) + unsigned(ap_const_lv3_1));
    add_ln394_fu_678_p2 <= std_logic_vector(unsigned(zext_ln393_1_reg_1148) + unsigned(p_cast6_reg_1166));
    add_ln396_fu_654_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(p_05_rec_reg_347));
    add_ln397_fu_634_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(trunc_ln397_fu_630_p1));
    add_ln398_fu_640_p2 <= std_logic_vector(signed(sext_ln397_fu_626_p1) + signed(empty_reg_1124));
    add_ln418_fu_890_p2 <= std_logic_vector(unsigned(empty_68_reg_1285) + unsigned(p_38_rec_reg_450));
    add_ln423_fu_924_p2 <= std_logic_vector(unsigned(i_3_reg_473) + unsigned(ap_const_lv5_1));
    add_ln425_1_fu_934_p2 <= std_logic_vector(unsigned(zext_ln423_2_reg_1324) + unsigned(zext_ln423_fu_930_p1));
    add_ln429_fu_988_p2 <= std_logic_vector(unsigned(zext_ln408_reg_1275) + unsigned(zext_ln427_2_fu_970_p1));
    add_ln441_fu_1088_p2 <= std_logic_vector(unsigned(zext_ln429_reg_1407) + unsigned(trunc_ln441_reg_1470));
    and_ln_fu_963_p3 <= (tmp_6740_reg_1329 & ap_const_lv3_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state9_on_subcall_done_assign_proc : process(grp_KeccakF1600_StatePer_1_fu_504_ap_done, ap_predicate_op126_call_state9)
    begin
                ap_block_state9_on_subcall_done <= ((ap_predicate_op126_call_state9 = ap_const_boolean_1) and (grp_KeccakF1600_StatePer_1_fu_504_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_23_phi_fu_417_p6_assign_proc : process(icmp_ln403_reg_1257, icmp_ln403_1_reg_1261, ap_CS_fsm_state9, p_23_reg_414)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln403_1_reg_1261 = ap_const_lv1_0) and (icmp_ln403_reg_1257 = ap_const_lv1_0))) then 
            ap_phi_mux_p_23_phi_fu_417_p6 <= ap_const_lv6_0;
        else 
            ap_phi_mux_p_23_phi_fu_417_p6 <= p_23_reg_414;
        end if; 
    end process;


    ap_phi_mux_p_2_phi_fu_432_p6_assign_proc : process(icmp_ln403_reg_1257, icmp_ln403_1_reg_1261, ap_CS_fsm_state9, sub_ln409_fu_772_p2, p_2_reg_429)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln403_1_reg_1261 = ap_const_lv1_0) and (icmp_ln403_reg_1257 = ap_const_lv1_0))) then 
            ap_phi_mux_p_2_phi_fu_432_p6 <= sub_ln409_fu_772_p2;
        else 
            ap_phi_mux_p_2_phi_fu_432_p6 <= p_2_reg_429;
        end if; 
    end process;


    ap_phi_mux_p_34_phi_fu_498_p4_assign_proc : process(icmp_ln431_reg_1413, add_ln441_fu_1088_p2, p_34_reg_495, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln431_reg_1413 = ap_const_lv1_0))) then 
            ap_phi_mux_p_34_phi_fu_498_p4 <= add_ln441_fu_1088_p2;
        else 
            ap_phi_mux_p_34_phi_fu_498_p4 <= p_34_reg_495;
        end if; 
    end process;


    ap_phi_mux_phi_ln408_1_phi_fu_404_p6_assign_proc : process(icmp_ln403_reg_1257, icmp_ln403_1_reg_1261, trunc_ln412_reg_1270, ap_CS_fsm_state9, phi_ln408_1_reg_400)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln403_1_reg_1261 = ap_const_lv1_0) and (icmp_ln403_reg_1257 = ap_const_lv1_0))) then 
            ap_phi_mux_phi_ln408_1_phi_fu_404_p6 <= trunc_ln412_reg_1270;
        else 
            ap_phi_mux_phi_ln408_1_phi_fu_404_p6 <= phi_ln408_1_reg_400;
        end if; 
    end process;


    ap_predicate_op126_call_state9_assign_proc : process(icmp_ln403_reg_1257, icmp_ln403_1_reg_1261)
    begin
                ap_predicate_op126_call_state9 <= ((icmp_ln403_1_reg_1261 = ap_const_lv1_0) and (icmp_ln403_reg_1257 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_p_34_phi_fu_498_p4, ap_CS_fsm_state25, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            ap_return <= ap_phi_mux_p_34_phi_fu_498_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    empty_62_fu_540_p1 <= r(8 - 1 downto 0);
    empty_65_fu_588_p1 <= sub_ln395_fu_582_p2(3 - 1 downto 0);
    empty_66_fu_598_p2 <= "1" when (unsigned(sub_ln395_fu_582_p2) > unsigned(ap_const_lv4_2)) else "0";
    empty_67_fu_645_p1 <= p_05_rec_reg_347(1 - 1 downto 0);
    empty_68_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r),64));
    empty_fu_536_p1 <= pos_r(6 - 1 downto 0);
    exitcond_fu_649_p2 <= "1" when (p_05_rec_reg_347 = sext_ln395_reg_1161) else "0";
    grp_KeccakF1600_StatePer_1_fu_504_ap_start <= grp_KeccakF1600_StatePer_1_fu_504_ap_start_reg;
    i_8_fu_879_p2 <= std_logic_vector(unsigned(i_2_reg_462) + unsigned(ap_const_lv5_1));
    i_9_fu_1012_p2 <= std_logic_vector(unsigned(i_5_reg_484) + unsigned(ap_const_lv32_1));
    i_fu_667_p2 <= std_logic_vector(unsigned(i_0_reg_358) + unsigned(ap_const_lv32_1));
    icmp_ln391_fu_555_p2 <= "1" when (phi_ln391_reg_336 = ap_const_lv3_7) else "0";
    icmp_ln393_fu_572_p2 <= "1" when (trunc_ln393_fu_561_p1 = ap_const_lv3_0) else "0";
    icmp_ln403_1_fu_758_p2 <= "1" when (unsigned(zext_ln403_2_fu_743_p1) < unsigned(sub_ln403_fu_753_p2)) else "0";
    icmp_ln403_fu_747_p2 <= "1" when (p_12_reg_379 = ap_const_lv6_0) else "0";
    icmp_ln414_fu_803_p2 <= "1" when (unsigned(indvars_iv_reg_440) < unsigned(empty_68_reg_1285)) else "0";
    icmp_ln415_fu_874_p2 <= "1" when (i_2_reg_462 = tmp_s_reg_1292) else "0";
    icmp_ln423_fu_919_p2 <= "1" when (i_3_reg_473 = tmp_6740_reg_1329) else "0";
    icmp_ln431_fu_997_p2 <= "1" when (indvars_iv_reg_440 = zext_ln427_fu_974_p1) else "0";
    icmp_ln436_fu_1007_p2 <= "1" when (unsigned(zext_ln436_2_fu_1003_p1) < unsigned(trunc_ln428_reg_1397)) else "0";
        p_cast6_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln395_2_fu_612_p2),5));

    r_7_i5_fu_1061_p9 <= (((((((t_q0 & t_q1) & reg_532) & reg_528) & reg_524) & reg_520) & reg_515) & reg_510);
    r_7_i6_fu_900_p9 <= (((((((select_ln32_3_reg_1316 & select_ln32_2_reg_1308) & select_ln32_3_reg_1316) & select_ln32_2_reg_1308) & select_ln32_3_reg_1316) & select_ln32_2_reg_1308) & select_ln32_3_reg_1316) & select_ln32_2_reg_1308);
    r_7_i7_fu_944_p9 <= (((((((select_ln32_1_reg_1348 & select_ln32_reg_1340) & select_ln32_1_reg_1348) & select_ln32_reg_1340) & select_ln32_1_reg_1348) & select_ln32_reg_1340) & select_ln32_1_reg_1348) & select_ln32_reg_1340);
    r_7_i_fu_708_p9 <= (((((((t_q0 & t_q1) & reg_532) & reg_528) & reg_524) & reg_520) & reg_515) & reg_510);

    s_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state24, s_addr_reg_1245, ap_CS_fsm_state9, ap_predicate_op126_call_state9, ap_CS_fsm_state11, s_addr_6_reg_1364, icmp_ln415_fu_874_p2, ap_CS_fsm_state14, s_addr_5_reg_1387, s_addr_7_reg_1465, grp_KeccakF1600_StatePer_1_fu_504_state_address0, ap_CS_fsm_state7, ap_CS_fsm_state13, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state25, zext_ln400_fu_704_p1, zext_ln416_1_fu_885_p1, zext_ln425_1_fu_939_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            s_address0 <= s_addr_7_reg_1465;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            s_address0 <= s_addr_5_reg_1387;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            s_address0 <= zext_ln425_1_fu_939_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            s_address0 <= s_addr_6_reg_1364;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln415_fu_874_p2 = ap_const_lv1_0))) then 
            s_address0 <= zext_ln416_1_fu_885_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_address0 <= s_addr_reg_1245;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            s_address0 <= zext_ln400_fu_704_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_predicate_op126_call_state9 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            s_address0 <= grp_KeccakF1600_StatePer_1_fu_504_state_address0;
        else 
            s_address0 <= "XXXXX";
        end if; 
    end process;

    s_address1 <= grp_KeccakF1600_StatePer_1_fu_504_state_address1;

    s_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state24, ap_CS_fsm_state9, ap_predicate_op126_call_state9, ap_CS_fsm_state11, icmp_ln415_fu_874_p2, ap_CS_fsm_state14, grp_KeccakF1600_StatePer_1_fu_504_state_ce0, ap_CS_fsm_state7, ap_CS_fsm_state13, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln415_fu_874_p2 = ap_const_lv1_0)))) then 
            s_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_predicate_op126_call_state9 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            s_ce0 <= grp_KeccakF1600_StatePer_1_fu_504_state_ce0;
        else 
            s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_ce1_assign_proc : process(ap_CS_fsm_state9, ap_predicate_op126_call_state9, grp_KeccakF1600_StatePer_1_fu_504_state_ce1, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_predicate_op126_call_state9 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            s_ce1 <= grp_KeccakF1600_StatePer_1_fu_504_state_ce1;
        else 
            s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_d0_assign_proc : process(ap_CS_fsm_state9, ap_predicate_op126_call_state9, grp_KeccakF1600_StatePer_1_fu_504_state_d0, ap_CS_fsm_state7, ap_CS_fsm_state13, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state25, xor_ln400_fu_728_p2, xor_ln416_fu_912_p2, xor_ln425_fu_956_p2, xor_ln440_fu_1081_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            s_d0 <= xor_ln440_fu_1081_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            s_d0 <= xor_ln425_fu_956_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            s_d0 <= xor_ln416_fu_912_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_d0 <= xor_ln400_fu_728_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_predicate_op126_call_state9 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            s_d0 <= grp_KeccakF1600_StatePer_1_fu_504_state_d0;
        else 
            s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    s_d1 <= grp_KeccakF1600_StatePer_1_fu_504_state_d1;

    s_we0_assign_proc : process(ap_CS_fsm_state9, ap_predicate_op126_call_state9, icmp_ln431_reg_1413, grp_KeccakF1600_StatePer_1_fu_504_state_we0, ap_CS_fsm_state7, ap_CS_fsm_state13, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln431_reg_1413 = ap_const_lv1_0)))) then 
            s_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_predicate_op126_call_state9 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            s_we0 <= grp_KeccakF1600_StatePer_1_fu_504_state_we0;
        else 
            s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s_we1_assign_proc : process(ap_CS_fsm_state9, ap_predicate_op126_call_state9, grp_KeccakF1600_StatePer_1_fu_504_state_we1, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_predicate_op126_call_state9 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            s_we1 <= grp_KeccakF1600_StatePer_1_fu_504_state_we1;
        else 
            s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln32_1_fu_868_p3 <= 
        m_0_read when (xor_ln32_fu_857_p2(0) = '1') else 
        m_1_read;
    select_ln32_2_fu_817_p3 <= 
        m_1_read when (xor_ln32_1_fu_812_p2(0) = '1') else 
        m_0_read;
    select_ln32_3_fu_823_p3 <= 
        m_0_read when (xor_ln32_1_fu_812_p2(0) = '1') else 
        m_1_read;
    select_ln32_fu_862_p3 <= 
        m_1_read when (xor_ln32_fu_857_p2(0) = '1') else 
        m_0_read;
    select_ln396_fu_660_p3 <= 
        m_1_read when (empty_67_fu_645_p1(0) = '1') else 
        m_0_read;
    select_ln438_fu_1037_p3 <= 
        m_1_read when (xor_ln438_1_fu_1032_p2(0) = '1') else 
        m_0_read;
        sext_ln395_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln395_2_fu_612_p2),64));

        sext_ln397_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln395_2_fu_612_p2),6));

        sext_ln400_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln394_fu_678_p2),6));

        sext_ln408_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_p_2_phi_fu_432_p6),64));

    sub_ln395_fu_582_p2 <= std_logic_vector(signed(ap_const_lv4_8) - signed(zext_ln395_fu_578_p1));
    sub_ln400_fu_686_p2 <= std_logic_vector(unsigned(add_ln398_reg_1176) - unsigned(sext_ln400_fu_682_p1));
    sub_ln403_fu_753_p2 <= std_logic_vector(unsigned(empty_62_reg_1130) - unsigned(zext_ln403_1_fu_735_p1));
    sub_ln409_fu_772_p2 <= std_logic_vector(unsigned(zext_ln403_reg_1250) - unsigned(trunc_ln409_reg_1265));
    sub_ln421_fu_895_p2 <= std_logic_vector(unsigned(indvars_iv_reg_440) - unsigned(empty_68_reg_1285));
    sub_ln428_fu_978_p2 <= std_logic_vector(unsigned(indvars_iv_reg_440) - unsigned(zext_ln427_fu_974_p1));
    t_addr_28_reg_1417 <= ap_const_lv64_0(3 - 1 downto 0);
    t_addr_29_reg_1422 <= ap_const_lv64_1(3 - 1 downto 0);
    t_addr_30_gep_fu_274_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    t_addr_30_reg_1427 <= ap_const_lv64_2(3 - 1 downto 0);
    t_addr_31_gep_fu_282_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    t_addr_31_reg_1432 <= ap_const_lv64_3(3 - 1 downto 0);
    t_addr_32_gep_fu_290_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    t_addr_32_reg_1437 <= ap_const_lv64_4(3 - 1 downto 0);
    t_addr_33_gep_fu_298_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    t_addr_33_reg_1442 <= ap_const_lv64_5(3 - 1 downto 0);
    t_addr_34_gep_fu_306_p3 <= ap_const_lv64_6(3 - 1 downto 0);
    t_addr_34_reg_1447 <= ap_const_lv64_6(3 - 1 downto 0);
    t_addr_35_gep_fu_314_p3 <= ap_const_lv64_7(3 - 1 downto 0);
    t_addr_35_reg_1452 <= ap_const_lv64_7(3 - 1 downto 0);

    t_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state22, ap_CS_fsm_state5, ap_CS_fsm_state23, ap_CS_fsm_state6, ap_CS_fsm_state24, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond_fu_649_p2, ap_CS_fsm_state16, t_addr_29_reg_1422, ap_CS_fsm_state17, t_addr_31_gep_fu_282_p3, t_addr_31_reg_1432, ap_CS_fsm_state18, t_addr_33_gep_fu_298_p3, t_addr_33_reg_1442, ap_CS_fsm_state19, t_addr_35_gep_fu_314_p3, t_addr_35_reg_1452, ap_CS_fsm_state21, zext_ln391_fu_550_p1, zext_ln396_fu_673_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            t_address0 <= t_addr_35_reg_1452;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            t_address0 <= t_addr_33_reg_1442;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            t_address0 <= t_addr_31_reg_1432;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            t_address0 <= t_addr_29_reg_1422;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            t_address0 <= t_addr_35_gep_fu_314_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            t_address0 <= t_addr_33_gep_fu_298_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            t_address0 <= t_addr_31_gep_fu_282_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            t_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            t_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            t_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_649_p2 = ap_const_lv1_1))) then 
            t_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_649_p2 = ap_const_lv1_0))) then 
            t_address0 <= zext_ln396_fu_673_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_address0 <= zext_ln391_fu_550_p1(3 - 1 downto 0);
        else 
            t_address0 <= "XXX";
        end if; 
    end process;


    t_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state22, ap_CS_fsm_state5, ap_CS_fsm_state23, ap_CS_fsm_state6, ap_CS_fsm_state24, ap_CS_fsm_state3, ap_CS_fsm_state16, t_addr_28_reg_1417, t_addr_30_gep_fu_274_p3, t_addr_30_reg_1427, ap_CS_fsm_state17, t_addr_32_gep_fu_290_p3, t_addr_32_reg_1437, ap_CS_fsm_state18, t_addr_34_gep_fu_306_p3, t_addr_34_reg_1447, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, zext_ln436_fu_1018_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            t_address1 <= t_addr_34_reg_1447;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            t_address1 <= t_addr_32_reg_1437;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            t_address1 <= t_addr_30_reg_1427;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            t_address1 <= t_addr_28_reg_1417;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            t_address1 <= zext_ln436_fu_1018_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            t_address1 <= t_addr_34_gep_fu_306_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            t_address1 <= t_addr_32_gep_fu_290_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            t_address1 <= t_addr_30_gep_fu_274_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            t_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            t_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            t_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            t_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            t_address1 <= "XXX";
        end if; 
    end process;


    t_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state22, ap_CS_fsm_state5, ap_CS_fsm_state23, ap_CS_fsm_state6, ap_CS_fsm_state24, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond_fu_649_p2, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_649_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_649_p2 = ap_const_lv1_0)))) then 
            t_ce0 <= ap_const_logic_1;
        else 
            t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state22, ap_CS_fsm_state5, ap_CS_fsm_state23, ap_CS_fsm_state6, ap_CS_fsm_state24, ap_CS_fsm_state3, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            t_ce1 <= ap_const_logic_1;
        else 
            t_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    t_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond_fu_649_p2, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, select_ln396_fu_660_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_649_p2 = ap_const_lv1_0))) then 
            t_d0 <= select_ln396_fu_660_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            t_d0 <= ap_const_lv8_0;
        else 
            t_d0 <= "XXXXXXXX";
        end if; 
    end process;


    t_d1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, select_ln438_fu_1037_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            t_d1 <= select_ln438_fu_1037_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            t_d1 <= ap_const_lv8_0;
        else 
            t_d1 <= "XXXXXXXX";
        end if; 
    end process;


    t_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond_fu_649_p2, ap_CS_fsm_state16, icmp_ln431_fu_997_p2, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln431_fu_997_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_649_p2 = ap_const_lv1_0)))) then 
            t_we0 <= ap_const_logic_1;
        else 
            t_we0 <= ap_const_logic_0;
        end if; 
    end process;


    t_we1_assign_proc : process(ap_CS_fsm_state16, icmp_ln431_fu_997_p2, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, icmp_ln436_fu_1007_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln436_fu_1007_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln431_fu_997_p2 = ap_const_lv1_0)))) then 
            t_we1 <= ap_const_logic_1;
        else 
            t_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_939_fu_829_p4 <= p_23_reg_414(5 downto 3);
    tmp_940_fu_1044_p4 <= add_ln429_reg_1402(8 downto 3);
    trunc_ln393_fu_561_p1 <= pos_r(3 - 1 downto 0);
    trunc_ln397_fu_630_p1 <= umax_fu_604_p3(2 - 1 downto 0);
    trunc_ln401_fu_701_p1 <= xor_ln395_2_reg_1156(1 - 1 downto 0);
    trunc_ln409_fu_764_p1 <= sub_ln403_fu_753_p2(3 - 1 downto 0);
    trunc_ln412_fu_768_p1 <= sub_ln403_fu_753_p2(1 - 1 downto 0);
    trunc_ln416_fu_808_p1 <= p_38_rec_reg_450(1 - 1 downto 0);
    trunc_ln425_fu_853_p1 <= p_38_rec_reg_450(1 - 1 downto 0);
    trunc_ln428_fu_984_p1 <= sub_ln428_fu_978_p2(33 - 1 downto 0);
    trunc_ln438_fu_1023_p1 <= i_5_reg_484(1 - 1 downto 0);
    trunc_ln441_fu_1058_p1 <= sub_ln428_reg_1392(32 - 1 downto 0);
    umax_fu_604_p3 <= 
        ap_const_lv3_5 when (empty_66_fu_598_p2(0) = '1') else 
        xor_ln395_1_fu_592_p2;
    xor_ln32_1_fu_812_p2 <= (xor_ln416_1_reg_1297 xor trunc_ln416_fu_808_p1);
    xor_ln32_fu_857_p2 <= (xor_ln416_1_reg_1297 xor trunc_ln425_fu_853_p1);
    xor_ln395_1_fu_592_p2 <= (empty_65_fu_588_p1 xor ap_const_lv3_7);
    xor_ln395_2_fu_612_p2 <= (umax_fu_604_p3 xor ap_const_lv3_7);
    xor_ln400_fu_728_p2 <= (s_q0 xor r_7_i_fu_708_p9);
    xor_ln416_1_fu_797_p2 <= (phi_ln408_reg_367 xor ap_phi_mux_phi_ln408_1_phi_fu_404_p6);
    xor_ln416_fu_912_p2 <= (s_q0 xor r_7_i6_fu_900_p9);
    xor_ln425_fu_956_p2 <= (s_q0 xor r_7_i7_fu_944_p9);
    xor_ln438_1_fu_1032_p2 <= (xor_ln438_fu_1027_p2 xor xor_ln416_1_reg_1297);
    xor_ln438_fu_1027_p2 <= (trunc_ln438_fu_1023_p1 xor trunc_ln425_reg_1335);
    xor_ln440_fu_1081_p2 <= (s_q0 xor r_7_i5_fu_1061_p9);
    zext_ln391_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln391_reg_336),64));
    zext_ln393_1_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln393_fu_561_p1),5));
    zext_ln393_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln393_fu_561_p1),32));
    zext_ln395_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln393_fu_561_p1),4));
    zext_ln396_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_358),64));
    zext_ln400_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_1205),64));
    zext_ln403_1_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_12_reg_379),8));
    zext_ln403_2_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_1_reg_389),8));
    zext_ln403_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_1_reg_389),3));
    zext_ln408_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_23_phi_fu_417_p6),9));
    zext_ln416_1_fu_885_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_462),64));
    zext_ln423_2_fu_839_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_939_fu_829_p4),30));
    zext_ln423_fu_930_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_473),30));
    zext_ln425_1_fu_939_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln425_1_fu_934_p2),64));
    zext_ln427_2_fu_970_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_963_p3),9));
    zext_ln427_fu_974_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_963_p3),64));
    zext_ln429_fu_993_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln429_fu_988_p2),32));
    zext_ln436_2_fu_1003_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_484),33));
    zext_ln436_fu_1018_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_484),64));
    zext_ln440_fu_1053_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_940_fu_1044_p4),64));
end behav;
