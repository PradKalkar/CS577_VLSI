-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity keccak_absorb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce0 : OUT STD_LOGIC;
    s_we0 : OUT STD_LOGIC;
    s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce1 : OUT STD_LOGIC;
    s_we1 : OUT STD_LOGIC;
    s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    r : IN STD_LOGIC_VECTOR (8 downto 0);
    pos_r : IN STD_LOGIC_VECTOR (6 downto 0);
    m_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    m_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of keccak_absorb is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_2_reg_468 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_516 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal t_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal reg_521 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_526 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal reg_530 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_534 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal reg_538 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_542_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_reg_1130 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_101_fu_546_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_101_reg_1136 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln389_fu_550_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln391_fu_570_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln389_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln391_1_fu_574_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln391_1_reg_1154 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln393_2_fu_618_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln393_2_reg_1162 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln391_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln393_fu_624_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln393_reg_1167 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast6_fu_628_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_cast6_reg_1172 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln395_fu_640_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln395_reg_1177 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln396_fu_646_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln396_reg_1182 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln394_fu_660_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_fu_673_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1211 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln399_fu_707_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln399_reg_1216 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_addr_reg_1251 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln401_fu_745_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln401_reg_1256 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln401_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln401_reg_1263 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln401_1_fu_764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln401_1_reg_1267 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln407_fu_770_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln407_reg_1271 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln410_fu_774_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln410_reg_1276 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln406_fu_783_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln406_reg_1281 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_KeccakF1600_StatePer_1_fu_510_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_510_ap_done : STD_LOGIC;
    signal ap_predicate_op127_call_state9 : BOOLEAN;
    signal ap_block_state9_on_subcall_done : BOOLEAN;
    signal sext_ln406_fu_787_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_107_fu_791_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_107_reg_1291 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_1298 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln415_1_fu_803_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln415_1_reg_1303 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln412_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal select_ln32_2_fu_823_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln32_2_reg_1314 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln32_3_fu_829_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln32_3_reg_1322 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln422_2_fu_845_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln422_2_reg_1330 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_3266_reg_1335 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln424_fu_859_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln424_reg_1341 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_fu_868_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln32_reg_1346 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln32_1_fu_874_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln32_1_reg_1354 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln413_fu_880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln413_reg_1362 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state11_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_33_fu_885_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal s_addr_6_reg_1371 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln417_fu_915_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln417_reg_1377 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal sub_ln420_fu_920_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln420_reg_1382 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln422_fu_930_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln422_reg_1390 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal s_addr_5_reg_1395 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln422_fu_925_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln427_fu_984_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln427_reg_1400 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal trunc_ln427_fu_990_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln427_reg_1405 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln428_fu_994_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln428_reg_1410 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln428_fu_999_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln428_reg_1415 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln430_fu_1003_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln430_reg_1421 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_addr_28_reg_1425 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_addr_29_reg_1430 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_addr_30_gep_fu_280_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_addr_30_reg_1435 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal t_addr_31_gep_fu_288_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_addr_31_reg_1440 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_addr_32_gep_fu_296_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_addr_32_reg_1445 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal t_addr_33_gep_fu_304_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_addr_33_reg_1450 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_addr_34_gep_fu_312_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_addr_34_reg_1455 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal t_addr_35_gep_fu_320_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_addr_35_reg_1460 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_34_fu_1018_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal s_addr_7_reg_1473 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal trunc_ln440_fu_1064_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln440_reg_1479 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state11 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_ce0 : STD_LOGIC;
    signal t_we0 : STD_LOGIC;
    signal t_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_ce1 : STD_LOGIC;
    signal t_we1 : STD_LOGIC;
    signal t_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_510_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_510_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_510_state_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_510_state_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_510_state_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_510_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_510_state_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_510_state_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_510_state_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_510_state_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_ln389_reg_342 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_05_rec_reg_353 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_reg_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln406_reg_373 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal p_12_reg_385 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_1_reg_395 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_phi_ln406_1_phi_fu_410_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln406_1_reg_406 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_p_23_phi_fu_423_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_23_reg_420 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln407_fu_778_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_p_2_phi_fu_438_p6 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_2_reg_435 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvars_iv_reg_446 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal p_38_rec_reg_456 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_reg_479 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal i_5_reg_490 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln435_fu_1013_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln440_fu_1094_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_p_34_phi_fu_504_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_34_reg_501 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_KeccakF1600_StatePer_1_fu_510_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln389_fu_556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln394_fu_679_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln398_fu_710_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln415_1_fu_891_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln424_1_fu_945_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln435_fu_1024_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln439_fu_1059_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln394_fu_666_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln437_fu_1043_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln398_fu_734_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln415_fu_908_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln424_fu_962_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln439_fu_1087_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln391_fu_567_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln393_fu_584_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln393_fu_588_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_104_fu_594_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_105_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln393_1_fu_598_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal umax_fu_610_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln395_fu_636_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln395_fu_632_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_106_fu_651_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln392_fu_684_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln398_fu_688_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln398_fu_692_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_7_i_fu_714_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln401_1_fu_741_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln401_2_fu_749_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln401_fu_759_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln415_fu_814_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln32_1_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_496_fu_835_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln32_fu_863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_7_i6_fu_896_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln422_fu_936_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln424_1_fu_940_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_7_i7_fu_950_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln_fu_969_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln426_fu_980_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln426_2_fu_976_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln435_2_fu_1009_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln437_fu_1029_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln437_fu_1033_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln437_1_fu_1038_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_497_fu_1050_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_7_i5_fu_1067_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component KeccakF1600_StatePer_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keccak_absorb_2_t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    t_U : component keccak_absorb_2_t
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t_address0,
        ce0 => t_ce0,
        we0 => t_we0,
        d0 => t_d0,
        q0 => t_q0,
        address1 => t_address1,
        ce1 => t_ce1,
        we1 => t_we1,
        d1 => t_d1,
        q1 => t_q1);

    grp_KeccakF1600_StatePer_1_fu_510 : component KeccakF1600_StatePer_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePer_1_fu_510_ap_start,
        ap_done => grp_KeccakF1600_StatePer_1_fu_510_ap_done,
        ap_idle => grp_KeccakF1600_StatePer_1_fu_510_ap_idle,
        ap_ready => grp_KeccakF1600_StatePer_1_fu_510_ap_ready,
        state_address0 => grp_KeccakF1600_StatePer_1_fu_510_state_address0,
        state_ce0 => grp_KeccakF1600_StatePer_1_fu_510_state_ce0,
        state_we0 => grp_KeccakF1600_StatePer_1_fu_510_state_we0,
        state_d0 => grp_KeccakF1600_StatePer_1_fu_510_state_d0,
        state_q0 => s_q0,
        state_address1 => grp_KeccakF1600_StatePer_1_fu_510_state_address1,
        state_ce1 => grp_KeccakF1600_StatePer_1_fu_510_state_ce1,
        state_we1 => grp_KeccakF1600_StatePer_1_fu_510_state_we1,
        state_d1 => grp_KeccakF1600_StatePer_1_fu_510_state_d1,
        state_q1 => s_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln412_fu_809_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state11))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state11);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln412_fu_809_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    ap_return_preg <= ap_phi_mux_p_34_phi_fu_504_p4;
                end if; 
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_1_fu_510_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_1_fu_510_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln401_1_fu_764_p2 = ap_const_lv1_0) and (icmp_ln401_fu_753_p2 = ap_const_lv1_0)))) then 
                    grp_KeccakF1600_StatePer_1_fu_510_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_1_fu_510_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_1_fu_510_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_655_p2 = ap_const_lv1_0))) then 
                i_0_reg_364 <= i_fu_673_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln391_fu_578_p2 = ap_const_lv1_0) and (icmp_ln389_fu_561_p2 = ap_const_lv1_1))) then 
                i_0_reg_364 <= zext_ln391_fu_570_p1;
            end if; 
        end if;
    end process;

    i_2_reg_468_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln412_fu_809_p2 = ap_const_lv1_0))) then 
                i_2_reg_468 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln413_fu_880_p2 = ap_const_lv1_0))) then 
                i_2_reg_468 <= i_33_fu_885_p2;
            end if; 
        end if;
    end process;

    i_3_reg_479_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i_3_reg_479 <= add_ln422_reg_1390;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln412_fu_809_p2 = ap_const_lv1_1))) then 
                i_3_reg_479 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_5_reg_490_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i_5_reg_490 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln435_fu_1013_p2 = ap_const_lv1_1))) then 
                i_5_reg_490 <= i_34_fu_1018_p2;
            end if; 
        end if;
    end process;

    indvars_iv_reg_446_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                indvars_iv_reg_446 <= sext_ln406_fu_787_p1;
            elsif (((grp_KeccakF1600_StatePer_1_fu_510_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                indvars_iv_reg_446 <= sub_ln420_reg_1382;
            end if; 
        end if;
    end process;

    p_05_rec_reg_353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_655_p2 = ap_const_lv1_0))) then 
                p_05_rec_reg_353 <= add_ln394_fu_660_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln391_fu_578_p2 = ap_const_lv1_0) and (icmp_ln389_fu_561_p2 = ap_const_lv1_1))) then 
                p_05_rec_reg_353 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    p_12_reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln391_fu_578_p2 = ap_const_lv1_1) and (icmp_ln389_fu_561_p2 = ap_const_lv1_1))) then 
                p_12_reg_385 <= empty_reg_1130;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                p_12_reg_385 <= add_ln396_reg_1182;
            end if; 
        end if;
    end process;

    p_1_reg_395_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln391_fu_578_p2 = ap_const_lv1_1) and (icmp_ln389_fu_561_p2 = ap_const_lv1_1))) then 
                p_1_reg_395 <= ap_const_lv2_2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                p_1_reg_395 <= add_ln395_reg_1177;
            end if; 
        end if;
    end process;

    p_23_reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln401_fu_753_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln401_fu_753_p2 = ap_const_lv1_0) and (icmp_ln401_1_fu_764_p2 = ap_const_lv1_1)))) then 
                p_23_reg_420 <= p_12_reg_385;
            elsif (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln401_1_reg_1267 = ap_const_lv1_0) and (icmp_ln401_reg_1263 = ap_const_lv1_0))) then 
                p_23_reg_420 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    p_2_reg_435_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln401_fu_753_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln401_fu_753_p2 = ap_const_lv1_0) and (icmp_ln401_1_fu_764_p2 = ap_const_lv1_1)))) then 
                p_2_reg_435 <= zext_ln401_fu_745_p1;
            elsif (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln401_1_reg_1267 = ap_const_lv1_0) and (icmp_ln401_reg_1263 = ap_const_lv1_0))) then 
                p_2_reg_435 <= sub_ln407_fu_778_p2;
            end if; 
        end if;
    end process;

    p_34_reg_501_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln430_fu_1003_p2 = ap_const_lv1_1))) then 
                p_34_reg_501 <= zext_ln428_fu_999_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln430_reg_1421 = ap_const_lv1_0))) then 
                p_34_reg_501 <= add_ln440_fu_1094_p2;
            end if; 
        end if;
    end process;

    p_38_rec_reg_456_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                p_38_rec_reg_456 <= ap_const_lv64_0;
            elsif (((grp_KeccakF1600_StatePer_1_fu_510_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                p_38_rec_reg_456 <= add_ln417_reg_1377;
            end if; 
        end if;
    end process;

    phi_ln389_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln389_fu_561_p2 = ap_const_lv1_0))) then 
                phi_ln389_reg_342 <= add_ln389_fu_550_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln389_reg_342 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    phi_ln406_1_reg_406_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln401_fu_753_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln401_fu_753_p2 = ap_const_lv1_0) and (icmp_ln401_1_fu_764_p2 = ap_const_lv1_1)))) then 
                phi_ln406_1_reg_406 <= ap_const_lv1_0;
            elsif (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln401_1_reg_1267 = ap_const_lv1_0) and (icmp_ln401_reg_1263 = ap_const_lv1_0))) then 
                phi_ln406_1_reg_406 <= trunc_ln410_reg_1276;
            end if; 
        end if;
    end process;

    phi_ln406_reg_373_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln391_fu_578_p2 = ap_const_lv1_1) and (icmp_ln389_fu_561_p2 = ap_const_lv1_1))) then 
                phi_ln406_reg_373 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                phi_ln406_reg_373 <= trunc_ln399_reg_1216;
            end if; 
        end if;
    end process;

    reg_516_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                reg_516 <= t_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                reg_516 <= t_q0;
            end if; 
        end if;
    end process;

    reg_521_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                reg_521 <= t_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                reg_521 <= t_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln391_fu_578_p2 = ap_const_lv1_0) and (icmp_ln389_fu_561_p2 = ap_const_lv1_1))) then
                add_ln395_reg_1177 <= add_ln395_fu_640_p2;
                add_ln396_reg_1182 <= add_ln396_fu_646_p2;
                p_cast6_reg_1172 <= p_cast6_fu_628_p1;
                sext_ln393_reg_1167 <= sext_ln393_fu_624_p1;
                xor_ln393_2_reg_1162 <= xor_ln393_2_fu_618_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln417_reg_1377 <= add_ln417_fu_915_p2;
                sub_ln420_reg_1382 <= sub_ln420_fu_920_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                add_ln422_reg_1390 <= add_ln422_fu_930_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                add_ln428_reg_1410 <= add_ln428_fu_994_p2;
                icmp_ln430_reg_1421 <= icmp_ln430_fu_1003_p2;
                sub_ln427_reg_1400 <= sub_ln427_fu_984_p2;
                trunc_ln427_reg_1405 <= trunc_ln427_fu_990_p1;
                    zext_ln428_reg_1415(8 downto 0) <= zext_ln428_fu_999_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_101_reg_1136 <= empty_101_fu_546_p1;
                empty_reg_1130 <= empty_fu_542_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    empty_107_reg_1291(8 downto 0) <= empty_107_fu_791_p1(8 downto 0);
                tmp_s_reg_1298 <= r(7 downto 3);
                xor_ln415_1_reg_1303 <= xor_ln415_1_fu_803_p2;
                    zext_ln406_reg_1281(5 downto 0) <= zext_ln406_fu_783_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln401_fu_753_p2 = ap_const_lv1_0))) then
                icmp_ln401_1_reg_1267 <= icmp_ln401_1_fu_764_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                icmp_ln401_reg_1263 <= icmp_ln401_fu_753_p2;
                    zext_ln401_reg_1256(1 downto 0) <= zext_ln401_fu_745_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln413_reg_1362 <= icmp_ln413_fu_880_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_526 <= t_q1;
                reg_530 <= t_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state25))) then
                reg_534 <= t_q1;
                reg_538 <= t_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln422_fu_925_p2 = ap_const_lv1_0))) then
                s_addr_5_reg_1395 <= zext_ln424_1_fu_945_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln413_fu_880_p2 = ap_const_lv1_0))) then
                s_addr_6_reg_1371 <= zext_ln415_1_fu_891_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                s_addr_7_reg_1473 <= zext_ln439_fu_1059_p1(5 - 1 downto 0);
                trunc_ln440_reg_1479 <= trunc_ln440_fu_1064_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    s_addr_reg_1251(2 downto 0) <= zext_ln398_fu_710_p1(5 - 1 downto 0)(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln412_fu_809_p2 = ap_const_lv1_1))) then
                select_ln32_1_reg_1354 <= select_ln32_1_fu_874_p3;
                select_ln32_reg_1346 <= select_ln32_fu_868_p3;
                tmp_3266_reg_1335 <= indvars_iv_reg_446(7 downto 3);
                trunc_ln424_reg_1341 <= trunc_ln424_fu_859_p1;
                    zext_ln422_2_reg_1330(2 downto 0) <= zext_ln422_2_fu_845_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln412_fu_809_p2 = ap_const_lv1_0))) then
                select_ln32_2_reg_1314 <= select_ln32_2_fu_823_p3;
                select_ln32_3_reg_1322 <= select_ln32_3_fu_829_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_655_p2 = ap_const_lv1_1))) then
                tmp_reg_1211 <= sub_ln398_fu_692_p2(5 downto 3);
                trunc_ln399_reg_1216 <= trunc_ln399_fu_707_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln401_1_fu_764_p2 = ap_const_lv1_0) and (icmp_ln401_fu_753_p2 = ap_const_lv1_0))) then
                trunc_ln407_reg_1271 <= trunc_ln407_fu_770_p1;
                trunc_ln410_reg_1276 <= trunc_ln410_fu_774_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln389_fu_561_p2 = ap_const_lv1_1))) then
                    zext_ln391_1_reg_1154(2 downto 0) <= zext_ln391_1_fu_574_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln391_1_reg_1154(4 downto 3) <= "00";
    s_addr_reg_1251(4 downto 3) <= "00";
    zext_ln401_reg_1256(2) <= '0';
    zext_ln406_reg_1281(8 downto 6) <= "000";
    empty_107_reg_1291(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln422_2_reg_1330(29 downto 3) <= "000000000000000000000000000";
    zext_ln428_reg_1415(31 downto 9) <= "00000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln389_fu_561_p2, icmp_ln391_fu_578_p2, ap_CS_fsm_state3, exitcond_fu_655_p2, ap_CS_fsm_state9, grp_KeccakF1600_StatePer_1_fu_510_ap_done, ap_block_state9_on_subcall_done, icmp_ln412_fu_809_p2, ap_CS_fsm_state10, icmp_ln413_fu_880_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state15, icmp_ln422_fu_925_p2, ap_CS_fsm_state17, icmp_ln430_fu_1003_p2, ap_CS_fsm_state21, ap_block_pp0_stage0_subdone, ap_CS_fsm_state14, icmp_ln435_fu_1013_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln391_fu_578_p2 = ap_const_lv1_0) and (icmp_ln389_fu_561_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln391_fu_578_p2 = ap_const_lv1_1) and (icmp_ln389_fu_561_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_655_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln412_fu_809_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln413_fu_880_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln413_fu_880_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_KeccakF1600_StatePer_1_fu_510_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln422_fu_925_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln430_fu_1003_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln435_fu_1013_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln389_fu_550_p2 <= std_logic_vector(unsigned(phi_ln389_reg_342) + unsigned(ap_const_lv3_1));
    add_ln392_fu_684_p2 <= std_logic_vector(unsigned(zext_ln391_1_reg_1154) + unsigned(p_cast6_reg_1172));
    add_ln394_fu_660_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(p_05_rec_reg_353));
    add_ln395_fu_640_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(trunc_ln395_fu_636_p1));
    add_ln396_fu_646_p2 <= std_logic_vector(signed(sext_ln395_fu_632_p1) + signed(empty_reg_1130));
    add_ln417_fu_915_p2 <= std_logic_vector(unsigned(empty_107_reg_1291) + unsigned(p_38_rec_reg_456));
    add_ln422_fu_930_p2 <= std_logic_vector(unsigned(i_3_reg_479) + unsigned(ap_const_lv5_1));
    add_ln424_1_fu_940_p2 <= std_logic_vector(unsigned(zext_ln422_2_reg_1330) + unsigned(zext_ln422_fu_936_p1));
    add_ln428_fu_994_p2 <= std_logic_vector(unsigned(zext_ln406_reg_1281) + unsigned(zext_ln426_2_fu_976_p1));
    add_ln440_fu_1094_p2 <= std_logic_vector(unsigned(zext_ln428_reg_1415) + unsigned(trunc_ln440_reg_1479));
    and_ln_fu_969_p3 <= (tmp_3266_reg_1335 & ap_const_lv3_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(11);
    ap_CS_fsm_state14 <= ap_CS_fsm(12);
    ap_CS_fsm_state15 <= ap_CS_fsm(13);
    ap_CS_fsm_state16 <= ap_CS_fsm(14);
    ap_CS_fsm_state17 <= ap_CS_fsm(15);
    ap_CS_fsm_state18 <= ap_CS_fsm(16);
    ap_CS_fsm_state19 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(18);
    ap_CS_fsm_state21 <= ap_CS_fsm(19);
    ap_CS_fsm_state22 <= ap_CS_fsm(20);
    ap_CS_fsm_state23 <= ap_CS_fsm(21);
    ap_CS_fsm_state24 <= ap_CS_fsm(22);
    ap_CS_fsm_state25 <= ap_CS_fsm(23);
    ap_CS_fsm_state26 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_on_subcall_done_assign_proc : process(grp_KeccakF1600_StatePer_1_fu_510_ap_done, ap_predicate_op127_call_state9)
    begin
                ap_block_state9_on_subcall_done <= ((ap_predicate_op127_call_state9 = ap_const_boolean_1) and (grp_KeccakF1600_StatePer_1_fu_510_ap_done = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state11_assign_proc : process(icmp_ln413_fu_880_p2)
    begin
        if ((icmp_ln413_fu_880_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_23_phi_fu_423_p6_assign_proc : process(icmp_ln401_reg_1263, icmp_ln401_1_reg_1267, ap_CS_fsm_state9, p_23_reg_420)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln401_1_reg_1267 = ap_const_lv1_0) and (icmp_ln401_reg_1263 = ap_const_lv1_0))) then 
            ap_phi_mux_p_23_phi_fu_423_p6 <= ap_const_lv6_0;
        else 
            ap_phi_mux_p_23_phi_fu_423_p6 <= p_23_reg_420;
        end if; 
    end process;


    ap_phi_mux_p_2_phi_fu_438_p6_assign_proc : process(icmp_ln401_reg_1263, icmp_ln401_1_reg_1267, ap_CS_fsm_state9, sub_ln407_fu_778_p2, p_2_reg_435)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln401_1_reg_1267 = ap_const_lv1_0) and (icmp_ln401_reg_1263 = ap_const_lv1_0))) then 
            ap_phi_mux_p_2_phi_fu_438_p6 <= sub_ln407_fu_778_p2;
        else 
            ap_phi_mux_p_2_phi_fu_438_p6 <= p_2_reg_435;
        end if; 
    end process;


    ap_phi_mux_p_34_phi_fu_504_p4_assign_proc : process(icmp_ln430_reg_1421, add_ln440_fu_1094_p2, p_34_reg_501, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln430_reg_1421 = ap_const_lv1_0))) then 
            ap_phi_mux_p_34_phi_fu_504_p4 <= add_ln440_fu_1094_p2;
        else 
            ap_phi_mux_p_34_phi_fu_504_p4 <= p_34_reg_501;
        end if; 
    end process;


    ap_phi_mux_phi_ln406_1_phi_fu_410_p6_assign_proc : process(icmp_ln401_reg_1263, icmp_ln401_1_reg_1267, trunc_ln410_reg_1276, ap_CS_fsm_state9, phi_ln406_1_reg_406)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln401_1_reg_1267 = ap_const_lv1_0) and (icmp_ln401_reg_1263 = ap_const_lv1_0))) then 
            ap_phi_mux_phi_ln406_1_phi_fu_410_p6 <= trunc_ln410_reg_1276;
        else 
            ap_phi_mux_phi_ln406_1_phi_fu_410_p6 <= phi_ln406_1_reg_406;
        end if; 
    end process;


    ap_predicate_op127_call_state9_assign_proc : process(icmp_ln401_reg_1263, icmp_ln401_1_reg_1267)
    begin
                ap_predicate_op127_call_state9 <= ((icmp_ln401_1_reg_1267 = ap_const_lv1_0) and (icmp_ln401_reg_1263 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_p_34_phi_fu_504_p4, ap_CS_fsm_state26, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            ap_return <= ap_phi_mux_p_34_phi_fu_504_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    empty_101_fu_546_p1 <= r(8 - 1 downto 0);
    empty_104_fu_594_p1 <= sub_ln393_fu_588_p2(3 - 1 downto 0);
    empty_105_fu_604_p2 <= "1" when (unsigned(sub_ln393_fu_588_p2) > unsigned(ap_const_lv4_2)) else "0";
    empty_106_fu_651_p1 <= p_05_rec_reg_353(1 - 1 downto 0);
    empty_107_fu_791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r),64));
    empty_fu_542_p1 <= pos_r(6 - 1 downto 0);
    exitcond_fu_655_p2 <= "1" when (p_05_rec_reg_353 = sext_ln393_reg_1167) else "0";
    grp_KeccakF1600_StatePer_1_fu_510_ap_start <= grp_KeccakF1600_StatePer_1_fu_510_ap_start_reg;
    i_33_fu_885_p2 <= std_logic_vector(unsigned(i_2_reg_468) + unsigned(ap_const_lv5_1));
    i_34_fu_1018_p2 <= std_logic_vector(unsigned(i_5_reg_490) + unsigned(ap_const_lv32_1));
    i_fu_673_p2 <= std_logic_vector(unsigned(i_0_reg_364) + unsigned(ap_const_lv32_1));
    icmp_ln389_fu_561_p2 <= "1" when (phi_ln389_reg_342 = ap_const_lv3_7) else "0";
    icmp_ln391_fu_578_p2 <= "1" when (trunc_ln391_fu_567_p1 = ap_const_lv3_0) else "0";
    icmp_ln401_1_fu_764_p2 <= "1" when (unsigned(zext_ln401_2_fu_749_p1) < unsigned(sub_ln401_fu_759_p2)) else "0";
    icmp_ln401_fu_753_p2 <= "1" when (p_12_reg_385 = ap_const_lv6_0) else "0";
    icmp_ln412_fu_809_p2 <= "1" when (unsigned(indvars_iv_reg_446) < unsigned(empty_107_reg_1291)) else "0";
    icmp_ln413_fu_880_p2 <= "1" when (i_2_reg_468 = tmp_s_reg_1298) else "0";
    icmp_ln422_fu_925_p2 <= "1" when (i_3_reg_479 = tmp_3266_reg_1335) else "0";
    icmp_ln430_fu_1003_p2 <= "1" when (indvars_iv_reg_446 = zext_ln426_fu_980_p1) else "0";
    icmp_ln435_fu_1013_p2 <= "1" when (unsigned(zext_ln435_2_fu_1009_p1) < unsigned(trunc_ln427_reg_1405)) else "0";
        p_cast6_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln393_2_fu_618_p2),5));

    r_7_i5_fu_1067_p9 <= (((((((t_q0 & t_q1) & reg_538) & reg_534) & reg_530) & reg_526) & reg_521) & reg_516);
    r_7_i6_fu_896_p9 <= (((((((select_ln32_3_reg_1322 & select_ln32_2_reg_1314) & select_ln32_3_reg_1322) & select_ln32_2_reg_1314) & select_ln32_3_reg_1322) & select_ln32_2_reg_1314) & select_ln32_3_reg_1322) & select_ln32_2_reg_1314);
    r_7_i7_fu_950_p9 <= (((((((select_ln32_1_reg_1354 & select_ln32_reg_1346) & select_ln32_1_reg_1354) & select_ln32_reg_1346) & select_ln32_1_reg_1354) & select_ln32_reg_1346) & select_ln32_1_reg_1354) & select_ln32_reg_1346);
    r_7_i_fu_714_p9 <= (((((((t_q0 & t_q1) & reg_538) & reg_534) & reg_530) & reg_526) & reg_521) & reg_516);

    s_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state25, s_addr_reg_1251, ap_CS_fsm_state9, ap_predicate_op127_call_state9, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, s_addr_7_reg_1473, grp_KeccakF1600_StatePer_1_fu_510_state_address0, ap_CS_fsm_state7, ap_CS_fsm_state14, zext_ln398_fu_710_p1, zext_ln415_1_fu_891_p1, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            s_address0 <= s_addr_7_reg_1473;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_address0 <= zext_ln415_1_fu_891_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_address0 <= s_addr_reg_1251;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            s_address0 <= zext_ln398_fu_710_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_predicate_op127_call_state9 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            s_address0 <= grp_KeccakF1600_StatePer_1_fu_510_state_address0;
        else 
            s_address0 <= "XXXXX";
        end if; 
    end process;


    s_address1_assign_proc : process(ap_CS_fsm_state9, ap_predicate_op127_call_state9, ap_CS_fsm_pp0_stage0, s_addr_6_reg_1371, ap_CS_fsm_state15, s_addr_5_reg_1395, s_addr_7_reg_1473, ap_enable_reg_pp0_iter1, grp_KeccakF1600_StatePer_1_fu_510_state_address1, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state26, ap_block_pp0_stage0, zext_ln424_1_fu_945_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            s_address1 <= s_addr_7_reg_1473;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            s_address1 <= s_addr_5_reg_1395;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            s_address1 <= zext_ln424_1_fu_945_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_address1 <= s_addr_6_reg_1371;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_predicate_op127_call_state9 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            s_address1 <= grp_KeccakF1600_StatePer_1_fu_510_state_address1;
        else 
            s_address1 <= "XXXXX";
        end if; 
    end process;


    s_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state25, ap_CS_fsm_state9, ap_predicate_op127_call_state9, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, grp_KeccakF1600_StatePer_1_fu_510_state_ce0, ap_CS_fsm_state7, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state25) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            s_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_predicate_op127_call_state9 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            s_ce0 <= grp_KeccakF1600_StatePer_1_fu_510_state_ce0;
        else 
            s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_ce1_assign_proc : process(ap_CS_fsm_state9, ap_predicate_op127_call_state9, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state15, ap_enable_reg_pp0_iter1, grp_KeccakF1600_StatePer_1_fu_510_state_ce1, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            s_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_predicate_op127_call_state9 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            s_ce1 <= grp_KeccakF1600_StatePer_1_fu_510_state_ce1;
        else 
            s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_d0_assign_proc : process(ap_CS_fsm_state9, ap_predicate_op127_call_state9, grp_KeccakF1600_StatePer_1_fu_510_state_d0, ap_CS_fsm_state7, ap_CS_fsm_state14, xor_ln398_fu_734_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_d0 <= xor_ln398_fu_734_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_predicate_op127_call_state9 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            s_d0 <= grp_KeccakF1600_StatePer_1_fu_510_state_d0;
        else 
            s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s_d1_assign_proc : process(ap_CS_fsm_state9, ap_predicate_op127_call_state9, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, grp_KeccakF1600_StatePer_1_fu_510_state_d1, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state26, ap_block_pp0_stage0, xor_ln415_fu_908_p2, xor_ln424_fu_962_p2, xor_ln439_fu_1087_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            s_d1 <= xor_ln439_fu_1087_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            s_d1 <= xor_ln424_fu_962_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_d1 <= xor_ln415_fu_908_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_predicate_op127_call_state9 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            s_d1 <= grp_KeccakF1600_StatePer_1_fu_510_state_d1;
        else 
            s_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s_we0_assign_proc : process(ap_CS_fsm_state9, ap_predicate_op127_call_state9, grp_KeccakF1600_StatePer_1_fu_510_state_we0, ap_CS_fsm_state7, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_predicate_op127_call_state9 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            s_we0 <= grp_KeccakF1600_StatePer_1_fu_510_state_we0;
        else 
            s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s_we1_assign_proc : process(ap_CS_fsm_state9, ap_predicate_op127_call_state9, icmp_ln413_reg_1362, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln430_reg_1421, ap_enable_reg_pp0_iter1, grp_KeccakF1600_StatePer_1_fu_510_state_we1, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln430_reg_1421 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln413_reg_1362 = ap_const_lv1_0)))) then 
            s_we1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_predicate_op127_call_state9 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            s_we1 <= grp_KeccakF1600_StatePer_1_fu_510_state_we1;
        else 
            s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln32_1_fu_874_p3 <= 
        m_0_read when (xor_ln32_fu_863_p2(0) = '1') else 
        m_1_read;
    select_ln32_2_fu_823_p3 <= 
        m_1_read when (xor_ln32_1_fu_818_p2(0) = '1') else 
        m_0_read;
    select_ln32_3_fu_829_p3 <= 
        m_0_read when (xor_ln32_1_fu_818_p2(0) = '1') else 
        m_1_read;
    select_ln32_fu_868_p3 <= 
        m_1_read when (xor_ln32_fu_863_p2(0) = '1') else 
        m_0_read;
    select_ln394_fu_666_p3 <= 
        m_1_read when (empty_106_fu_651_p1(0) = '1') else 
        m_0_read;
    select_ln437_fu_1043_p3 <= 
        m_1_read when (xor_ln437_1_fu_1038_p2(0) = '1') else 
        m_0_read;
        sext_ln393_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln393_2_fu_618_p2),64));

        sext_ln395_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln393_2_fu_618_p2),6));

        sext_ln398_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln392_fu_684_p2),6));

        sext_ln406_fu_787_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_p_2_phi_fu_438_p6),64));

    sub_ln393_fu_588_p2 <= std_logic_vector(signed(ap_const_lv4_8) - signed(zext_ln393_fu_584_p1));
    sub_ln398_fu_692_p2 <= std_logic_vector(unsigned(add_ln396_reg_1182) - unsigned(sext_ln398_fu_688_p1));
    sub_ln401_fu_759_p2 <= std_logic_vector(unsigned(empty_101_reg_1136) - unsigned(zext_ln401_1_fu_741_p1));
    sub_ln407_fu_778_p2 <= std_logic_vector(unsigned(zext_ln401_reg_1256) - unsigned(trunc_ln407_reg_1271));
    sub_ln420_fu_920_p2 <= std_logic_vector(unsigned(indvars_iv_reg_446) - unsigned(empty_107_reg_1291));
    sub_ln427_fu_984_p2 <= std_logic_vector(unsigned(indvars_iv_reg_446) - unsigned(zext_ln426_fu_980_p1));
    t_addr_28_reg_1425 <= ap_const_lv64_0(3 - 1 downto 0);
    t_addr_29_reg_1430 <= ap_const_lv64_1(3 - 1 downto 0);
    t_addr_30_gep_fu_280_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    t_addr_30_reg_1435 <= ap_const_lv64_2(3 - 1 downto 0);
    t_addr_31_gep_fu_288_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    t_addr_31_reg_1440 <= ap_const_lv64_3(3 - 1 downto 0);
    t_addr_32_gep_fu_296_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    t_addr_32_reg_1445 <= ap_const_lv64_4(3 - 1 downto 0);
    t_addr_33_gep_fu_304_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    t_addr_33_reg_1450 <= ap_const_lv64_5(3 - 1 downto 0);
    t_addr_34_gep_fu_312_p3 <= ap_const_lv64_6(3 - 1 downto 0);
    t_addr_34_reg_1455 <= ap_const_lv64_6(3 - 1 downto 0);
    t_addr_35_gep_fu_320_p3 <= ap_const_lv64_7(3 - 1 downto 0);
    t_addr_35_reg_1460 <= ap_const_lv64_7(3 - 1 downto 0);

    t_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state23, ap_CS_fsm_state5, ap_CS_fsm_state24, ap_CS_fsm_state6, ap_CS_fsm_state25, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond_fu_655_p2, ap_CS_fsm_state17, t_addr_29_reg_1430, ap_CS_fsm_state18, t_addr_31_gep_fu_288_p3, t_addr_31_reg_1440, ap_CS_fsm_state19, t_addr_33_gep_fu_304_p3, t_addr_33_reg_1450, ap_CS_fsm_state20, t_addr_35_gep_fu_320_p3, t_addr_35_reg_1460, ap_CS_fsm_state22, zext_ln389_fu_556_p1, zext_ln394_fu_679_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            t_address0 <= t_addr_35_reg_1460;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            t_address0 <= t_addr_33_reg_1450;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            t_address0 <= t_addr_31_reg_1440;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            t_address0 <= t_addr_29_reg_1430;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            t_address0 <= t_addr_35_gep_fu_320_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            t_address0 <= t_addr_33_gep_fu_304_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            t_address0 <= t_addr_31_gep_fu_288_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            t_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            t_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            t_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_655_p2 = ap_const_lv1_1))) then 
            t_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_655_p2 = ap_const_lv1_0))) then 
            t_address0 <= zext_ln394_fu_679_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_address0 <= zext_ln389_fu_556_p1(3 - 1 downto 0);
        else 
            t_address0 <= "XXX";
        end if; 
    end process;


    t_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state23, ap_CS_fsm_state5, ap_CS_fsm_state24, ap_CS_fsm_state6, ap_CS_fsm_state25, ap_CS_fsm_state3, ap_CS_fsm_state17, t_addr_28_reg_1425, t_addr_30_gep_fu_280_p3, t_addr_30_reg_1435, ap_CS_fsm_state18, t_addr_32_gep_fu_296_p3, t_addr_32_reg_1445, ap_CS_fsm_state19, t_addr_34_gep_fu_312_p3, t_addr_34_reg_1455, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, zext_ln435_fu_1024_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            t_address1 <= t_addr_34_reg_1455;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            t_address1 <= t_addr_32_reg_1445;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            t_address1 <= t_addr_30_reg_1435;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            t_address1 <= t_addr_28_reg_1425;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            t_address1 <= zext_ln435_fu_1024_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            t_address1 <= t_addr_34_gep_fu_312_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            t_address1 <= t_addr_32_gep_fu_296_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            t_address1 <= t_addr_30_gep_fu_280_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            t_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            t_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            t_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            t_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            t_address1 <= "XXX";
        end if; 
    end process;


    t_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state23, ap_CS_fsm_state5, ap_CS_fsm_state24, ap_CS_fsm_state6, ap_CS_fsm_state25, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond_fu_655_p2, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state25) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_655_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_655_p2 = ap_const_lv1_0)))) then 
            t_ce0 <= ap_const_logic_1;
        else 
            t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state23, ap_CS_fsm_state5, ap_CS_fsm_state24, ap_CS_fsm_state6, ap_CS_fsm_state25, ap_CS_fsm_state3, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            t_ce1 <= ap_const_logic_1;
        else 
            t_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    t_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond_fu_655_p2, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, select_ln394_fu_666_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_655_p2 = ap_const_lv1_0))) then 
            t_d0 <= select_ln394_fu_666_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            t_d0 <= ap_const_lv8_0;
        else 
            t_d0 <= "XXXXXXXX";
        end if; 
    end process;


    t_d1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, select_ln437_fu_1043_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            t_d1 <= select_ln437_fu_1043_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            t_d1 <= ap_const_lv8_0;
        else 
            t_d1 <= "XXXXXXXX";
        end if; 
    end process;


    t_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond_fu_655_p2, ap_CS_fsm_state17, icmp_ln430_fu_1003_p2, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln430_fu_1003_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_655_p2 = ap_const_lv1_0)))) then 
            t_we0 <= ap_const_logic_1;
        else 
            t_we0 <= ap_const_logic_0;
        end if; 
    end process;


    t_we1_assign_proc : process(ap_CS_fsm_state17, icmp_ln430_fu_1003_p2, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, icmp_ln435_fu_1013_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln435_fu_1013_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln430_fu_1003_p2 = ap_const_lv1_0)))) then 
            t_we1 <= ap_const_logic_1;
        else 
            t_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_496_fu_835_p4 <= p_23_reg_420(5 downto 3);
    tmp_497_fu_1050_p4 <= add_ln428_reg_1410(8 downto 3);
    trunc_ln391_fu_567_p1 <= pos_r(3 - 1 downto 0);
    trunc_ln395_fu_636_p1 <= umax_fu_610_p3(2 - 1 downto 0);
    trunc_ln399_fu_707_p1 <= xor_ln393_2_reg_1162(1 - 1 downto 0);
    trunc_ln407_fu_770_p1 <= sub_ln401_fu_759_p2(3 - 1 downto 0);
    trunc_ln410_fu_774_p1 <= sub_ln401_fu_759_p2(1 - 1 downto 0);
    trunc_ln415_fu_814_p1 <= p_38_rec_reg_456(1 - 1 downto 0);
    trunc_ln424_fu_859_p1 <= p_38_rec_reg_456(1 - 1 downto 0);
    trunc_ln427_fu_990_p1 <= sub_ln427_fu_984_p2(33 - 1 downto 0);
    trunc_ln437_fu_1029_p1 <= i_5_reg_490(1 - 1 downto 0);
    trunc_ln440_fu_1064_p1 <= sub_ln427_reg_1400(32 - 1 downto 0);
    umax_fu_610_p3 <= 
        ap_const_lv3_5 when (empty_105_fu_604_p2(0) = '1') else 
        xor_ln393_1_fu_598_p2;
    xor_ln32_1_fu_818_p2 <= (xor_ln415_1_reg_1303 xor trunc_ln415_fu_814_p1);
    xor_ln32_fu_863_p2 <= (xor_ln415_1_reg_1303 xor trunc_ln424_fu_859_p1);
    xor_ln393_1_fu_598_p2 <= (empty_104_fu_594_p1 xor ap_const_lv3_7);
    xor_ln393_2_fu_618_p2 <= (umax_fu_610_p3 xor ap_const_lv3_7);
    xor_ln398_fu_734_p2 <= (s_q0 xor r_7_i_fu_714_p9);
    xor_ln415_1_fu_803_p2 <= (phi_ln406_reg_373 xor ap_phi_mux_phi_ln406_1_phi_fu_410_p6);
    xor_ln415_fu_908_p2 <= (s_q0 xor r_7_i6_fu_896_p9);
    xor_ln424_fu_962_p2 <= (s_q1 xor r_7_i7_fu_950_p9);
    xor_ln437_1_fu_1038_p2 <= (xor_ln437_fu_1033_p2 xor xor_ln415_1_reg_1303);
    xor_ln437_fu_1033_p2 <= (trunc_ln437_fu_1029_p1 xor trunc_ln424_reg_1341);
    xor_ln439_fu_1087_p2 <= (s_q0 xor r_7_i5_fu_1067_p9);
    zext_ln389_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln389_reg_342),64));
    zext_ln391_1_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln391_fu_567_p1),5));
    zext_ln391_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln391_fu_567_p1),32));
    zext_ln393_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln391_fu_567_p1),4));
    zext_ln394_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_364),64));
    zext_ln398_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_1211),64));
    zext_ln401_1_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_12_reg_385),8));
    zext_ln401_2_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_1_reg_395),8));
    zext_ln401_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_1_reg_395),3));
    zext_ln406_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_23_phi_fu_423_p6),9));
    zext_ln415_1_fu_891_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_468),64));
    zext_ln422_2_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_496_fu_835_p4),30));
    zext_ln422_fu_936_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_479),30));
    zext_ln424_1_fu_945_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln424_1_fu_940_p2),64));
    zext_ln426_2_fu_976_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_969_p3),9));
    zext_ln426_fu_980_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_969_p3),64));
    zext_ln428_fu_999_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln428_fu_994_p2),32));
    zext_ln435_2_fu_1009_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_490),33));
    zext_ln435_fu_1024_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_490),64));
    zext_ln439_fu_1059_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_497_fu_1050_p4),64));
end behav;
