-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity crypto_sign_signatur is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sig_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    sig_ce0 : OUT STD_LOGIC;
    sig_we0 : OUT STD_LOGIC;
    sig_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sig_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sig_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    sig_ce1 : OUT STD_LOGIC;
    sig_we1 : OUT STD_LOGIC;
    sig_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    mlen : IN STD_LOGIC_VECTOR (63 downto 0);
    sk_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sk_ce0 : OUT STD_LOGIC;
    sk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sk_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sk_ce1 : OUT STD_LOGIC;
    sk_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of crypto_sign_signatur is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (117 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (117 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (117 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (117 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (117 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (117 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (117 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (117 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (117 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (117 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_75 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110101";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv7_30 : STD_LOGIC_VECTOR (6 downto 0) := "0110000";
    constant ap_const_lv13_974 : STD_LOGIC_VECTOR (12 downto 0) := "0100101110100";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv64_300 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001100000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_20 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_const_lv8_70 : STD_LOGIC_VECTOR (7 downto 0) := "01110000";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv18_173B2 : STD_LOGIC_VECTOR (17 downto 0) := "010111001110110010";
    constant ap_const_lv18_17400 : STD_LOGIC_VECTOR (17 downto 0) := "010111010000000000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv8_A0 : STD_LOGIC_VECTOR (7 downto 0) := "10100000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv56_1 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv56_2 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv56_3 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv9_2B : STD_LOGIC_VECTOR (8 downto 0) := "000101011";
    constant ap_const_lv32_3FF000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001111111111000000000000";
    constant ap_const_lv32_7FE001 : STD_LOGIC_VECTOR (31 downto 0) := "00000000011111111110000000000001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv32_3802001 : STD_LOGIC_VECTOR (31 downto 0) := "00000011100000000010000000000001";
    constant ap_const_lv55_7FFFFFFF801FFF : STD_LOGIC_VECTOR (54 downto 0) := "1111111111111111111111111111111100000000001111111111111";
    constant ap_const_lv32_400000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_1FFB2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000011111111110110010";
    constant ap_const_lv11_50 : STD_LOGIC_VECTOR (10 downto 0) := "00001010000";
    constant ap_const_lv32_17401 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010111010000000001";
    constant ap_const_lv32_7E6C01 : STD_LOGIC_VECTOR (31 downto 0) := "00000000011111100110110000000001";
    constant ap_const_lv32_2C0B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010110000001011";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv27_7FD1800 : STD_LOGIC_VECTOR (26 downto 0) := "111111111010001100000000000";
    constant ap_const_lv32_FF801FFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111100000000001111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_keccak_absorb_2_fu_1342_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1546 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_keccak_absorb_2_fu_1342_ap_ready : STD_LOGIC;
    signal grp_keccak_absorb_2_fu_1342_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal reg_1550 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal reg_1556 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_1562 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_1568 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_1574 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_1580 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_unpack_sk_fu_1328_ap_ready : STD_LOGIC;
    signal grp_unpack_sk_fu_1328_ap_done : STD_LOGIC;
    signal i_43_fu_1592_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal state_s_addr_reg_3361 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_s_addr_9_reg_3366 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln540_fu_1648_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln540_reg_3374 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln540_fu_1642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln21_fu_1659_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln21_reg_3384 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_44_fu_1829_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln416_fu_1840_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln416_reg_3402 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal add_ln416_fu_1850_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln416_reg_3410 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_fu_1864_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln26_reg_3415 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln416_fu_1844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_45_fu_1874_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_45_reg_3435 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal icmp_ln30_fu_1868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_0_s_addr_4_reg_3445 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_fu_1928_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal add_ln540_1_fu_1966_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln540_1_reg_3459 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal icmp_ln540_1_fu_1960_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln541_1_fu_1977_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln541_1_reg_3469 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal trunc_ln543_1_reg_3479 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln544_1_reg_3484 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln545_1_reg_3489 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln546_1_reg_3494 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln547_1_reg_3499 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln548_1_reg_3504 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_47_fu_2218_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_47_reg_3512 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal j_fu_2230_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_3520 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal add_ln_fu_2240_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln_reg_3525 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln21_fu_2224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_70_fu_2257_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_70_reg_3533 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal i_71_fu_2269_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_71_reg_3541 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal i_72_fu_2281_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_72_reg_3549 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal nonce_fu_2287_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal nonce_reg_3554 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal add_ln124_fu_2293_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_reg_3559 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal zext_ln124_fu_2299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_reg_3564 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln124_fu_2304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_3574 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln124_1_fu_2315_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_1_reg_3578 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal tmp_s_fu_2321_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_3583 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln124_1_fu_2330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_1_reg_3593 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln124_2_fu_2341_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_2_reg_3597 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal tmp_1127_fu_2347_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1127_reg_3602 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln124_2_fu_2356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_2_reg_3612 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln124_3_fu_2367_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_3_reg_3616 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal tmp_1128_fu_2373_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1128_reg_3621 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln124_3_fu_2382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_3_reg_3631 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_73_fu_2399_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_73_reg_3638 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal i_74_fu_2411_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_74_reg_3646 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal i_75_fu_2423_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_75_reg_3654 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal zext_ln221_fu_2437_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln221_reg_3659 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln373_fu_2417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_77_fu_2447_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_77_reg_3667 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal zext_ln226_1_fu_2462_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln226_1_reg_3672 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln225_fu_2441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w1_vec_coeffs_addr_reg_3677 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_76_fu_2576_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal state_s_addr_12_reg_3690 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln540_2_fu_2632_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln540_2_reg_3698 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal icmp_ln540_2_fu_2626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln541_3_fu_2638_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln541_3_reg_3708 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln541_2_fu_2647_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln541_2_reg_3713 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_78_fu_2736_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_78_reg_3726 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal zext_ln176_fu_2750_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln176_reg_3731 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln114_fu_2730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_80_fu_2760_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_80_reg_3739 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal zext_ln181_16_fu_2780_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln181_16_reg_3744 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln180_fu_2754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_79_fu_2846_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_79_reg_3762 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal i_81_fu_2858_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_81_reg_3770 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal zext_ln83_fu_2872_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln83_reg_3775 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln85_fu_2852_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_83_fu_2882_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_83_reg_3783 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal icmp_ln87_fu_2876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_vec_coeffs_addr_5_reg_3793 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_82_fu_2920_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_82_reg_3801 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal zext_ln28_fu_2934_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln28_reg_3806 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln53_fu_2914_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_85_fu_2944_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_85_reg_3814 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal z_vec_coeffs_addr_6_reg_3819 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln32_fu_2938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln158_fu_2984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln158_reg_3824 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal i_84_fu_2990_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_84_reg_3828 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln287_fu_3004_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln287_reg_3833 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_87_fu_3014_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_87_reg_3841 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal icmp_ln298_fu_3008_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_86_fu_3080_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_86_reg_3857 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal zext_ln104_fu_3094_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln104_reg_3862 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln254_fu_3074_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_88_fu_3104_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_88_reg_3870 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal w0_vec_coeffs_addr_1_reg_3875 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln108_fu_3098_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_polyveck_chknorm_fu_1439_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_62_reg_3885 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal grp_polyveck_chknorm_fu_1439_ap_ready : STD_LOGIC;
    signal grp_polyveck_chknorm_fu_1439_ap_done : STD_LOGIC;
    signal tmp_71_reg_3889 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal i_89_fu_3138_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_89_reg_3896 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state111 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state111 : signal is "none";
    signal zext_ln83_1_fu_3152_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln83_1_reg_3901 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln236_fu_3132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_90_fu_3162_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_90_reg_3909 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal w0_vec_coeffs_addr_2_reg_3914 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln87_1_fu_3156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_91_fu_3196_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_91_reg_3927 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state115 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state115 : signal is "none";
    signal zext_ln244_fu_3210_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln244_reg_3932 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln394_fu_3190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_92_fu_3226_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_92_reg_3943 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal zext_ln249_1_fu_3241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln249_1_reg_3948 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln248_fu_3220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_fu_3251_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal s_1_fu_3314_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal state_0_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_0_s_ce0 : STD_LOGIC;
    signal state_0_s_we0 : STD_LOGIC;
    signal state_0_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_0_s_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_0_s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_0_s_ce1 : STD_LOGIC;
    signal state_0_s_we1 : STD_LOGIC;
    signal state_0_s_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_0_s_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal seedbuf_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal seedbuf_ce0 : STD_LOGIC;
    signal seedbuf_we0 : STD_LOGIC;
    signal seedbuf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal seedbuf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal seedbuf_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal seedbuf_ce1 : STD_LOGIC;
    signal seedbuf_we1 : STD_LOGIC;
    signal seedbuf_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mat_vec_coeffs_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mat_vec_coeffs_ce0 : STD_LOGIC;
    signal mat_vec_coeffs_we0 : STD_LOGIC;
    signal mat_vec_coeffs_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal s1_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal s1_vec_coeffs_ce0 : STD_LOGIC;
    signal s1_vec_coeffs_we0 : STD_LOGIC;
    signal s1_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s1_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s1_vec_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal s1_vec_coeffs_ce1 : STD_LOGIC;
    signal s1_vec_coeffs_we1 : STD_LOGIC;
    signal s1_vec_coeffs_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_vec_coeffs_ce0 : STD_LOGIC;
    signal y_vec_coeffs_we0 : STD_LOGIC;
    signal y_vec_coeffs_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal z_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal z_vec_coeffs_ce0 : STD_LOGIC;
    signal z_vec_coeffs_we0 : STD_LOGIC;
    signal z_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_vec_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal z_vec_coeffs_ce1 : STD_LOGIC;
    signal z_vec_coeffs_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t0_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal t0_vec_coeffs_ce0 : STD_LOGIC;
    signal t0_vec_coeffs_we0 : STD_LOGIC;
    signal t0_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal t0_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal t0_vec_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal t0_vec_coeffs_ce1 : STD_LOGIC;
    signal t0_vec_coeffs_we1 : STD_LOGIC;
    signal t0_vec_coeffs_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal s2_vec_coeffs_ce0 : STD_LOGIC;
    signal s2_vec_coeffs_we0 : STD_LOGIC;
    signal s2_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_vec_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal s2_vec_coeffs_ce1 : STD_LOGIC;
    signal s2_vec_coeffs_we1 : STD_LOGIC;
    signal s2_vec_coeffs_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w1_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal w1_vec_coeffs_ce0 : STD_LOGIC;
    signal w1_vec_coeffs_we0 : STD_LOGIC;
    signal w1_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w1_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w1_vec_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal w1_vec_coeffs_ce1 : STD_LOGIC;
    signal w1_vec_coeffs_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w0_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal w0_vec_coeffs_ce0 : STD_LOGIC;
    signal w0_vec_coeffs_we0 : STD_LOGIC;
    signal w0_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w0_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_vec_coeffs_ce0 : STD_LOGIC;
    signal h_vec_coeffs_we0 : STD_LOGIC;
    signal h_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_vec_coeffs_ce1 : STD_LOGIC;
    signal h_vec_coeffs_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cp_coeffs_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cp_coeffs_ce0 : STD_LOGIC;
    signal cp_coeffs_we0 : STD_LOGIC;
    signal cp_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cp_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cp_coeffs_ce1 : STD_LOGIC;
    signal cp_coeffs_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_s_ce0 : STD_LOGIC;
    signal state_s_we0 : STD_LOGIC;
    signal state_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_s_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_s_ce1 : STD_LOGIC;
    signal state_s_we1 : STD_LOGIC;
    signal state_s_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_s_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pack_sig_fu_1288_ap_start : STD_LOGIC;
    signal grp_pack_sig_fu_1288_ap_done : STD_LOGIC;
    signal grp_pack_sig_fu_1288_ap_idle : STD_LOGIC;
    signal grp_pack_sig_fu_1288_ap_ready : STD_LOGIC;
    signal grp_pack_sig_fu_1288_sig_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_pack_sig_fu_1288_sig_ce0 : STD_LOGIC;
    signal grp_pack_sig_fu_1288_sig_we0 : STD_LOGIC;
    signal grp_pack_sig_fu_1288_sig_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_pack_sig_fu_1288_sig_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_pack_sig_fu_1288_sig_ce1 : STD_LOGIC;
    signal grp_pack_sig_fu_1288_sig_we1 : STD_LOGIC;
    signal grp_pack_sig_fu_1288_sig_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_pack_sig_fu_1288_z_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pack_sig_fu_1288_z_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_pack_sig_fu_1288_h_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pack_sig_fu_1288_h_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_challenge_fu_1296_ap_start : STD_LOGIC;
    signal grp_poly_challenge_fu_1296_ap_done : STD_LOGIC;
    signal grp_poly_challenge_fu_1296_ap_idle : STD_LOGIC;
    signal grp_poly_challenge_fu_1296_ap_ready : STD_LOGIC;
    signal grp_poly_challenge_fu_1296_c_coeffs_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_poly_challenge_fu_1296_c_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_challenge_fu_1296_c_coeffs_we0 : STD_LOGIC;
    signal grp_poly_challenge_fu_1296_c_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_poly_challenge_fu_1296_seed_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_poly_challenge_fu_1296_seed_ce0 : STD_LOGIC;
    signal grp_poly_uniform_fu_1305_ap_start : STD_LOGIC;
    signal grp_poly_uniform_fu_1305_ap_done : STD_LOGIC;
    signal grp_poly_uniform_fu_1305_ap_idle : STD_LOGIC;
    signal grp_poly_uniform_fu_1305_ap_ready : STD_LOGIC;
    signal grp_poly_uniform_fu_1305_a_coeffs_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_poly_uniform_fu_1305_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_uniform_fu_1305_a_coeffs_we0 : STD_LOGIC;
    signal grp_poly_uniform_fu_1305_a_coeffs_d0 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_poly_uniform_fu_1305_seed_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_poly_uniform_fu_1305_seed_ce0 : STD_LOGIC;
    signal grp_polyvecl_uniform_gam_fu_1318_ap_start : STD_LOGIC;
    signal grp_polyvecl_uniform_gam_fu_1318_ap_done : STD_LOGIC;
    signal grp_polyvecl_uniform_gam_fu_1318_ap_idle : STD_LOGIC;
    signal grp_polyvecl_uniform_gam_fu_1318_ap_ready : STD_LOGIC;
    signal grp_polyvecl_uniform_gam_fu_1318_v_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_polyvecl_uniform_gam_fu_1318_v_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyvecl_uniform_gam_fu_1318_v_vec_coeffs_we0 : STD_LOGIC;
    signal grp_polyvecl_uniform_gam_fu_1318_v_vec_coeffs_d0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_polyvecl_uniform_gam_fu_1318_seed_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_polyvecl_uniform_gam_fu_1318_seed_ce0 : STD_LOGIC;
    signal grp_unpack_sk_fu_1328_ap_start : STD_LOGIC;
    signal grp_unpack_sk_fu_1328_ap_idle : STD_LOGIC;
    signal grp_unpack_sk_fu_1328_rho_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_unpack_sk_fu_1328_rho_ce0 : STD_LOGIC;
    signal grp_unpack_sk_fu_1328_rho_we0 : STD_LOGIC;
    signal grp_unpack_sk_fu_1328_rho_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_unpack_sk_fu_1328_t0_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_unpack_sk_fu_1328_t0_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_unpack_sk_fu_1328_t0_vec_coeffs_we0 : STD_LOGIC;
    signal grp_unpack_sk_fu_1328_t0_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_unpack_sk_fu_1328_t0_vec_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_unpack_sk_fu_1328_t0_vec_coeffs_ce1 : STD_LOGIC;
    signal grp_unpack_sk_fu_1328_t0_vec_coeffs_we1 : STD_LOGIC;
    signal grp_unpack_sk_fu_1328_t0_vec_coeffs_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_unpack_sk_fu_1328_s1_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_unpack_sk_fu_1328_s1_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_unpack_sk_fu_1328_s1_vec_coeffs_we0 : STD_LOGIC;
    signal grp_unpack_sk_fu_1328_s1_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_unpack_sk_fu_1328_s1_vec_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_unpack_sk_fu_1328_s1_vec_coeffs_ce1 : STD_LOGIC;
    signal grp_unpack_sk_fu_1328_s1_vec_coeffs_we1 : STD_LOGIC;
    signal grp_unpack_sk_fu_1328_s1_vec_coeffs_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_unpack_sk_fu_1328_s2_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_unpack_sk_fu_1328_s2_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_unpack_sk_fu_1328_s2_vec_coeffs_we0 : STD_LOGIC;
    signal grp_unpack_sk_fu_1328_s2_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_unpack_sk_fu_1328_s2_vec_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_unpack_sk_fu_1328_s2_vec_coeffs_ce1 : STD_LOGIC;
    signal grp_unpack_sk_fu_1328_s2_vec_coeffs_we1 : STD_LOGIC;
    signal grp_unpack_sk_fu_1328_s2_vec_coeffs_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_unpack_sk_fu_1328_sk_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_unpack_sk_fu_1328_sk_ce0 : STD_LOGIC;
    signal grp_unpack_sk_fu_1328_sk_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_unpack_sk_fu_1328_sk_ce1 : STD_LOGIC;
    signal grp_keccak_absorb_2_fu_1342_ap_start : STD_LOGIC;
    signal grp_keccak_absorb_2_fu_1342_ap_idle : STD_LOGIC;
    signal grp_keccak_absorb_2_fu_1342_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_absorb_2_fu_1342_s_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_2_fu_1342_s_we0 : STD_LOGIC;
    signal grp_keccak_absorb_2_fu_1342_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_2_fu_1342_s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_absorb_2_fu_1342_s_ce1 : STD_LOGIC;
    signal grp_keccak_absorb_2_fu_1342_s_we1 : STD_LOGIC;
    signal grp_keccak_absorb_2_fu_1342_s_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_2_fu_1342_m_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_keccak_absorb_2_fu_1342_m_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_2_fu_1342_m_offset : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_keccak_absorb_2_fu_1342_mlen : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_1358_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_1358_ap_done : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_1358_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_1358_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_1358_state_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_1358_state_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_1358_state_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_1358_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_1358_state_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_1358_state_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_1358_state_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_1358_state_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_1365_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_1365_ap_done : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_1365_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_1365_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_1365_state_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_1365_state_0_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_1365_state_0_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_1365_state_0_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_1365_state_0_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_1365_state_0_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_1365_state_0_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_1365_state_0_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_polyveck_invntt_tomo_fu_1372_ap_start : STD_LOGIC;
    signal grp_polyveck_invntt_tomo_fu_1372_ap_done : STD_LOGIC;
    signal grp_polyveck_invntt_tomo_fu_1372_ap_idle : STD_LOGIC;
    signal grp_polyveck_invntt_tomo_fu_1372_ap_ready : STD_LOGIC;
    signal grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_we0 : STD_LOGIC;
    signal grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_ce1 : STD_LOGIC;
    signal grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_invntt_tomont_fu_1379_ap_start : STD_LOGIC;
    signal grp_invntt_tomont_fu_1379_ap_done : STD_LOGIC;
    signal grp_invntt_tomont_fu_1379_ap_idle : STD_LOGIC;
    signal grp_invntt_tomont_fu_1379_ap_ready : STD_LOGIC;
    signal grp_invntt_tomont_fu_1379_a_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_invntt_tomont_fu_1379_a_ce0 : STD_LOGIC;
    signal grp_invntt_tomont_fu_1379_a_we0 : STD_LOGIC;
    signal grp_invntt_tomont_fu_1379_a_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_invntt_tomont_fu_1379_a_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_invntt_tomont_fu_1379_a_ce1 : STD_LOGIC;
    signal grp_ntt_1_fu_1388_ap_start : STD_LOGIC;
    signal grp_ntt_1_fu_1388_ap_done : STD_LOGIC;
    signal grp_ntt_1_fu_1388_ap_idle : STD_LOGIC;
    signal grp_ntt_1_fu_1388_ap_ready : STD_LOGIC;
    signal grp_ntt_1_fu_1388_a_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ntt_1_fu_1388_a_ce0 : STD_LOGIC;
    signal grp_ntt_1_fu_1388_a_we0 : STD_LOGIC;
    signal grp_ntt_1_fu_1388_a_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ntt_1_fu_1388_a_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ntt_1_fu_1388_a_ce1 : STD_LOGIC;
    signal grp_ntt_fu_1395_ap_start : STD_LOGIC;
    signal grp_ntt_fu_1395_ap_done : STD_LOGIC;
    signal grp_ntt_fu_1395_ap_idle : STD_LOGIC;
    signal grp_ntt_fu_1395_ap_ready : STD_LOGIC;
    signal grp_ntt_fu_1395_a_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_ntt_fu_1395_a_ce0 : STD_LOGIC;
    signal grp_ntt_fu_1395_a_we0 : STD_LOGIC;
    signal grp_ntt_fu_1395_a_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ntt_fu_1395_a_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ntt_fu_1395_a_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_ntt_fu_1395_a_ce1 : STD_LOGIC;
    signal grp_ntt_fu_1395_a_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ntt_fu_1395_a_offset : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_polyvecl_pointwise_a_fu_1407_ap_start : STD_LOGIC;
    signal grp_polyvecl_pointwise_a_fu_1407_ap_done : STD_LOGIC;
    signal grp_polyvecl_pointwise_a_fu_1407_ap_idle : STD_LOGIC;
    signal grp_polyvecl_pointwise_a_fu_1407_ap_ready : STD_LOGIC;
    signal grp_polyvecl_pointwise_a_fu_1407_w_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_polyvecl_pointwise_a_fu_1407_w_coeffs_ce0 : STD_LOGIC;
    signal grp_polyvecl_pointwise_a_fu_1407_w_coeffs_we0 : STD_LOGIC;
    signal grp_polyvecl_pointwise_a_fu_1407_w_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_polyvecl_pointwise_a_fu_1407_u_vec_coeffs_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_polyvecl_pointwise_a_fu_1407_u_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyvecl_pointwise_a_fu_1407_v_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_polyvecl_pointwise_a_fu_1407_v_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_3199_fu_1416_ap_start : STD_LOGIC;
    signal grp_keccak_absorb_3199_fu_1416_ap_done : STD_LOGIC;
    signal grp_keccak_absorb_3199_fu_1416_ap_idle : STD_LOGIC;
    signal grp_keccak_absorb_3199_fu_1416_ap_ready : STD_LOGIC;
    signal grp_keccak_absorb_3199_fu_1416_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_absorb_3199_fu_1416_s_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_3199_fu_1416_s_we0 : STD_LOGIC;
    signal grp_keccak_absorb_3199_fu_1416_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_3199_fu_1416_m_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_keccak_absorb_3199_fu_1416_m_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_3199_fu_1416_m_offset : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_polyveck_pack_w1_fu_1425_ap_start : STD_LOGIC;
    signal grp_polyveck_pack_w1_fu_1425_ap_done : STD_LOGIC;
    signal grp_polyveck_pack_w1_fu_1425_ap_idle : STD_LOGIC;
    signal grp_polyveck_pack_w1_fu_1425_ap_ready : STD_LOGIC;
    signal grp_polyveck_pack_w1_fu_1425_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_polyveck_pack_w1_fu_1425_r_ce0 : STD_LOGIC;
    signal grp_polyveck_pack_w1_fu_1425_r_we0 : STD_LOGIC;
    signal grp_polyveck_pack_w1_fu_1425_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_polyveck_pack_w1_fu_1425_r_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_polyveck_pack_w1_fu_1425_r_ce1 : STD_LOGIC;
    signal grp_polyveck_pack_w1_fu_1425_r_we1 : STD_LOGIC;
    signal grp_polyveck_pack_w1_fu_1425_r_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_polyveck_pack_w1_fu_1425_w1_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_polyveck_pack_w1_fu_1425_w1_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyveck_pack_w1_fu_1425_w1_vec_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_polyveck_pack_w1_fu_1425_w1_vec_coeffs_ce1 : STD_LOGIC;
    signal grp_polyveck_pointwise_p_fu_1432_ap_start : STD_LOGIC;
    signal grp_polyveck_pointwise_p_fu_1432_ap_done : STD_LOGIC;
    signal grp_polyveck_pointwise_p_fu_1432_ap_idle : STD_LOGIC;
    signal grp_polyveck_pointwise_p_fu_1432_ap_ready : STD_LOGIC;
    signal grp_polyveck_pointwise_p_fu_1432_r_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_polyveck_pointwise_p_fu_1432_r_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyveck_pointwise_p_fu_1432_r_vec_coeffs_we0 : STD_LOGIC;
    signal grp_polyveck_pointwise_p_fu_1432_r_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_polyveck_pointwise_p_fu_1432_a_coeffs_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_polyveck_pointwise_p_fu_1432_a_coeffs_ce0 : STD_LOGIC;
    signal grp_polyveck_pointwise_p_fu_1432_v_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_polyveck_pointwise_p_fu_1432_v_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyveck_pointwise_p_fu_1432_v_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_polyveck_chknorm_fu_1439_ap_start : STD_LOGIC;
    signal grp_polyveck_chknorm_fu_1439_ap_idle : STD_LOGIC;
    signal grp_polyveck_chknorm_fu_1439_v_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_polyveck_chknorm_fu_1439_v_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyveck_chknorm_fu_1439_v_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_polyveck_chknorm_fu_1439_bound : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_polyveck_caddq_fu_1447_ap_start : STD_LOGIC;
    signal grp_polyveck_caddq_fu_1447_ap_done : STD_LOGIC;
    signal grp_polyveck_caddq_fu_1447_ap_idle : STD_LOGIC;
    signal grp_polyveck_caddq_fu_1447_ap_ready : STD_LOGIC;
    signal grp_polyveck_caddq_fu_1447_v_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_polyveck_caddq_fu_1447_v_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyveck_caddq_fu_1447_v_vec_coeffs_we0 : STD_LOGIC;
    signal grp_polyveck_caddq_fu_1447_v_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_polyveck_caddq_fu_1447_v_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_polyveck_reduce_fu_1452_ap_start : STD_LOGIC;
    signal grp_polyveck_reduce_fu_1452_ap_done : STD_LOGIC;
    signal grp_polyveck_reduce_fu_1452_ap_idle : STD_LOGIC;
    signal grp_polyveck_reduce_fu_1452_ap_ready : STD_LOGIC;
    signal grp_polyveck_reduce_fu_1452_v_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_polyveck_reduce_fu_1452_v_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyveck_reduce_fu_1452_v_vec_coeffs_we0 : STD_LOGIC;
    signal grp_polyveck_reduce_fu_1452_v_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_polyveck_reduce_fu_1452_v_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_i_reg_833 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln362_fu_1586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_i_reg_844 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal i_0_i_i_i_reg_856 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln362_1_fu_1823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_i1_reg_867 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal i_0_i5_i_reg_878 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_0_i6_i_reg_890 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_i3_reg_902 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal i_0_i_reg_914 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_0_i_reg_926 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal icmp_ln20_fu_2212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i3_reg_938 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal i_0_i5_reg_950 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal icmp_ln100_fu_2251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i7_reg_962 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal icmp_ln284_fu_2263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nonce_0_reg_974 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln172_fu_3214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_1_fu_2275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln124_reg_986 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal phi_ln124_1_reg_997 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal phi_ln124_2_reg_1008 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal phi_ln124_3_reg_1019 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal i_0_i12_reg_1030 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal i_0_i17_reg_1042 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal icmp_ln100_1_fu_2393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i19_reg_1054 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal i_0_i_i20_reg_1065 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal i_0_i_i23_reg_1076 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal icmp_ln362_2_fu_2570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_i47_reg_1087 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal i_0_i43_reg_1098 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal i_0_i_i44_reg_1109 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal i_0_i49_reg_1120 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal i_0_i51_reg_1132 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln107_fu_2840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i_i52_reg_1143 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal i_0_i59_reg_1154 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_0_i_i60_reg_1165 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal i_0_i85_reg_1176 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_0_i_i86_reg_1187 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal icmp_ln303_fu_3068_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i66_reg_1198 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal i_0_i_i67_reg_1209 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal i_0_i74_reg_1220 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_0_i_i75_reg_1231 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state113 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state113 : signal is "none";
    signal i_0_i87_reg_1242 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state114 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state114 : signal is "none";
    signal n_reg_1253 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_0_i_i88_reg_1265 : STD_LOGIC_VECTOR (8 downto 0);
    signal s_0_i_i_reg_1276 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pack_sig_fu_1288_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state118 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state118 : signal is "none";
    signal grp_poly_challenge_fu_1296_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal grp_poly_uniform_fu_1305_ap_start_reg : STD_LOGIC := '0';
    signal grp_polyvecl_uniform_gam_fu_1318_ap_start_reg : STD_LOGIC := '0';
    signal grp_unpack_sk_fu_1328_ap_start_reg : STD_LOGIC := '0';
    signal grp_keccak_absorb_2_fu_1342_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal grp_KeccakF1600_StatePer_1_fu_1358_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal grp_KeccakF1600_StatePer_fu_1365_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_polyveck_invntt_tomo_fu_1372_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal grp_invntt_tomont_fu_1379_ap_start_reg : STD_LOGIC := '0';
    signal grp_ntt_1_fu_1388_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal grp_ntt_fu_1395_ap_start_reg : STD_LOGIC := '0';
    signal grp_polyvecl_pointwise_a_fu_1407_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln28_fu_2405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_keccak_absorb_3199_fu_1416_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal grp_polyveck_pack_w1_fu_1425_ap_start_reg : STD_LOGIC := '0';
    signal grp_polyveck_pointwise_p_fu_1432_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal grp_polyveck_chknorm_fu_1439_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal grp_polyveck_caddq_fu_1447_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal grp_polyveck_reduce_fu_1452_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal zext_ln363_fu_1598_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln450_4_fu_1603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln540_fu_1637_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_1_fu_1677_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln542_1_fu_1698_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln543_1_fu_1718_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal zext_ln544_1_fu_1738_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln545_1_fu_1758_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal zext_ln546_1_fu_1778_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln547_1_fu_1798_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln548_1_fu_1818_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln363_1_fu_1835_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_18_fu_1897_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln540_1_fu_1955_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_3_fu_1995_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln542_3_fu_2027_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln543_3_fu_2107_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal zext_ln544_3_fu_2127_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln545_3_fu_2147_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal zext_ln546_3_fu_2167_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln547_3_fu_2187_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln548_3_fu_2207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln363_2_fu_2582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln450_6_fu_2587_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln540_2_fu_2621_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_4_fu_2654_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln542_4_fu_2665_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln543_4_fu_2675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal zext_ln544_4_fu_2685_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln545_4_fu_2695_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal zext_ln546_4_fu_2705_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln547_4_fu_2715_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln548_4_fu_2725_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln181_fu_2766_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln88_4_fu_2897_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_2_fu_2959_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln300_2_fu_3029_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln109_1_fu_3119_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln88_6_fu_3177_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal xor_ln450_fu_1630_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_1467_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal xor_ln450_2_fu_2614_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal trunc_ln541_fu_1654_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln541_1_fu_1972_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln417_fu_1934_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal xor_ln450_1_fu_1941_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln451_1_fu_1948_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln124_fu_2310_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln124_1_fu_2336_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln124_2_fu_2362_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln124_3_fu_2388_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln88_fu_2907_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_3339_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln48_1_fu_2538_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln52_1_fu_2564_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of sub_ln52_1_fu_2564_p2 : signal is "no";
    signal sub_ln109_fu_3125_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln88_2_fu_3183_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln541_2_fu_2642_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln69_1_fu_3309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1457_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln450_fu_1608_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_1612_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln450_fu_1620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln450_fu_1624_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_fu_1667_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln541_fu_1671_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln542_fu_1682_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln542_fu_1688_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln542_fu_1692_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln543_fu_1703_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln543_fu_1708_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln543_fu_1712_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln544_fu_1723_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln544_fu_1728_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln544_fu_1732_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln545_fu_1743_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln545_fu_1748_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln545_fu_1752_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln546_fu_1763_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln546_fu_1768_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln546_fu_1772_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln547_fu_1783_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln547_fu_1788_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln547_fu_1792_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln548_fu_1803_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln548_fu_1808_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln548_fu_1812_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln22_fu_1856_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln_fu_1880_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln31_fu_1888_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_fu_1892_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln31_fu_1906_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln23_fu_1910_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_19_fu_1902_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_20_fu_1918_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln31_fu_1922_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_2_fu_1985_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln541_1_fu_1989_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln542_1_fu_2011_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln542_2_fu_2017_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln542_1_fu_2021_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln543_1_fu_2092_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln543_2_fu_2097_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln543_1_fu_2101_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln544_1_fu_2112_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln544_2_fu_2117_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln544_1_fu_2121_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln545_1_fu_2132_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln545_2_fu_2137_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln545_1_fu_2141_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln546_1_fu_2152_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln546_2_fu_2157_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln546_1_fu_2161_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln547_1_fu_2172_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln547_2_fu_2177_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln547_1_fu_2181_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln548_1_fu_2192_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln548_2_fu_2197_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln548_1_fu_2201_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln22_fu_2236_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1129_fu_2429_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln226_fu_2453_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln226_fu_2457_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln42_fu_2467_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln10_fu_2473_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_3320_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln11_fu_2487_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln47_fu_2496_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln48_fu_2500_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_2506_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln48_fu_2514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln48_fu_2520_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal a1_1_fu_2528_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_3329_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln52_fu_2543_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 of sub_ln52_fu_2543_p2 : signal is "no";
    signal tmp_106_fu_2548_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_fu_2556_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln450_1_fu_2592_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln450_5_fu_2596_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln450_5_fu_2604_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln450_1_fu_2608_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln542_2_fu_2659_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln543_2_fu_2670_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln544_2_fu_2680_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln545_2_fu_2690_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln546_2_fu_2700_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln547_2_fu_2710_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln548_2_fu_2720_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1130_fu_2742_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln181_15_fu_2771_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln181_fu_2775_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln181_fu_2793_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln181_fu_2793_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln181_fu_2793_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln18_fu_2799_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_fu_2803_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln19_fu_2813_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln19_fu_2813_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal sext_ln19_14_fu_2819_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln19_fu_2823_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1131_fu_2864_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln88_fu_2888_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln88_3_fu_2892_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln88_fu_2903_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1132_fu_2926_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln33_fu_2950_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln33_fu_2954_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln36_fu_2964_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln12_fu_2970_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1133_fu_2996_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln300_fu_3020_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln300_fu_3024_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_107_fu_3034_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln301_fu_3050_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_16_fu_3042_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln301_fu_3056_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_17_fu_3062_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1134_fu_3086_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln109_fu_3110_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln109_fu_3114_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1135_fu_3144_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln88_5_fu_3168_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln88_4_fu_3172_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1136_fu_3202_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln249_fu_3232_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln249_fu_3236_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln248_fu_3247_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln69_2_fu_3269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_3_fu_3275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_1_fu_3263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln69_fu_3281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln69_fu_3287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_fu_3257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln69_1_fu_3293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln69_fu_3299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln69_fu_3305_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_3320_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_3320_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_3329_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_3339_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (117 downto 0);

    component pack_sig IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sig_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        sig_ce0 : OUT STD_LOGIC;
        sig_we0 : OUT STD_LOGIC;
        sig_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sig_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        sig_ce1 : OUT STD_LOGIC;
        sig_we1 : OUT STD_LOGIC;
        sig_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        z_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        z_vec_coeffs_ce0 : OUT STD_LOGIC;
        z_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        h_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        h_vec_coeffs_ce0 : OUT STD_LOGIC;
        h_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component poly_challenge IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        c_coeffs_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        c_coeffs_ce0 : OUT STD_LOGIC;
        c_coeffs_we0 : OUT STD_LOGIC;
        c_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        seed_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        seed_ce0 : OUT STD_LOGIC;
        seed_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component poly_uniform IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_we0 : OUT STD_LOGIC;
        a_coeffs_d0 : OUT STD_LOGIC_VECTOR (22 downto 0);
        a_coeffs_offset : IN STD_LOGIC_VECTOR (2 downto 0);
        a_coeffs_offset1 : IN STD_LOGIC_VECTOR (2 downto 0);
        seed_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        seed_ce0 : OUT STD_LOGIC;
        seed_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        nonce : IN STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component polyvecl_uniform_gam IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        v_vec_coeffs_ce0 : OUT STD_LOGIC;
        v_vec_coeffs_we0 : OUT STD_LOGIC;
        v_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        seed_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        seed_ce0 : OUT STD_LOGIC;
        seed_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        nonce : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component unpack_sk IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rho_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rho_ce0 : OUT STD_LOGIC;
        rho_we0 : OUT STD_LOGIC;
        rho_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        t0_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        t0_vec_coeffs_ce0 : OUT STD_LOGIC;
        t0_vec_coeffs_we0 : OUT STD_LOGIC;
        t0_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t0_vec_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        t0_vec_coeffs_ce1 : OUT STD_LOGIC;
        t0_vec_coeffs_we1 : OUT STD_LOGIC;
        t0_vec_coeffs_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        s1_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        s1_vec_coeffs_ce0 : OUT STD_LOGIC;
        s1_vec_coeffs_we0 : OUT STD_LOGIC;
        s1_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        s1_vec_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        s1_vec_coeffs_ce1 : OUT STD_LOGIC;
        s1_vec_coeffs_we1 : OUT STD_LOGIC;
        s1_vec_coeffs_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        s2_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        s2_vec_coeffs_ce0 : OUT STD_LOGIC;
        s2_vec_coeffs_we0 : OUT STD_LOGIC;
        s2_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        s2_vec_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        s2_vec_coeffs_ce1 : OUT STD_LOGIC;
        s2_vec_coeffs_we1 : OUT STD_LOGIC;
        s2_vec_coeffs_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        sk_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        sk_ce0 : OUT STD_LOGIC;
        sk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sk_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        sk_ce1 : OUT STD_LOGIC;
        sk_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component keccak_absorb_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce0 : OUT STD_LOGIC;
        s_we0 : OUT STD_LOGIC;
        s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce1 : OUT STD_LOGIC;
        s_we1 : OUT STD_LOGIC;
        s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        pos_r : IN STD_LOGIC_VECTOR (6 downto 0);
        m_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        m_ce0 : OUT STD_LOGIC;
        m_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        m_offset : IN STD_LOGIC_VECTOR (12 downto 0);
        mlen : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component KeccakF1600_StatePer_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component KeccakF1600_StatePer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_0_ce0 : OUT STD_LOGIC;
        state_0_we0 : OUT STD_LOGIC;
        state_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_0_ce1 : OUT STD_LOGIC;
        state_0_we1 : OUT STD_LOGIC;
        state_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component polyveck_invntt_tomo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        v_vec_coeffs_ce0 : OUT STD_LOGIC;
        v_vec_coeffs_we0 : OUT STD_LOGIC;
        v_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        v_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        v_vec_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        v_vec_coeffs_ce1 : OUT STD_LOGIC;
        v_vec_coeffs_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component invntt_tomont IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_we0 : OUT STD_LOGIC;
        a_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_ce1 : OUT STD_LOGIC;
        a_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_offset : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component ntt_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_we0 : OUT STD_LOGIC;
        a_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_ce1 : OUT STD_LOGIC;
        a_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ntt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_we0 : OUT STD_LOGIC;
        a_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_ce1 : OUT STD_LOGIC;
        a_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_offset : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component polyvecl_pointwise_a IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        w_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        w_coeffs_ce0 : OUT STD_LOGIC;
        w_coeffs_we0 : OUT STD_LOGIC;
        w_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_coeffs_offset : IN STD_LOGIC_VECTOR (2 downto 0);
        u_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        u_vec_coeffs_ce0 : OUT STD_LOGIC;
        u_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (22 downto 0);
        v_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        v_vec_coeffs_ce0 : OUT STD_LOGIC;
        v_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component keccak_absorb_3199 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce0 : OUT STD_LOGIC;
        s_we0 : OUT STD_LOGIC;
        s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        m_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_ce0 : OUT STD_LOGIC;
        m_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        m_offset : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component polyveck_pack_w1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        r_ce0 : OUT STD_LOGIC;
        r_we0 : OUT STD_LOGIC;
        r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        r_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        r_ce1 : OUT STD_LOGIC;
        r_we1 : OUT STD_LOGIC;
        r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        w1_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        w1_vec_coeffs_ce0 : OUT STD_LOGIC;
        w1_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w1_vec_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        w1_vec_coeffs_ce1 : OUT STD_LOGIC;
        w1_vec_coeffs_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component polyveck_pointwise_p IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_vec_coeffs_ce0 : OUT STD_LOGIC;
        r_vec_coeffs_we0 : OUT STD_LOGIC;
        r_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        v_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        v_vec_coeffs_ce0 : OUT STD_LOGIC;
        v_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component polyveck_chknorm IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        v_vec_coeffs_ce0 : OUT STD_LOGIC;
        v_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bound : IN STD_LOGIC_VECTOR (17 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component polyveck_caddq IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        v_vec_coeffs_ce0 : OUT STD_LOGIC;
        v_vec_coeffs_we0 : OUT STD_LOGIC;
        v_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        v_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component polyveck_reduce IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        v_vec_coeffs_ce0 : OUT STD_LOGIC;
        v_vec_coeffs_we0 : OUT STD_LOGIC;
        v_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        v_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_mac_mxdS IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        din2 : IN STD_LOGIC_VECTOR (24 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_mac_myd2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_mac_mibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component poly_uniform_statdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component crypto_sign_signalbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_sign_signamb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (22 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component crypto_sign_signancg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_signaocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (18 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component crypto_sign_signapcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_signatde IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_signavdy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    state_0_s_U : component poly_uniform_statdEe
    generic map (
        DataWidth => 64,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => state_0_s_address0,
        ce0 => state_0_s_ce0,
        we0 => state_0_s_we0,
        d0 => state_0_s_d0,
        q0 => state_0_s_q0,
        address1 => state_0_s_address1,
        ce1 => state_0_s_ce1,
        we1 => state_0_s_we1,
        d1 => state_0_s_d1,
        q1 => state_0_s_q1);

    seedbuf_U : component crypto_sign_signalbW
    generic map (
        DataWidth => 8,
        AddressRange => 208,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => seedbuf_address0,
        ce0 => seedbuf_ce0,
        we0 => seedbuf_we0,
        d0 => seedbuf_d0,
        q0 => seedbuf_q0,
        address1 => seedbuf_address1,
        ce1 => seedbuf_ce1,
        we1 => seedbuf_we1,
        d1 => seedbuf_d1);

    mat_vec_coeffs_U : component crypto_sign_signamb6
    generic map (
        DataWidth => 23,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mat_vec_coeffs_address0,
        ce0 => mat_vec_coeffs_ce0,
        we0 => mat_vec_coeffs_we0,
        d0 => grp_poly_uniform_fu_1305_a_coeffs_d0,
        q0 => mat_vec_coeffs_q0);

    s1_vec_coeffs_U : component crypto_sign_signancg
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => s1_vec_coeffs_address0,
        ce0 => s1_vec_coeffs_ce0,
        we0 => s1_vec_coeffs_we0,
        d0 => s1_vec_coeffs_d0,
        q0 => s1_vec_coeffs_q0,
        address1 => s1_vec_coeffs_address1,
        ce1 => s1_vec_coeffs_ce1,
        we1 => s1_vec_coeffs_we1,
        d1 => grp_unpack_sk_fu_1328_s1_vec_coeffs_d1,
        q1 => s1_vec_coeffs_q1);

    y_vec_coeffs_U : component crypto_sign_signaocq
    generic map (
        DataWidth => 19,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_vec_coeffs_address0,
        ce0 => y_vec_coeffs_ce0,
        we0 => y_vec_coeffs_we0,
        d0 => grp_polyvecl_uniform_gam_fu_1318_v_vec_coeffs_d0,
        q0 => y_vec_coeffs_q0);

    z_vec_coeffs_U : component crypto_sign_signapcA
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => z_vec_coeffs_address0,
        ce0 => z_vec_coeffs_ce0,
        we0 => z_vec_coeffs_we0,
        d0 => z_vec_coeffs_d0,
        q0 => z_vec_coeffs_q0,
        address1 => z_vec_coeffs_address1,
        ce1 => z_vec_coeffs_ce1,
        q1 => z_vec_coeffs_q1);

    t0_vec_coeffs_U : component crypto_sign_signancg
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t0_vec_coeffs_address0,
        ce0 => t0_vec_coeffs_ce0,
        we0 => t0_vec_coeffs_we0,
        d0 => t0_vec_coeffs_d0,
        q0 => t0_vec_coeffs_q0,
        address1 => t0_vec_coeffs_address1,
        ce1 => t0_vec_coeffs_ce1,
        we1 => t0_vec_coeffs_we1,
        d1 => grp_unpack_sk_fu_1328_t0_vec_coeffs_d1,
        q1 => t0_vec_coeffs_q1);

    s2_vec_coeffs_U : component crypto_sign_signancg
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => s2_vec_coeffs_address0,
        ce0 => s2_vec_coeffs_ce0,
        we0 => s2_vec_coeffs_we0,
        d0 => s2_vec_coeffs_d0,
        q0 => s2_vec_coeffs_q0,
        address1 => s2_vec_coeffs_address1,
        ce1 => s2_vec_coeffs_ce1,
        we1 => s2_vec_coeffs_we1,
        d1 => grp_unpack_sk_fu_1328_s2_vec_coeffs_d1,
        q1 => s2_vec_coeffs_q1);

    w1_vec_coeffs_U : component crypto_sign_signapcA
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w1_vec_coeffs_address0,
        ce0 => w1_vec_coeffs_ce0,
        we0 => w1_vec_coeffs_we0,
        d0 => w1_vec_coeffs_d0,
        q0 => w1_vec_coeffs_q0,
        address1 => w1_vec_coeffs_address1,
        ce1 => w1_vec_coeffs_ce1,
        q1 => w1_vec_coeffs_q1);

    w0_vec_coeffs_U : component crypto_sign_signatde
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w0_vec_coeffs_address0,
        ce0 => w0_vec_coeffs_ce0,
        we0 => w0_vec_coeffs_we0,
        d0 => w0_vec_coeffs_d0,
        q0 => w0_vec_coeffs_q0);

    h_vec_coeffs_U : component crypto_sign_signapcA
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => h_vec_coeffs_address0,
        ce0 => h_vec_coeffs_ce0,
        we0 => h_vec_coeffs_we0,
        d0 => h_vec_coeffs_d0,
        q0 => h_vec_coeffs_q0,
        address1 => grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_address1,
        ce1 => h_vec_coeffs_ce1,
        q1 => h_vec_coeffs_q1);

    cp_coeffs_U : component crypto_sign_signavdy
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cp_coeffs_address0,
        ce0 => cp_coeffs_ce0,
        we0 => cp_coeffs_we0,
        d0 => cp_coeffs_d0,
        q0 => cp_coeffs_q0,
        address1 => grp_ntt_1_fu_1388_a_address1,
        ce1 => cp_coeffs_ce1,
        q1 => cp_coeffs_q1);

    state_s_U : component poly_uniform_statdEe
    generic map (
        DataWidth => 64,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => state_s_address0,
        ce0 => state_s_ce0,
        we0 => state_s_we0,
        d0 => state_s_d0,
        q0 => state_s_q0,
        address1 => state_s_address1,
        ce1 => state_s_ce1,
        we1 => state_s_we1,
        d1 => state_s_d1,
        q1 => state_s_q1);

    grp_pack_sig_fu_1288 : component pack_sig
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pack_sig_fu_1288_ap_start,
        ap_done => grp_pack_sig_fu_1288_ap_done,
        ap_idle => grp_pack_sig_fu_1288_ap_idle,
        ap_ready => grp_pack_sig_fu_1288_ap_ready,
        sig_address0 => grp_pack_sig_fu_1288_sig_address0,
        sig_ce0 => grp_pack_sig_fu_1288_sig_ce0,
        sig_we0 => grp_pack_sig_fu_1288_sig_we0,
        sig_d0 => grp_pack_sig_fu_1288_sig_d0,
        sig_address1 => grp_pack_sig_fu_1288_sig_address1,
        sig_ce1 => grp_pack_sig_fu_1288_sig_ce1,
        sig_we1 => grp_pack_sig_fu_1288_sig_we1,
        sig_d1 => grp_pack_sig_fu_1288_sig_d1,
        z_vec_coeffs_address0 => grp_pack_sig_fu_1288_z_vec_coeffs_address0,
        z_vec_coeffs_ce0 => grp_pack_sig_fu_1288_z_vec_coeffs_ce0,
        z_vec_coeffs_q0 => z_vec_coeffs_q0,
        h_vec_coeffs_address0 => grp_pack_sig_fu_1288_h_vec_coeffs_address0,
        h_vec_coeffs_ce0 => grp_pack_sig_fu_1288_h_vec_coeffs_ce0,
        h_vec_coeffs_q0 => h_vec_coeffs_q0);

    grp_poly_challenge_fu_1296 : component poly_challenge
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_challenge_fu_1296_ap_start,
        ap_done => grp_poly_challenge_fu_1296_ap_done,
        ap_idle => grp_poly_challenge_fu_1296_ap_idle,
        ap_ready => grp_poly_challenge_fu_1296_ap_ready,
        c_coeffs_address0 => grp_poly_challenge_fu_1296_c_coeffs_address0,
        c_coeffs_ce0 => grp_poly_challenge_fu_1296_c_coeffs_ce0,
        c_coeffs_we0 => grp_poly_challenge_fu_1296_c_coeffs_we0,
        c_coeffs_d0 => grp_poly_challenge_fu_1296_c_coeffs_d0,
        c_coeffs_q0 => cp_coeffs_q0,
        seed_address0 => grp_poly_challenge_fu_1296_seed_address0,
        seed_ce0 => grp_poly_challenge_fu_1296_seed_ce0,
        seed_q0 => sig_q0);

    grp_poly_uniform_fu_1305 : component poly_uniform
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_uniform_fu_1305_ap_start,
        ap_done => grp_poly_uniform_fu_1305_ap_done,
        ap_idle => grp_poly_uniform_fu_1305_ap_idle,
        ap_ready => grp_poly_uniform_fu_1305_ap_ready,
        a_coeffs_address0 => grp_poly_uniform_fu_1305_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_uniform_fu_1305_a_coeffs_ce0,
        a_coeffs_we0 => grp_poly_uniform_fu_1305_a_coeffs_we0,
        a_coeffs_d0 => grp_poly_uniform_fu_1305_a_coeffs_d0,
        a_coeffs_offset => i_0_i_reg_914,
        a_coeffs_offset1 => j_0_i_reg_926,
        seed_address0 => grp_poly_uniform_fu_1305_seed_address0,
        seed_ce0 => grp_poly_uniform_fu_1305_seed_ce0,
        seed_q0 => seedbuf_q0,
        nonce => add_ln_reg_3525);

    grp_polyvecl_uniform_gam_fu_1318 : component polyvecl_uniform_gam
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_polyvecl_uniform_gam_fu_1318_ap_start,
        ap_done => grp_polyvecl_uniform_gam_fu_1318_ap_done,
        ap_idle => grp_polyvecl_uniform_gam_fu_1318_ap_idle,
        ap_ready => grp_polyvecl_uniform_gam_fu_1318_ap_ready,
        v_vec_coeffs_address0 => grp_polyvecl_uniform_gam_fu_1318_v_vec_coeffs_address0,
        v_vec_coeffs_ce0 => grp_polyvecl_uniform_gam_fu_1318_v_vec_coeffs_ce0,
        v_vec_coeffs_we0 => grp_polyvecl_uniform_gam_fu_1318_v_vec_coeffs_we0,
        v_vec_coeffs_d0 => grp_polyvecl_uniform_gam_fu_1318_v_vec_coeffs_d0,
        seed_address0 => grp_polyvecl_uniform_gam_fu_1318_seed_address0,
        seed_ce0 => grp_polyvecl_uniform_gam_fu_1318_seed_ce0,
        seed_q0 => seedbuf_q0,
        nonce => nonce_0_reg_974);

    grp_unpack_sk_fu_1328 : component unpack_sk
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_unpack_sk_fu_1328_ap_start,
        ap_done => grp_unpack_sk_fu_1328_ap_done,
        ap_idle => grp_unpack_sk_fu_1328_ap_idle,
        ap_ready => grp_unpack_sk_fu_1328_ap_ready,
        rho_address0 => grp_unpack_sk_fu_1328_rho_address0,
        rho_ce0 => grp_unpack_sk_fu_1328_rho_ce0,
        rho_we0 => grp_unpack_sk_fu_1328_rho_we0,
        rho_d0 => grp_unpack_sk_fu_1328_rho_d0,
        t0_vec_coeffs_address0 => grp_unpack_sk_fu_1328_t0_vec_coeffs_address0,
        t0_vec_coeffs_ce0 => grp_unpack_sk_fu_1328_t0_vec_coeffs_ce0,
        t0_vec_coeffs_we0 => grp_unpack_sk_fu_1328_t0_vec_coeffs_we0,
        t0_vec_coeffs_d0 => grp_unpack_sk_fu_1328_t0_vec_coeffs_d0,
        t0_vec_coeffs_address1 => grp_unpack_sk_fu_1328_t0_vec_coeffs_address1,
        t0_vec_coeffs_ce1 => grp_unpack_sk_fu_1328_t0_vec_coeffs_ce1,
        t0_vec_coeffs_we1 => grp_unpack_sk_fu_1328_t0_vec_coeffs_we1,
        t0_vec_coeffs_d1 => grp_unpack_sk_fu_1328_t0_vec_coeffs_d1,
        s1_vec_coeffs_address0 => grp_unpack_sk_fu_1328_s1_vec_coeffs_address0,
        s1_vec_coeffs_ce0 => grp_unpack_sk_fu_1328_s1_vec_coeffs_ce0,
        s1_vec_coeffs_we0 => grp_unpack_sk_fu_1328_s1_vec_coeffs_we0,
        s1_vec_coeffs_d0 => grp_unpack_sk_fu_1328_s1_vec_coeffs_d0,
        s1_vec_coeffs_address1 => grp_unpack_sk_fu_1328_s1_vec_coeffs_address1,
        s1_vec_coeffs_ce1 => grp_unpack_sk_fu_1328_s1_vec_coeffs_ce1,
        s1_vec_coeffs_we1 => grp_unpack_sk_fu_1328_s1_vec_coeffs_we1,
        s1_vec_coeffs_d1 => grp_unpack_sk_fu_1328_s1_vec_coeffs_d1,
        s2_vec_coeffs_address0 => grp_unpack_sk_fu_1328_s2_vec_coeffs_address0,
        s2_vec_coeffs_ce0 => grp_unpack_sk_fu_1328_s2_vec_coeffs_ce0,
        s2_vec_coeffs_we0 => grp_unpack_sk_fu_1328_s2_vec_coeffs_we0,
        s2_vec_coeffs_d0 => grp_unpack_sk_fu_1328_s2_vec_coeffs_d0,
        s2_vec_coeffs_address1 => grp_unpack_sk_fu_1328_s2_vec_coeffs_address1,
        s2_vec_coeffs_ce1 => grp_unpack_sk_fu_1328_s2_vec_coeffs_ce1,
        s2_vec_coeffs_we1 => grp_unpack_sk_fu_1328_s2_vec_coeffs_we1,
        s2_vec_coeffs_d1 => grp_unpack_sk_fu_1328_s2_vec_coeffs_d1,
        sk_address0 => grp_unpack_sk_fu_1328_sk_address0,
        sk_ce0 => grp_unpack_sk_fu_1328_sk_ce0,
        sk_q0 => sk_q0,
        sk_address1 => grp_unpack_sk_fu_1328_sk_address1,
        sk_ce1 => grp_unpack_sk_fu_1328_sk_ce1,
        sk_q1 => sk_q1);

    grp_keccak_absorb_2_fu_1342 : component keccak_absorb_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_keccak_absorb_2_fu_1342_ap_start,
        ap_done => grp_keccak_absorb_2_fu_1342_ap_done,
        ap_idle => grp_keccak_absorb_2_fu_1342_ap_idle,
        ap_ready => grp_keccak_absorb_2_fu_1342_ap_ready,
        s_address0 => grp_keccak_absorb_2_fu_1342_s_address0,
        s_ce0 => grp_keccak_absorb_2_fu_1342_s_ce0,
        s_we0 => grp_keccak_absorb_2_fu_1342_s_we0,
        s_d0 => grp_keccak_absorb_2_fu_1342_s_d0,
        s_q0 => state_s_q0,
        s_address1 => grp_keccak_absorb_2_fu_1342_s_address1,
        s_ce1 => grp_keccak_absorb_2_fu_1342_s_ce1,
        s_we1 => grp_keccak_absorb_2_fu_1342_s_we1,
        s_d1 => grp_keccak_absorb_2_fu_1342_s_d1,
        s_q1 => state_s_q1,
        pos_r => ap_const_lv7_30,
        m_address0 => grp_keccak_absorb_2_fu_1342_m_address0,
        m_ce0 => grp_keccak_absorb_2_fu_1342_m_ce0,
        m_q0 => sig_q0,
        m_offset => grp_keccak_absorb_2_fu_1342_m_offset,
        mlen => grp_keccak_absorb_2_fu_1342_mlen,
        ap_return => grp_keccak_absorb_2_fu_1342_ap_return);

    grp_KeccakF1600_StatePer_1_fu_1358 : component KeccakF1600_StatePer_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePer_1_fu_1358_ap_start,
        ap_done => grp_KeccakF1600_StatePer_1_fu_1358_ap_done,
        ap_idle => grp_KeccakF1600_StatePer_1_fu_1358_ap_idle,
        ap_ready => grp_KeccakF1600_StatePer_1_fu_1358_ap_ready,
        state_address0 => grp_KeccakF1600_StatePer_1_fu_1358_state_address0,
        state_ce0 => grp_KeccakF1600_StatePer_1_fu_1358_state_ce0,
        state_we0 => grp_KeccakF1600_StatePer_1_fu_1358_state_we0,
        state_d0 => grp_KeccakF1600_StatePer_1_fu_1358_state_d0,
        state_q0 => state_s_q0,
        state_address1 => grp_KeccakF1600_StatePer_1_fu_1358_state_address1,
        state_ce1 => grp_KeccakF1600_StatePer_1_fu_1358_state_ce1,
        state_we1 => grp_KeccakF1600_StatePer_1_fu_1358_state_we1,
        state_d1 => grp_KeccakF1600_StatePer_1_fu_1358_state_d1,
        state_q1 => state_s_q1);

    grp_KeccakF1600_StatePer_fu_1365 : component KeccakF1600_StatePer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePer_fu_1365_ap_start,
        ap_done => grp_KeccakF1600_StatePer_fu_1365_ap_done,
        ap_idle => grp_KeccakF1600_StatePer_fu_1365_ap_idle,
        ap_ready => grp_KeccakF1600_StatePer_fu_1365_ap_ready,
        state_0_address0 => grp_KeccakF1600_StatePer_fu_1365_state_0_address0,
        state_0_ce0 => grp_KeccakF1600_StatePer_fu_1365_state_0_ce0,
        state_0_we0 => grp_KeccakF1600_StatePer_fu_1365_state_0_we0,
        state_0_d0 => grp_KeccakF1600_StatePer_fu_1365_state_0_d0,
        state_0_q0 => state_0_s_q0,
        state_0_address1 => grp_KeccakF1600_StatePer_fu_1365_state_0_address1,
        state_0_ce1 => grp_KeccakF1600_StatePer_fu_1365_state_0_ce1,
        state_0_we1 => grp_KeccakF1600_StatePer_fu_1365_state_0_we1,
        state_0_d1 => grp_KeccakF1600_StatePer_fu_1365_state_0_d1,
        state_0_q1 => state_0_s_q1);

    grp_polyveck_invntt_tomo_fu_1372 : component polyveck_invntt_tomo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_polyveck_invntt_tomo_fu_1372_ap_start,
        ap_done => grp_polyveck_invntt_tomo_fu_1372_ap_done,
        ap_idle => grp_polyveck_invntt_tomo_fu_1372_ap_idle,
        ap_ready => grp_polyveck_invntt_tomo_fu_1372_ap_ready,
        v_vec_coeffs_address0 => grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_address0,
        v_vec_coeffs_ce0 => grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_ce0,
        v_vec_coeffs_we0 => grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_we0,
        v_vec_coeffs_d0 => grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_d0,
        v_vec_coeffs_q0 => grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_q0,
        v_vec_coeffs_address1 => grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_address1,
        v_vec_coeffs_ce1 => grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_ce1,
        v_vec_coeffs_q1 => grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_q1);

    grp_invntt_tomont_fu_1379 : component invntt_tomont
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_invntt_tomont_fu_1379_ap_start,
        ap_done => grp_invntt_tomont_fu_1379_ap_done,
        ap_idle => grp_invntt_tomont_fu_1379_ap_idle,
        ap_ready => grp_invntt_tomont_fu_1379_ap_ready,
        a_address0 => grp_invntt_tomont_fu_1379_a_address0,
        a_ce0 => grp_invntt_tomont_fu_1379_a_ce0,
        a_we0 => grp_invntt_tomont_fu_1379_a_we0,
        a_d0 => grp_invntt_tomont_fu_1379_a_d0,
        a_q0 => z_vec_coeffs_q0,
        a_address1 => grp_invntt_tomont_fu_1379_a_address1,
        a_ce1 => grp_invntt_tomont_fu_1379_a_ce1,
        a_q1 => z_vec_coeffs_q1,
        a_offset => i_0_i49_reg_1120);

    grp_ntt_1_fu_1388 : component ntt_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ntt_1_fu_1388_ap_start,
        ap_done => grp_ntt_1_fu_1388_ap_done,
        ap_idle => grp_ntt_1_fu_1388_ap_idle,
        ap_ready => grp_ntt_1_fu_1388_ap_ready,
        a_address0 => grp_ntt_1_fu_1388_a_address0,
        a_ce0 => grp_ntt_1_fu_1388_a_ce0,
        a_we0 => grp_ntt_1_fu_1388_a_we0,
        a_d0 => grp_ntt_1_fu_1388_a_d0,
        a_q0 => cp_coeffs_q0,
        a_address1 => grp_ntt_1_fu_1388_a_address1,
        a_ce1 => grp_ntt_1_fu_1388_a_ce1,
        a_q1 => cp_coeffs_q1);

    grp_ntt_fu_1395 : component ntt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ntt_fu_1395_ap_start,
        ap_done => grp_ntt_fu_1395_ap_done,
        ap_idle => grp_ntt_fu_1395_ap_idle,
        ap_ready => grp_ntt_fu_1395_ap_ready,
        a_address0 => grp_ntt_fu_1395_a_address0,
        a_ce0 => grp_ntt_fu_1395_a_ce0,
        a_we0 => grp_ntt_fu_1395_a_we0,
        a_d0 => grp_ntt_fu_1395_a_d0,
        a_q0 => grp_ntt_fu_1395_a_q0,
        a_address1 => grp_ntt_fu_1395_a_address1,
        a_ce1 => grp_ntt_fu_1395_a_ce1,
        a_q1 => grp_ntt_fu_1395_a_q1,
        a_offset => grp_ntt_fu_1395_a_offset);

    grp_polyvecl_pointwise_a_fu_1407 : component polyvecl_pointwise_a
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_polyvecl_pointwise_a_fu_1407_ap_start,
        ap_done => grp_polyvecl_pointwise_a_fu_1407_ap_done,
        ap_idle => grp_polyvecl_pointwise_a_fu_1407_ap_idle,
        ap_ready => grp_polyvecl_pointwise_a_fu_1407_ap_ready,
        w_coeffs_address0 => grp_polyvecl_pointwise_a_fu_1407_w_coeffs_address0,
        w_coeffs_ce0 => grp_polyvecl_pointwise_a_fu_1407_w_coeffs_ce0,
        w_coeffs_we0 => grp_polyvecl_pointwise_a_fu_1407_w_coeffs_we0,
        w_coeffs_d0 => grp_polyvecl_pointwise_a_fu_1407_w_coeffs_d0,
        w_coeffs_q0 => w1_vec_coeffs_q0,
        w_coeffs_offset => i_0_i17_reg_1042,
        u_vec_coeffs_address0 => grp_polyvecl_pointwise_a_fu_1407_u_vec_coeffs_address0,
        u_vec_coeffs_ce0 => grp_polyvecl_pointwise_a_fu_1407_u_vec_coeffs_ce0,
        u_vec_coeffs_q0 => mat_vec_coeffs_q0,
        v_vec_coeffs_address0 => grp_polyvecl_pointwise_a_fu_1407_v_vec_coeffs_address0,
        v_vec_coeffs_ce0 => grp_polyvecl_pointwise_a_fu_1407_v_vec_coeffs_ce0,
        v_vec_coeffs_q0 => z_vec_coeffs_q0);

    grp_keccak_absorb_3199_fu_1416 : component keccak_absorb_3199
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_keccak_absorb_3199_fu_1416_ap_start,
        ap_done => grp_keccak_absorb_3199_fu_1416_ap_done,
        ap_idle => grp_keccak_absorb_3199_fu_1416_ap_idle,
        ap_ready => grp_keccak_absorb_3199_fu_1416_ap_ready,
        s_address0 => grp_keccak_absorb_3199_fu_1416_s_address0,
        s_ce0 => grp_keccak_absorb_3199_fu_1416_s_ce0,
        s_we0 => grp_keccak_absorb_3199_fu_1416_s_we0,
        s_d0 => grp_keccak_absorb_3199_fu_1416_s_d0,
        s_q0 => state_s_q0,
        m_address0 => grp_keccak_absorb_3199_fu_1416_m_address0,
        m_ce0 => grp_keccak_absorb_3199_fu_1416_m_ce0,
        m_q0 => seedbuf_q0,
        m_offset => grp_keccak_absorb_3199_fu_1416_m_offset);

    grp_polyveck_pack_w1_fu_1425 : component polyveck_pack_w1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_polyveck_pack_w1_fu_1425_ap_start,
        ap_done => grp_polyveck_pack_w1_fu_1425_ap_done,
        ap_idle => grp_polyveck_pack_w1_fu_1425_ap_idle,
        ap_ready => grp_polyveck_pack_w1_fu_1425_ap_ready,
        r_address0 => grp_polyveck_pack_w1_fu_1425_r_address0,
        r_ce0 => grp_polyveck_pack_w1_fu_1425_r_ce0,
        r_we0 => grp_polyveck_pack_w1_fu_1425_r_we0,
        r_d0 => grp_polyveck_pack_w1_fu_1425_r_d0,
        r_address1 => grp_polyveck_pack_w1_fu_1425_r_address1,
        r_ce1 => grp_polyveck_pack_w1_fu_1425_r_ce1,
        r_we1 => grp_polyveck_pack_w1_fu_1425_r_we1,
        r_d1 => grp_polyveck_pack_w1_fu_1425_r_d1,
        w1_vec_coeffs_address0 => grp_polyveck_pack_w1_fu_1425_w1_vec_coeffs_address0,
        w1_vec_coeffs_ce0 => grp_polyveck_pack_w1_fu_1425_w1_vec_coeffs_ce0,
        w1_vec_coeffs_q0 => w1_vec_coeffs_q0,
        w1_vec_coeffs_address1 => grp_polyveck_pack_w1_fu_1425_w1_vec_coeffs_address1,
        w1_vec_coeffs_ce1 => grp_polyveck_pack_w1_fu_1425_w1_vec_coeffs_ce1,
        w1_vec_coeffs_q1 => w1_vec_coeffs_q1);

    grp_polyveck_pointwise_p_fu_1432 : component polyveck_pointwise_p
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_polyveck_pointwise_p_fu_1432_ap_start,
        ap_done => grp_polyveck_pointwise_p_fu_1432_ap_done,
        ap_idle => grp_polyveck_pointwise_p_fu_1432_ap_idle,
        ap_ready => grp_polyveck_pointwise_p_fu_1432_ap_ready,
        r_vec_coeffs_address0 => grp_polyveck_pointwise_p_fu_1432_r_vec_coeffs_address0,
        r_vec_coeffs_ce0 => grp_polyveck_pointwise_p_fu_1432_r_vec_coeffs_ce0,
        r_vec_coeffs_we0 => grp_polyveck_pointwise_p_fu_1432_r_vec_coeffs_we0,
        r_vec_coeffs_d0 => grp_polyveck_pointwise_p_fu_1432_r_vec_coeffs_d0,
        a_coeffs_address0 => grp_polyveck_pointwise_p_fu_1432_a_coeffs_address0,
        a_coeffs_ce0 => grp_polyveck_pointwise_p_fu_1432_a_coeffs_ce0,
        a_coeffs_q0 => cp_coeffs_q0,
        v_vec_coeffs_address0 => grp_polyveck_pointwise_p_fu_1432_v_vec_coeffs_address0,
        v_vec_coeffs_ce0 => grp_polyveck_pointwise_p_fu_1432_v_vec_coeffs_ce0,
        v_vec_coeffs_q0 => grp_polyveck_pointwise_p_fu_1432_v_vec_coeffs_q0);

    grp_polyveck_chknorm_fu_1439 : component polyveck_chknorm
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_polyveck_chknorm_fu_1439_ap_start,
        ap_done => grp_polyveck_chknorm_fu_1439_ap_done,
        ap_idle => grp_polyveck_chknorm_fu_1439_ap_idle,
        ap_ready => grp_polyveck_chknorm_fu_1439_ap_ready,
        v_vec_coeffs_address0 => grp_polyveck_chknorm_fu_1439_v_vec_coeffs_address0,
        v_vec_coeffs_ce0 => grp_polyveck_chknorm_fu_1439_v_vec_coeffs_ce0,
        v_vec_coeffs_q0 => grp_polyveck_chknorm_fu_1439_v_vec_coeffs_q0,
        bound => grp_polyveck_chknorm_fu_1439_bound,
        ap_return => grp_polyveck_chknorm_fu_1439_ap_return);

    grp_polyveck_caddq_fu_1447 : component polyveck_caddq
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_polyveck_caddq_fu_1447_ap_start,
        ap_done => grp_polyveck_caddq_fu_1447_ap_done,
        ap_idle => grp_polyveck_caddq_fu_1447_ap_idle,
        ap_ready => grp_polyveck_caddq_fu_1447_ap_ready,
        v_vec_coeffs_address0 => grp_polyveck_caddq_fu_1447_v_vec_coeffs_address0,
        v_vec_coeffs_ce0 => grp_polyveck_caddq_fu_1447_v_vec_coeffs_ce0,
        v_vec_coeffs_we0 => grp_polyveck_caddq_fu_1447_v_vec_coeffs_we0,
        v_vec_coeffs_d0 => grp_polyveck_caddq_fu_1447_v_vec_coeffs_d0,
        v_vec_coeffs_q0 => grp_polyveck_caddq_fu_1447_v_vec_coeffs_q0);

    grp_polyveck_reduce_fu_1452 : component polyveck_reduce
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_polyveck_reduce_fu_1452_ap_start,
        ap_done => grp_polyveck_reduce_fu_1452_ap_done,
        ap_idle => grp_polyveck_reduce_fu_1452_ap_idle,
        ap_ready => grp_polyveck_reduce_fu_1452_ap_ready,
        v_vec_coeffs_address0 => grp_polyveck_reduce_fu_1452_v_vec_coeffs_address0,
        v_vec_coeffs_ce0 => grp_polyveck_reduce_fu_1452_v_vec_coeffs_ce0,
        v_vec_coeffs_we0 => grp_polyveck_reduce_fu_1452_v_vec_coeffs_we0,
        v_vec_coeffs_d0 => grp_polyveck_reduce_fu_1452_v_vec_coeffs_d0,
        v_vec_coeffs_q0 => grp_polyveck_reduce_fu_1452_v_vec_coeffs_q0);

    crypto_sign_mac_mxdS_U97 : component crypto_sign_mac_mxdS
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 25,
        din2_WIDTH => 25,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_3320_p0,
        din1 => trunc_ln10_fu_2473_p4,
        din2 => grp_fu_3320_p2,
        dout => grp_fu_3320_p3);

    crypto_sign_mac_myd2_U98 : component crypto_sign_mac_myd2
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_3329_p0,
        din1 => a1_1_fu_2528_p2,
        din2 => w1_vec_coeffs_q0,
        dout => grp_fu_3329_p3);

    crypto_sign_mac_mibs_U99 : component crypto_sign_mac_mibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 24,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => trunc_ln12_fu_2970_p4,
        din1 => grp_fu_3339_p1,
        din2 => z_vec_coeffs_q0,
        dout => grp_fu_3339_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_1_fu_1358_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_1_fu_1358_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    grp_KeccakF1600_StatePer_1_fu_1358_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_1_fu_1358_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_1_fu_1358_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_fu_1365_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_fu_1365_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                    grp_KeccakF1600_StatePer_fu_1365_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_fu_1365_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_fu_1365_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_invntt_tomont_fu_1379_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_invntt_tomont_fu_1379_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln107_fu_2840_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state84))) then 
                    grp_invntt_tomont_fu_1379_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_invntt_tomont_fu_1379_ap_ready = ap_const_logic_1)) then 
                    grp_invntt_tomont_fu_1379_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_keccak_absorb_2_fu_1342_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_keccak_absorb_2_fu_1342_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_keccak_absorb_2_fu_1342_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_keccak_absorb_2_fu_1342_ap_ready = ap_const_logic_1)) then 
                    grp_keccak_absorb_2_fu_1342_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_keccak_absorb_3199_fu_1416_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_keccak_absorb_3199_fu_1416_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln362_2_fu_2570_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state63)) or ((icmp_ln362_fu_1586_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    grp_keccak_absorb_3199_fu_1416_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_keccak_absorb_3199_fu_1416_ap_ready = ap_const_logic_1)) then 
                    grp_keccak_absorb_3199_fu_1416_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ntt_1_fu_1388_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ntt_1_fu_1388_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
                    grp_ntt_1_fu_1388_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ntt_1_fu_1388_ap_ready = ap_const_logic_1)) then 
                    grp_ntt_1_fu_1388_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ntt_fu_1395_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ntt_fu_1395_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln100_1_fu_2393_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((icmp_ln284_1_fu_2275_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38)) or ((icmp_ln284_fu_2263_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((icmp_ln100_fu_2251_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state34)))) then 
                    grp_ntt_fu_1395_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ntt_fu_1395_ap_ready = ap_const_logic_1)) then 
                    grp_ntt_fu_1395_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pack_sig_fu_1288_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pack_sig_fu_1288_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln394_fu_3190_p2 = ap_const_lv1_1) and (icmp_ln158_reg_3824 = ap_const_lv1_1) and (tmp_71_reg_3889 = ap_const_lv1_0) and (tmp_62_reg_3885 = ap_const_lv1_0) and (icmp_ln172_fu_3214_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state115))) then 
                    grp_pack_sig_fu_1288_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pack_sig_fu_1288_ap_ready = ap_const_logic_1)) then 
                    grp_pack_sig_fu_1288_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_challenge_fu_1296_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_challenge_fu_1296_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln540_2_fu_2626_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then 
                    grp_poly_challenge_fu_1296_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_challenge_fu_1296_ap_ready = ap_const_logic_1)) then 
                    grp_poly_challenge_fu_1296_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_uniform_fu_1305_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_uniform_fu_1305_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln21_fu_2224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                    grp_poly_uniform_fu_1305_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_uniform_fu_1305_ap_ready = ap_const_logic_1)) then 
                    grp_poly_uniform_fu_1305_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_polyveck_caddq_fu_1447_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_polyveck_caddq_fu_1447_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state57) or ((icmp_ln236_fu_3132_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state111)))) then 
                    grp_polyveck_caddq_fu_1447_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_polyveck_caddq_fu_1447_ap_ready = ap_const_logic_1)) then 
                    grp_polyveck_caddq_fu_1447_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_polyveck_chknorm_fu_1439_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_polyveck_chknorm_fu_1439_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state102))) then 
                    grp_polyveck_chknorm_fu_1439_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_polyveck_chknorm_fu_1439_ap_ready = ap_const_logic_1)) then 
                    grp_polyveck_chknorm_fu_1439_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_polyveck_invntt_tomo_fu_1372_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_polyveck_invntt_tomo_fu_1372_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
                    grp_polyveck_invntt_tomo_fu_1372_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_polyveck_invntt_tomo_fu_1372_ap_ready = ap_const_logic_1)) then 
                    grp_polyveck_invntt_tomo_fu_1372_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_polyveck_pack_w1_fu_1425_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_polyveck_pack_w1_fu_1425_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln373_fu_2417_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
                    grp_polyveck_pack_w1_fu_1425_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_polyveck_pack_w1_fu_1425_ap_ready = ap_const_logic_1)) then 
                    grp_polyveck_pack_w1_fu_1425_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_polyveck_pointwise_p_fu_1432_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_polyveck_pointwise_p_fu_1432_ap_start_reg <= ap_const_logic_0;
            else
                if ((((grp_polyveck_chknorm_fu_1439_ap_done = ap_const_logic_1) and (grp_polyveck_chknorm_fu_1439_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state103)) or ((icmp_ln158_fu_2984_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state92)))) then 
                    grp_polyveck_pointwise_p_fu_1432_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_polyveck_pointwise_p_fu_1432_ap_ready = ap_const_logic_1)) then 
                    grp_polyveck_pointwise_p_fu_1432_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_polyveck_reduce_fu_1452_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_polyveck_reduce_fu_1452_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state107) or ((icmp_ln254_fu_3074_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state98)) or ((icmp_ln28_fu_2405_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52)))) then 
                    grp_polyveck_reduce_fu_1452_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_polyveck_reduce_fu_1452_ap_ready = ap_const_logic_1)) then 
                    grp_polyveck_reduce_fu_1452_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_polyvecl_pointwise_a_fu_1407_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_polyvecl_pointwise_a_fu_1407_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln28_fu_2405_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                    grp_polyvecl_pointwise_a_fu_1407_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_polyvecl_pointwise_a_fu_1407_ap_ready = ap_const_logic_1)) then 
                    grp_polyvecl_pointwise_a_fu_1407_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_polyvecl_uniform_gam_fu_1318_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_polyvecl_uniform_gam_fu_1318_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                    grp_polyvecl_uniform_gam_fu_1318_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_polyvecl_uniform_gam_fu_1318_ap_ready = ap_const_logic_1)) then 
                    grp_polyvecl_uniform_gam_fu_1318_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_unpack_sk_fu_1328_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_unpack_sk_fu_1328_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_unpack_sk_fu_1328_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_unpack_sk_fu_1328_ap_ready = ap_const_logic_1)) then 
                    grp_unpack_sk_fu_1328_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i12_reg_1030_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln124_3_reg_3631 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                i_0_i12_reg_1030 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state51) and (grp_ntt_fu_1395_ap_done = ap_const_logic_1))) then 
                i_0_i12_reg_1030 <= i_73_reg_3638;
            end if; 
        end if;
    end process;

    i_0_i17_reg_1042_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_1_fu_2393_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                i_0_i17_reg_1042 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state53) and (grp_polyvecl_pointwise_a_fu_1407_ap_done = ap_const_logic_1))) then 
                i_0_i17_reg_1042 <= i_74_reg_3646;
            end if; 
        end if;
    end process;

    i_0_i19_reg_1054_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln225_fu_2441_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state60))) then 
                i_0_i19_reg_1054 <= i_75_reg_3654;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state58) and (grp_polyveck_caddq_fu_1447_ap_done = ap_const_logic_1))) then 
                i_0_i19_reg_1054 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_i3_reg_938_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_2212_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                i_0_i3_reg_938 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state35) and (grp_ntt_fu_1395_ap_done = ap_const_logic_1))) then 
                i_0_i3_reg_938 <= i_70_reg_3533;
            end if; 
        end if;
    end process;

    i_0_i43_reg_1098_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln180_fu_2754_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state82))) then 
                i_0_i43_reg_1098 <= i_78_reg_3726;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state80) and (grp_ntt_1_fu_1388_ap_done = ap_const_logic_1))) then 
                i_0_i43_reg_1098 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_i49_reg_1120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln114_fu_2730_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then 
                i_0_i49_reg_1120 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state85) and (grp_invntt_tomont_fu_1379_ap_done = ap_const_logic_1))) then 
                i_0_i49_reg_1120 <= i_79_reg_3762;
            end if; 
        end if;
    end process;

    i_0_i51_reg_1132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln107_fu_2840_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then 
                i_0_i51_reg_1132 <= ap_const_lv3_0;
            elsif (((icmp_ln87_fu_2876_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state87))) then 
                i_0_i51_reg_1132 <= i_81_reg_3770;
            end if; 
        end if;
    end process;

    i_0_i59_reg_1154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln85_fu_2852_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state86))) then 
                i_0_i59_reg_1154 <= ap_const_lv3_0;
            elsif (((icmp_ln32_fu_2938_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state90))) then 
                i_0_i59_reg_1154 <= i_82_reg_3801;
            end if; 
        end if;
    end process;

    i_0_i5_i_reg_878_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                i_0_i5_i_reg_878 <= i_45_reg_3435;
            elsif (((icmp_ln416_fu_1844_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                i_0_i5_i_reg_878 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_0_i5_reg_950_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_fu_2251_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                i_0_i5_reg_950 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state37) and (grp_ntt_fu_1395_ap_done = ap_const_logic_1))) then 
                i_0_i5_reg_950 <= i_71_reg_3541;
            end if; 
        end if;
    end process;

    i_0_i66_reg_1198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln108_fu_3098_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state99))) then 
                i_0_i66_reg_1198 <= i_86_reg_3857;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state97) and (grp_polyveck_invntt_tomo_fu_1372_ap_done = ap_const_logic_1))) then 
                i_0_i66_reg_1198 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_i74_reg_1220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_polyveck_chknorm_fu_1439_ap_done = ap_const_logic_1) and (grp_polyveck_chknorm_fu_1439_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state110))) then 
                i_0_i74_reg_1220 <= ap_const_lv3_0;
            elsif (((icmp_ln87_1_fu_3156_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state112))) then 
                i_0_i74_reg_1220 <= i_89_reg_3896;
            end if; 
        end if;
    end process;

    i_0_i7_reg_962_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln284_fu_2263_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                i_0_i7_reg_962 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state39) and (grp_ntt_fu_1395_ap_done = ap_const_logic_1))) then 
                i_0_i7_reg_962 <= i_72_reg_3549;
            end if; 
        end if;
    end process;

    i_0_i85_reg_1176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_2914_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state89))) then 
                i_0_i85_reg_1176 <= ap_const_lv3_0;
            elsif (((icmp_ln298_fu_3008_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then 
                i_0_i85_reg_1176 <= i_84_reg_3828;
            end if; 
        end if;
    end process;

    i_0_i87_reg_1242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln248_fu_3220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state116))) then 
                i_0_i87_reg_1242 <= i_91_reg_3927;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state114) and (grp_polyveck_caddq_fu_1447_ap_done = ap_const_logic_1))) then 
                i_0_i87_reg_1242 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_i_i20_reg_1065_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
                i_0_i_i20_reg_1065 <= i_77_reg_3667;
            elsif (((icmp_ln373_fu_2417_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
                i_0_i_i20_reg_1065 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_0_i_i23_reg_1076_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln362_2_fu_2570_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state63))) then 
                i_0_i_i23_reg_1076 <= i_76_fu_2576_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state62) and (grp_polyveck_pack_w1_fu_1425_ap_done = ap_const_logic_1))) then 
                i_0_i_i23_reg_1076 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_i_i44_reg_1109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
                i_0_i_i44_reg_1109 <= i_80_reg_3739;
            elsif (((icmp_ln114_fu_2730_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state81))) then 
                i_0_i_i44_reg_1109 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_0_i_i52_reg_1143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
                i_0_i_i52_reg_1143 <= i_83_reg_3783;
            elsif (((icmp_ln85_fu_2852_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state86))) then 
                i_0_i_i52_reg_1143 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_0_i_i60_reg_1165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
                i_0_i_i60_reg_1165 <= i_85_reg_3814;
            elsif (((icmp_ln53_fu_2914_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state89))) then 
                i_0_i_i60_reg_1165 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_0_i_i67_reg_1209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
                i_0_i_i67_reg_1209 <= i_88_reg_3870;
            elsif (((icmp_ln254_fu_3074_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state98))) then 
                i_0_i_i67_reg_1209 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_0_i_i75_reg_1231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
                i_0_i_i75_reg_1231 <= i_90_reg_3909;
            elsif (((icmp_ln236_fu_3132_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state111))) then 
                i_0_i_i75_reg_1231 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_0_i_i86_reg_1187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln303_fu_3068_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state94))) then 
                i_0_i_i86_reg_1187 <= i_87_reg_3841;
            elsif (((icmp_ln158_fu_2984_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state92))) then 
                i_0_i_i86_reg_1187 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_0_i_i88_reg_1265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
                i_0_i_i88_reg_1265 <= i_92_reg_3943;
            elsif (((icmp_ln158_reg_3824 = ap_const_lv1_1) and (icmp_ln394_fu_3190_p2 = ap_const_lv1_0) and (tmp_71_reg_3889 = ap_const_lv1_0) and (tmp_62_reg_3885 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state115))) then 
                i_0_i_i88_reg_1265 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_0_i_i_i_reg_856_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln540_fu_1642_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                i_0_i_i_i_reg_856 <= ap_const_lv5_0;
            elsif (((icmp_ln362_1_fu_1823_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                i_0_i_i_i_reg_856 <= i_44_fu_1829_p2;
            end if; 
        end if;
    end process;

    i_0_i_i_reg_833_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln362_fu_1586_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_i_i_reg_833 <= i_43_fu_1592_p2;
            elsif (((grp_unpack_sk_fu_1328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_i_i_reg_833 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_914_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln540_1_fu_1960_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                i_0_i_reg_914 <= ap_const_lv3_0;
            elsif (((icmp_ln21_fu_2224_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                i_0_i_reg_914 <= i_47_reg_3512;
            end if; 
        end if;
    end process;

    i_3_i1_reg_867_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln362_1_fu_1823_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                i_3_i1_reg_867 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                i_3_i1_reg_867 <= add_ln416_reg_3410;
            end if; 
        end if;
    end process;

    i_3_i3_reg_902_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                i_3_i3_reg_902 <= add_ln540_1_reg_3459;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (grp_KeccakF1600_StatePer_fu_1365_ap_done = ap_const_logic_1))) then 
                i_3_i3_reg_902 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_3_i47_reg_1087_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                i_3_i47_reg_1087 <= add_ln540_2_reg_3698;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state72) and (grp_KeccakF1600_StatePer_1_fu_1358_ap_done = ap_const_logic_1))) then 
                i_3_i47_reg_1087 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_3_i_reg_844_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i_3_i_reg_844 <= add_ln540_reg_3374;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_KeccakF1600_StatePer_1_fu_1358_ap_done = ap_const_logic_1))) then 
                i_3_i_reg_844 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_i_reg_926_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_2212_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                j_0_i_reg_926 <= ap_const_lv3_0;
            elsif (((grp_poly_uniform_fu_1305_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                j_0_i_reg_926 <= j_reg_3520;
            end if; 
        end if;
    end process;

    n_reg_1253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln248_fu_3220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state116))) then 
                n_reg_1253 <= s_fu_3251_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state114) and (grp_polyveck_caddq_fu_1447_ap_done = ap_const_logic_1))) then 
                n_reg_1253 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    nonce_0_reg_974_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln284_1_fu_2275_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                nonce_0_reg_974 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state115) and ((icmp_ln158_reg_3824 = ap_const_lv1_0) or ((tmp_62_reg_3885 = ap_const_lv1_1) or ((tmp_71_reg_3889 = ap_const_lv1_1) or ((icmp_ln394_fu_3190_p2 = ap_const_lv1_1) and (icmp_ln172_fu_3214_p2 = ap_const_lv1_1))))))) then 
                nonce_0_reg_974 <= nonce_reg_3554;
            end if; 
        end if;
    end process;

    phi_ln124_1_reg_997_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln124_reg_3574 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                phi_ln124_1_reg_997 <= ap_const_lv8_0;
            elsif (((icmp_ln124_1_reg_3593 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                phi_ln124_1_reg_997 <= add_ln124_1_reg_3578;
            end if; 
        end if;
    end process;

    phi_ln124_2_reg_1008_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln124_1_reg_3593 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                phi_ln124_2_reg_1008 <= ap_const_lv8_0;
            elsif (((icmp_ln124_2_reg_3612 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                phi_ln124_2_reg_1008 <= add_ln124_2_reg_3597;
            end if; 
        end if;
    end process;

    phi_ln124_3_reg_1019_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln124_2_reg_3612 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                phi_ln124_3_reg_1019 <= ap_const_lv8_0;
            elsif (((icmp_ln124_3_reg_3631 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                phi_ln124_3_reg_1019 <= add_ln124_3_reg_3616;
            end if; 
        end if;
    end process;

    phi_ln124_reg_986_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln124_reg_3574 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                phi_ln124_reg_986 <= add_ln124_reg_3559;
            elsif (((grp_polyvecl_uniform_gam_fu_1318_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                phi_ln124_reg_986 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    r_0_i6_i_reg_890_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                r_0_i6_i_reg_890 <= r_fu_1928_p2;
            elsif (((icmp_ln416_fu_1844_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                r_0_i6_i_reg_890 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_0_i_i_reg_1276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
                s_0_i_i_reg_1276 <= s_1_fu_3314_p2;
            elsif (((icmp_ln158_reg_3824 = ap_const_lv1_1) and (icmp_ln394_fu_3190_p2 = ap_const_lv1_0) and (tmp_71_reg_3889 = ap_const_lv1_0) and (tmp_62_reg_3885 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state115))) then 
                s_0_i_i_reg_1276 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                add_ln124_1_reg_3578 <= add_ln124_1_fu_2315_p2;
                icmp_ln124_1_reg_3593 <= icmp_ln124_1_fu_2330_p2;
                    tmp_s_reg_3583(7 downto 0) <= tmp_s_fu_2321_p3(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                add_ln124_2_reg_3597 <= add_ln124_2_fu_2341_p2;
                icmp_ln124_2_reg_3612 <= icmp_ln124_2_fu_2356_p2;
                    tmp_1127_reg_3602(7 downto 0) <= tmp_1127_fu_2347_p3(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                add_ln124_3_reg_3616 <= add_ln124_3_fu_2367_p2;
                icmp_ln124_3_reg_3631 <= icmp_ln124_3_fu_2382_p2;
                    tmp_1128_reg_3621(7 downto 0) <= tmp_1128_fu_2373_p3(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                add_ln124_reg_3559 <= add_ln124_fu_2293_p2;
                icmp_ln124_reg_3574 <= icmp_ln124_fu_2304_p2;
                    zext_ln124_reg_3564(7 downto 0) <= zext_ln124_fu_2299_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                add_ln416_reg_3410 <= add_ln416_fu_1850_p2;
                    zext_ln416_reg_3402(3 downto 0) <= zext_ln416_fu_1840_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                add_ln540_1_reg_3459 <= add_ln540_1_fu_1966_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state73)) then
                add_ln540_2_reg_3698 <= add_ln540_2_fu_2632_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln540_reg_3374 <= add_ln540_fu_1648_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_2224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    add_ln_reg_3525(2 downto 0) <= add_ln_fu_2240_p4(2 downto 0);    add_ln_reg_3525(9 downto 8) <= add_ln_fu_2240_p4(9 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                i_45_reg_3435 <= i_45_fu_1874_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                i_47_reg_3512 <= i_47_fu_2218_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                i_70_reg_3533 <= i_70_fu_2257_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                i_71_reg_3541 <= i_71_fu_2269_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                i_72_reg_3549 <= i_72_fu_2281_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                i_73_reg_3638 <= i_73_fu_2399_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                i_74_reg_3646 <= i_74_fu_2411_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                i_75_reg_3654 <= i_75_fu_2423_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then
                i_77_reg_3667 <= i_77_fu_2447_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state81)) then
                i_78_reg_3726 <= i_78_fu_2736_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then
                i_79_reg_3762 <= i_79_fu_2846_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state82)) then
                i_80_reg_3739 <= i_80_fu_2760_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state86)) then
                i_81_reg_3770 <= i_81_fu_2858_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state89)) then
                i_82_reg_3801 <= i_82_fu_2920_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state87)) then
                i_83_reg_3783 <= i_83_fu_2882_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state92)) then
                i_84_reg_3828 <= i_84_fu_2990_p2;
                icmp_ln158_reg_3824 <= icmp_ln158_fu_2984_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state90)) then
                i_85_reg_3814 <= i_85_fu_2944_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state98)) then
                i_86_reg_3857 <= i_86_fu_3080_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state93)) then
                i_87_reg_3841 <= i_87_fu_3014_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state99)) then
                i_88_reg_3870 <= i_88_fu_3104_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state111)) then
                i_89_reg_3896 <= i_89_fu_3138_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state112)) then
                i_90_reg_3909 <= i_90_fu_3162_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln158_reg_3824 = ap_const_lv1_1) and (tmp_71_reg_3889 = ap_const_lv1_0) and (tmp_62_reg_3885 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state115))) then
                i_91_reg_3927 <= i_91_fu_3196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state116)) then
                i_92_reg_3943 <= i_92_fu_3226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                j_reg_3520 <= j_fu_2230_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                nonce_reg_3554 <= nonce_fu_2287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state66) and (grp_keccak_absorb_2_fu_1342_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_keccak_absorb_2_fu_1342_ap_done = ap_const_logic_1)))) then
                reg_1546 <= grp_keccak_absorb_2_fu_1342_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state14))) then
                reg_1550 <= state_s_q0(23 downto 16);
                reg_1556 <= state_s_q0(31 downto 24);
                reg_1562 <= state_s_q0(39 downto 32);
                reg_1568 <= state_s_q0(47 downto 40);
                reg_1574 <= state_s_q0(55 downto 48);
                reg_1580 <= state_s_q0(63 downto 56);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                    shl_ln21_reg_3384(5 downto 3) <= shl_ln21_fu_1659_p3(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                    shl_ln541_1_reg_3469(5 downto 3) <= shl_ln541_1_fu_1977_p3(5 downto 3);
                trunc_ln543_1_reg_3479 <= state_0_s_q1(23 downto 16);
                trunc_ln544_1_reg_3484 <= state_0_s_q1(31 downto 24);
                trunc_ln545_1_reg_3489 <= state_0_s_q1(39 downto 32);
                trunc_ln546_1_reg_3494 <= state_0_s_q1(47 downto 40);
                trunc_ln547_1_reg_3499 <= state_0_s_q1(55 downto 48);
                trunc_ln548_1_reg_3504 <= state_0_s_q1(63 downto 56);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                    shl_ln541_2_reg_3713(4 downto 3) <= shl_ln541_2_fu_2647_p3(4 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_1868_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    state_0_s_addr_4_reg_3445(3 downto 0) <= zext_ln416_reg_3402(5 - 1 downto 0)(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state66) and (grp_keccak_absorb_2_fu_1342_ap_done = ap_const_logic_1))) then
                state_s_addr_12_reg_3690 <= zext_ln450_6_fu_2587_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_keccak_absorb_2_fu_1342_ap_done = ap_const_logic_1))) then
                state_s_addr_reg_3361 <= zext_ln450_4_fu_1603_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_polyveck_chknorm_fu_1439_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state103))) then
                tmp_62_reg_3885 <= grp_polyveck_chknorm_fu_1439_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_polyveck_chknorm_fu_1439_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state110))) then
                tmp_71_reg_3889 <= grp_polyveck_chknorm_fu_1439_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln540_2_fu_2626_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state73))) then
                trunc_ln541_3_reg_3708 <= trunc_ln541_3_fu_2638_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln108_fu_3098_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state99))) then
                w0_vec_coeffs_addr_1_reg_3875 <= zext_ln109_1_fu_3119_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_1_fu_3156_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state112))) then
                w0_vec_coeffs_addr_2_reg_3914 <= zext_ln88_6_fu_3177_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln225_fu_2441_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state60))) then
                w1_vec_coeffs_addr_reg_3677 <= zext_ln226_1_fu_2462_p1(10 - 1 downto 0);
                    zext_ln226_1_reg_3672(11 downto 0) <= zext_ln226_1_fu_2462_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_fu_2876_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                z_vec_coeffs_addr_5_reg_3793 <= zext_ln88_4_fu_2897_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_2938_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state90))) then
                z_vec_coeffs_addr_6_reg_3819 <= zext_ln33_2_fu_2959_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln254_fu_3074_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state98))) then
                    zext_ln104_reg_3862(10 downto 8) <= zext_ln104_fu_3094_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln114_fu_2730_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state81))) then
                    zext_ln176_reg_3731(10 downto 8) <= zext_ln176_fu_2750_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln180_fu_2754_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state82))) then
                    zext_ln181_16_reg_3744(11 downto 0) <= zext_ln181_16_fu_2780_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln373_fu_2417_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    zext_ln221_reg_3659(10 downto 8) <= zext_ln221_fu_2437_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln158_reg_3824 = ap_const_lv1_1) and (icmp_ln394_fu_3190_p2 = ap_const_lv1_0) and (tmp_71_reg_3889 = ap_const_lv1_0) and (tmp_62_reg_3885 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state115))) then
                    zext_ln244_reg_3932(10 downto 8) <= zext_ln244_fu_3210_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln248_fu_3220_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state116))) then
                    zext_ln249_1_reg_3948(11 downto 0) <= zext_ln249_1_fu_3241_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln416_fu_1844_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    zext_ln26_reg_3415(6 downto 3) <= zext_ln26_fu_1864_p1(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln158_fu_2984_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state92))) then
                    zext_ln287_reg_3833(10 downto 8) <= zext_ln287_fu_3004_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_2914_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state89))) then
                    zext_ln28_reg_3806(10 downto 8) <= zext_ln28_fu_2934_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln236_fu_3132_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state111))) then
                    zext_ln83_1_reg_3901(10 downto 8) <= zext_ln83_1_fu_3152_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln85_fu_2852_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state86))) then
                    zext_ln83_reg_3775(10 downto 8) <= zext_ln83_fu_2872_p1(10 downto 8);
            end if;
        end if;
    end process;
    shl_ln21_reg_3384(2 downto 0) <= "000";
    zext_ln416_reg_3402(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln26_reg_3415(2 downto 0) <= "000";
    zext_ln26_reg_3415(7) <= '0';
    state_0_s_addr_4_reg_3445(4) <= '0';
    shl_ln541_1_reg_3469(2 downto 0) <= "000";
    add_ln_reg_3525(7 downto 3) <= "00000";
    zext_ln124_reg_3564(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    tmp_s_reg_3583(63 downto 8) <= "00000000000000000000000000000000000000000000000000000001";
    tmp_1127_reg_3602(63 downto 8) <= "00000000000000000000000000000000000000000000000000000010";
    tmp_1128_reg_3621(63 downto 8) <= "00000000000000000000000000000000000000000000000000000011";
    zext_ln221_reg_3659(7 downto 0) <= "00000000";
    zext_ln221_reg_3659(11) <= '0';
    zext_ln226_1_reg_3672(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    shl_ln541_2_reg_3713(2 downto 0) <= "000";
    zext_ln176_reg_3731(7 downto 0) <= "00000000";
    zext_ln176_reg_3731(11) <= '0';
    zext_ln181_16_reg_3744(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln83_reg_3775(7 downto 0) <= "00000000";
    zext_ln83_reg_3775(11) <= '0';
    zext_ln28_reg_3806(7 downto 0) <= "00000000";
    zext_ln28_reg_3806(11) <= '0';
    zext_ln287_reg_3833(7 downto 0) <= "00000000";
    zext_ln287_reg_3833(11) <= '0';
    zext_ln104_reg_3862(7 downto 0) <= "00000000";
    zext_ln104_reg_3862(11) <= '0';
    zext_ln83_1_reg_3901(7 downto 0) <= "00000000";
    zext_ln83_1_reg_3901(11) <= '0';
    zext_ln244_reg_3932(7 downto 0) <= "00000000";
    zext_ln244_reg_3932(11) <= '0';
    zext_ln249_1_reg_3948(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state6, grp_keccak_absorb_2_fu_1342_ap_done, ap_CS_fsm_state66, ap_CS_fsm_state2, grp_unpack_sk_fu_1328_ap_done, ap_CS_fsm_state3, ap_CS_fsm_state13, icmp_ln540_fu_1642_p2, ap_CS_fsm_state18, ap_CS_fsm_state19, icmp_ln416_fu_1844_p2, ap_CS_fsm_state20, icmp_ln30_fu_1868_p2, ap_CS_fsm_state26, icmp_ln540_1_fu_1960_p2, ap_CS_fsm_state31, ap_CS_fsm_state32, icmp_ln21_fu_2224_p2, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, icmp_ln124_reg_3574, icmp_ln124_1_reg_3593, icmp_ln124_2_reg_3612, icmp_ln124_3_reg_3631, ap_CS_fsm_state50, ap_CS_fsm_state52, ap_CS_fsm_state59, icmp_ln373_fu_2417_p2, ap_CS_fsm_state60, icmp_ln225_fu_2441_p2, ap_CS_fsm_state63, ap_CS_fsm_state73, icmp_ln540_2_fu_2626_p2, ap_CS_fsm_state81, icmp_ln114_fu_2730_p2, ap_CS_fsm_state82, icmp_ln180_fu_2754_p2, ap_CS_fsm_state84, ap_CS_fsm_state86, icmp_ln85_fu_2852_p2, ap_CS_fsm_state87, icmp_ln87_fu_2876_p2, ap_CS_fsm_state89, icmp_ln53_fu_2914_p2, ap_CS_fsm_state90, icmp_ln32_fu_2938_p2, icmp_ln158_fu_2984_p2, icmp_ln158_reg_3824, ap_CS_fsm_state92, ap_CS_fsm_state93, icmp_ln298_fu_3008_p2, ap_CS_fsm_state98, icmp_ln254_fu_3074_p2, ap_CS_fsm_state99, icmp_ln108_fu_3098_p2, grp_polyveck_chknorm_fu_1439_ap_return, tmp_62_reg_3885, ap_CS_fsm_state103, grp_polyveck_chknorm_fu_1439_ap_done, tmp_71_reg_3889, ap_CS_fsm_state110, ap_CS_fsm_state111, icmp_ln236_fu_3132_p2, ap_CS_fsm_state112, icmp_ln87_1_fu_3156_p2, ap_CS_fsm_state115, icmp_ln394_fu_3190_p2, ap_CS_fsm_state116, icmp_ln248_fu_3220_p2, grp_pack_sig_fu_1288_ap_done, grp_poly_challenge_fu_1296_ap_done, grp_poly_uniform_fu_1305_ap_done, grp_polyvecl_uniform_gam_fu_1318_ap_done, grp_KeccakF1600_StatePer_1_fu_1358_ap_done, grp_KeccakF1600_StatePer_fu_1365_ap_done, grp_polyveck_invntt_tomo_fu_1372_ap_done, grp_invntt_tomont_fu_1379_ap_done, grp_ntt_1_fu_1388_ap_done, grp_ntt_fu_1395_ap_done, grp_polyvecl_pointwise_a_fu_1407_ap_done, grp_keccak_absorb_3199_fu_1416_ap_done, grp_polyveck_pack_w1_fu_1425_ap_done, grp_polyveck_pointwise_p_fu_1432_ap_done, grp_polyveck_caddq_fu_1447_ap_done, grp_polyveck_reduce_fu_1452_ap_done, icmp_ln362_fu_1586_p2, ap_CS_fsm_state12, icmp_ln362_1_fu_1823_p2, ap_CS_fsm_state25, ap_CS_fsm_state33, icmp_ln20_fu_2212_p2, ap_CS_fsm_state35, ap_CS_fsm_state37, icmp_ln100_fu_2251_p2, ap_CS_fsm_state39, icmp_ln284_fu_2263_p2, icmp_ln172_fu_3214_p2, icmp_ln284_1_fu_2275_p2, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state53, icmp_ln100_1_fu_2393_p2, ap_CS_fsm_state58, ap_CS_fsm_state62, icmp_ln362_2_fu_2570_p2, ap_CS_fsm_state72, ap_CS_fsm_state80, ap_CS_fsm_state85, icmp_ln107_fu_2840_p2, ap_CS_fsm_state94, icmp_ln303_fu_3068_p2, ap_CS_fsm_state97, ap_CS_fsm_state114, ap_CS_fsm_state118, ap_CS_fsm_state78, ap_CS_fsm_state56, ap_CS_fsm_state106, icmp_ln28_fu_2405_p2, ap_CS_fsm_state4, ap_CS_fsm_state64, ap_CS_fsm_state95, ap_CS_fsm_state104, ap_CS_fsm_state54, ap_CS_fsm_state101, ap_CS_fsm_state108)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_unpack_sk_fu_1328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln362_fu_1586_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_keccak_absorb_3199_fu_1416_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_keccak_absorb_2_fu_1342_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_KeccakF1600_StatePer_1_fu_1358_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln540_fu_1642_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln362_1_fu_1823_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln416_fu_1844_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state20 => 
                if (((icmp_ln30_fu_1868_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (grp_KeccakF1600_StatePer_fu_1365_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (((icmp_ln540_1_fu_1960_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state31 => 
                if (((icmp_ln20_fu_2212_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                if (((icmp_ln21_fu_2224_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state33 => 
                if (((grp_poly_uniform_fu_1305_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                if (((icmp_ln100_fu_2251_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state35 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state35) and (grp_ntt_fu_1395_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                if (((icmp_ln284_fu_2263_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state37 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state37) and (grp_ntt_fu_1395_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                if (((icmp_ln284_1_fu_2275_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state39 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state39) and (grp_ntt_fu_1395_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if (((grp_polyvecl_uniform_gam_fu_1318_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (((icmp_ln124_reg_3574 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                if (((icmp_ln124_1_reg_3593 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((icmp_ln124_2_reg_3612 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                if (((icmp_ln124_3_reg_3631 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state50 => 
                if (((icmp_ln100_1_fu_2393_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state51 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state51) and (grp_ntt_fu_1395_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                if (((icmp_ln28_fu_2405_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state53 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state53) and (grp_polyvecl_pointwise_a_fu_1407_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state54) and (grp_polyveck_reduce_fu_1452_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state56) and (grp_polyveck_invntt_tomo_fu_1372_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state58) and (grp_polyveck_caddq_fu_1447_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                if (((icmp_ln373_fu_2417_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state60 => 
                if (((icmp_ln225_fu_2441_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state60))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state62 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state62) and (grp_polyveck_pack_w1_fu_1425_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state63 => 
                if (((icmp_ln362_2_fu_2570_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state63))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state64 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state64) and (grp_keccak_absorb_3199_fu_1416_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state66) and (grp_keccak_absorb_2_fu_1342_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state72) and (grp_KeccakF1600_StatePer_1_fu_1358_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state73 => 
                if (((icmp_ln540_2_fu_2626_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state74;
                end if;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state78 => 
                if (((grp_poly_challenge_fu_1296_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state80) and (grp_ntt_1_fu_1388_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_state81 => 
                if (((icmp_ln114_fu_2730_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state82 => 
                if (((icmp_ln180_fu_2754_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state82))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state83;
                end if;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state84 => 
                if (((icmp_ln107_fu_2840_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then
                    ap_NS_fsm <= ap_ST_fsm_state86;
                else
                    ap_NS_fsm <= ap_ST_fsm_state85;
                end if;
            when ap_ST_fsm_state85 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state85) and (grp_invntt_tomont_fu_1379_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_state85;
                end if;
            when ap_ST_fsm_state86 => 
                if (((icmp_ln85_fu_2852_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state86))) then
                    ap_NS_fsm <= ap_ST_fsm_state89;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when ap_ST_fsm_state87 => 
                if (((icmp_ln87_fu_2876_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                    ap_NS_fsm <= ap_ST_fsm_state86;
                else
                    ap_NS_fsm <= ap_ST_fsm_state88;
                end if;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state89 => 
                if (((icmp_ln53_fu_2914_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state89))) then
                    ap_NS_fsm <= ap_ST_fsm_state92;
                else
                    ap_NS_fsm <= ap_ST_fsm_state90;
                end if;
            when ap_ST_fsm_state90 => 
                if (((icmp_ln32_fu_2938_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state90))) then
                    ap_NS_fsm <= ap_ST_fsm_state89;
                else
                    ap_NS_fsm <= ap_ST_fsm_state91;
                end if;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state92 => 
                if (((icmp_ln158_fu_2984_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state92))) then
                    ap_NS_fsm <= ap_ST_fsm_state93;
                else
                    ap_NS_fsm <= ap_ST_fsm_state95;
                end if;
            when ap_ST_fsm_state93 => 
                if (((icmp_ln298_fu_3008_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then
                    ap_NS_fsm <= ap_ST_fsm_state92;
                else
                    ap_NS_fsm <= ap_ST_fsm_state94;
                end if;
            when ap_ST_fsm_state94 => 
                if (((icmp_ln303_fu_3068_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state94))) then
                    ap_NS_fsm <= ap_ST_fsm_state115;
                else
                    ap_NS_fsm <= ap_ST_fsm_state93;
                end if;
            when ap_ST_fsm_state95 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state95) and (grp_polyveck_pointwise_p_fu_1432_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state96;
                else
                    ap_NS_fsm <= ap_ST_fsm_state95;
                end if;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state97) and (grp_polyveck_invntt_tomo_fu_1372_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state98;
                else
                    ap_NS_fsm <= ap_ST_fsm_state97;
                end if;
            when ap_ST_fsm_state98 => 
                if (((icmp_ln254_fu_3074_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state98))) then
                    ap_NS_fsm <= ap_ST_fsm_state99;
                else
                    ap_NS_fsm <= ap_ST_fsm_state101;
                end if;
            when ap_ST_fsm_state99 => 
                if (((icmp_ln108_fu_3098_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state99))) then
                    ap_NS_fsm <= ap_ST_fsm_state98;
                else
                    ap_NS_fsm <= ap_ST_fsm_state100;
                end if;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state101 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state101) and (grp_polyveck_reduce_fu_1452_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state102;
                else
                    ap_NS_fsm <= ap_ST_fsm_state101;
                end if;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                if (((grp_polyveck_chknorm_fu_1439_ap_done = ap_const_logic_1) and (grp_polyveck_chknorm_fu_1439_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state103))) then
                    ap_NS_fsm <= ap_ST_fsm_state115;
                elsif (((grp_polyveck_chknorm_fu_1439_ap_done = ap_const_logic_1) and (grp_polyveck_chknorm_fu_1439_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state103))) then
                    ap_NS_fsm <= ap_ST_fsm_state104;
                else
                    ap_NS_fsm <= ap_ST_fsm_state103;
                end if;
            when ap_ST_fsm_state104 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state104) and (grp_polyveck_pointwise_p_fu_1432_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state105;
                else
                    ap_NS_fsm <= ap_ST_fsm_state104;
                end if;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state106) and (grp_polyveck_invntt_tomo_fu_1372_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state107;
                else
                    ap_NS_fsm <= ap_ST_fsm_state106;
                end if;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state108) and (grp_polyveck_reduce_fu_1452_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state109;
                else
                    ap_NS_fsm <= ap_ST_fsm_state108;
                end if;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                if (((grp_polyveck_chknorm_fu_1439_ap_done = ap_const_logic_1) and (grp_polyveck_chknorm_fu_1439_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state110))) then
                    ap_NS_fsm <= ap_ST_fsm_state111;
                elsif (((grp_polyveck_chknorm_fu_1439_ap_done = ap_const_logic_1) and (grp_polyveck_chknorm_fu_1439_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state110))) then
                    ap_NS_fsm <= ap_ST_fsm_state115;
                else
                    ap_NS_fsm <= ap_ST_fsm_state110;
                end if;
            when ap_ST_fsm_state111 => 
                if (((icmp_ln236_fu_3132_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state111))) then
                    ap_NS_fsm <= ap_ST_fsm_state112;
                else
                    ap_NS_fsm <= ap_ST_fsm_state114;
                end if;
            when ap_ST_fsm_state112 => 
                if (((icmp_ln87_1_fu_3156_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state112))) then
                    ap_NS_fsm <= ap_ST_fsm_state111;
                else
                    ap_NS_fsm <= ap_ST_fsm_state113;
                end if;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state114 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state114) and (grp_polyveck_caddq_fu_1447_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state115;
                else
                    ap_NS_fsm <= ap_ST_fsm_state114;
                end if;
            when ap_ST_fsm_state115 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state115) and ((icmp_ln158_reg_3824 = ap_const_lv1_0) or ((tmp_62_reg_3885 = ap_const_lv1_1) or ((tmp_71_reg_3889 = ap_const_lv1_1) or ((icmp_ln394_fu_3190_p2 = ap_const_lv1_1) and (icmp_ln172_fu_3214_p2 = ap_const_lv1_1))))))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                elsif (((icmp_ln394_fu_3190_p2 = ap_const_lv1_1) and (icmp_ln158_reg_3824 = ap_const_lv1_1) and (tmp_71_reg_3889 = ap_const_lv1_0) and (tmp_62_reg_3885 = ap_const_lv1_0) and (icmp_ln172_fu_3214_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state115))) then
                    ap_NS_fsm <= ap_ST_fsm_state118;
                else
                    ap_NS_fsm <= ap_ST_fsm_state116;
                end if;
            when ap_ST_fsm_state116 => 
                if (((icmp_ln248_fu_3220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state116))) then
                    ap_NS_fsm <= ap_ST_fsm_state115;
                else
                    ap_NS_fsm <= ap_ST_fsm_state117;
                end if;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state118 => 
                if (((grp_pack_sig_fu_1288_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state118))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state118;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a1_1_fu_2528_p2 <= (trunc_ln11_fu_2487_p4 and select_ln48_fu_2520_p3);
    add_ln109_fu_3114_p2 <= std_logic_vector(unsigned(zext_ln104_reg_3862) + unsigned(zext_ln109_fu_3110_p1));
    add_ln124_1_fu_2315_p2 <= std_logic_vector(unsigned(phi_ln124_1_reg_997) + unsigned(ap_const_lv8_1));
    add_ln124_2_fu_2341_p2 <= std_logic_vector(unsigned(phi_ln124_2_reg_1008) + unsigned(ap_const_lv8_1));
    add_ln124_3_fu_2367_p2 <= std_logic_vector(unsigned(phi_ln124_3_reg_1019) + unsigned(ap_const_lv8_1));
    add_ln124_fu_2293_p2 <= std_logic_vector(unsigned(phi_ln124_reg_986) + unsigned(ap_const_lv8_1));
    add_ln181_fu_2775_p2 <= std_logic_vector(unsigned(zext_ln181_15_fu_2771_p1) + unsigned(zext_ln176_reg_3731));
    add_ln19_fu_2823_p2 <= std_logic_vector(signed(sext_ln19_14_fu_2819_p1) + signed(mul_ln181_fu_2793_p2));
    add_ln226_fu_2457_p2 <= std_logic_vector(unsigned(zext_ln221_reg_3659) + unsigned(zext_ln226_fu_2453_p1));
    add_ln249_fu_3236_p2 <= std_logic_vector(unsigned(zext_ln244_reg_3932) + unsigned(zext_ln249_fu_3232_p1));
    add_ln300_fu_3024_p2 <= std_logic_vector(unsigned(zext_ln287_reg_3833) + unsigned(zext_ln300_fu_3020_p1));
    add_ln31_fu_1892_p2 <= std_logic_vector(unsigned(zext_ln26_reg_3415) + unsigned(zext_ln31_fu_1888_p1));
    add_ln33_fu_2954_p2 <= std_logic_vector(unsigned(zext_ln28_reg_3806) + unsigned(zext_ln33_fu_2950_p1));
    add_ln36_fu_2964_p2 <= std_logic_vector(unsigned(z_vec_coeffs_q0) + unsigned(ap_const_lv32_400000));
    add_ln416_fu_1850_p2 <= std_logic_vector(unsigned(i_3_i1_reg_867) + unsigned(ap_const_lv4_1));
    add_ln42_fu_2467_p2 <= std_logic_vector(unsigned(ap_const_lv32_7F) + unsigned(w1_vec_coeffs_q0));
    add_ln540_1_fu_1966_p2 <= std_logic_vector(unsigned(i_3_i3_reg_902) + unsigned(ap_const_lv3_1));
    add_ln540_2_fu_2632_p2 <= std_logic_vector(unsigned(i_3_i47_reg_1087) + unsigned(ap_const_lv3_1));
    add_ln540_fu_1648_p2 <= std_logic_vector(unsigned(i_3_i_reg_844) + unsigned(ap_const_lv3_1));
    add_ln541_1_fu_1989_p2 <= std_logic_vector(signed(ap_const_lv8_A0) + signed(zext_ln541_2_fu_1985_p1));
    add_ln541_fu_1671_p2 <= std_logic_vector(unsigned(ap_const_lv8_70) + unsigned(zext_ln541_fu_1667_p1));
    add_ln542_1_fu_2021_p2 <= std_logic_vector(signed(ap_const_lv8_A0) + signed(zext_ln542_2_fu_2017_p1));
    add_ln542_fu_1692_p2 <= std_logic_vector(unsigned(ap_const_lv8_70) + unsigned(zext_ln542_fu_1688_p1));
    add_ln543_1_fu_2101_p2 <= std_logic_vector(signed(ap_const_lv8_A0) + signed(zext_ln543_2_fu_2097_p1));
    add_ln543_fu_1712_p2 <= std_logic_vector(unsigned(ap_const_lv8_70) + unsigned(zext_ln543_fu_1708_p1));
    add_ln544_1_fu_2121_p2 <= std_logic_vector(signed(ap_const_lv8_A0) + signed(zext_ln544_2_fu_2117_p1));
    add_ln544_fu_1732_p2 <= std_logic_vector(unsigned(ap_const_lv8_70) + unsigned(zext_ln544_fu_1728_p1));
    add_ln545_1_fu_2141_p2 <= std_logic_vector(signed(ap_const_lv8_A0) + signed(zext_ln545_2_fu_2137_p1));
    add_ln545_fu_1752_p2 <= std_logic_vector(unsigned(ap_const_lv8_70) + unsigned(zext_ln545_fu_1748_p1));
    add_ln546_1_fu_2161_p2 <= std_logic_vector(signed(ap_const_lv8_A0) + signed(zext_ln546_2_fu_2157_p1));
    add_ln546_fu_1772_p2 <= std_logic_vector(unsigned(ap_const_lv8_70) + unsigned(zext_ln546_fu_1768_p1));
    add_ln547_1_fu_2181_p2 <= std_logic_vector(signed(ap_const_lv8_A0) + signed(zext_ln547_2_fu_2177_p1));
    add_ln547_fu_1792_p2 <= std_logic_vector(unsigned(ap_const_lv8_70) + unsigned(zext_ln547_fu_1788_p1));
    add_ln548_1_fu_2201_p2 <= std_logic_vector(signed(ap_const_lv8_A0) + signed(zext_ln548_2_fu_2197_p1));
    add_ln548_fu_1812_p2 <= std_logic_vector(unsigned(ap_const_lv8_70) + unsigned(zext_ln548_fu_1808_p1));
    add_ln88_2_fu_3183_p2 <= std_logic_vector(unsigned(w0_vec_coeffs_q0) + unsigned(h_vec_coeffs_q0));
    add_ln88_3_fu_2892_p2 <= std_logic_vector(unsigned(zext_ln83_reg_3775) + unsigned(zext_ln88_fu_2888_p1));
    add_ln88_4_fu_3172_p2 <= std_logic_vector(unsigned(zext_ln83_1_reg_3901) + unsigned(zext_ln88_5_fu_3168_p1));
    add_ln88_fu_2907_p2 <= std_logic_vector(unsigned(z_vec_coeffs_q0) + unsigned(sext_ln88_fu_2903_p1));
    add_ln_fu_2240_p4 <= ((trunc_ln22_fu_2236_p1 & ap_const_lv5_0) & j_0_i_reg_926);
    and_ln301_fu_3056_p2 <= (t_16_fu_3042_p3 and shl_ln301_fu_3050_p2);
    and_ln69_fu_3281_p2 <= (icmp_ln69_3_fu_3275_p2 and icmp_ln69_2_fu_3269_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state106 <= ap_CS_fsm(105);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state108 <= ap_CS_fsm(107);
    ap_CS_fsm_state109 <= ap_CS_fsm(108);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state110 <= ap_CS_fsm(109);
    ap_CS_fsm_state111 <= ap_CS_fsm(110);
    ap_CS_fsm_state112 <= ap_CS_fsm(111);
    ap_CS_fsm_state113 <= ap_CS_fsm(112);
    ap_CS_fsm_state114 <= ap_CS_fsm(113);
    ap_CS_fsm_state115 <= ap_CS_fsm(114);
    ap_CS_fsm_state116 <= ap_CS_fsm(115);
    ap_CS_fsm_state117 <= ap_CS_fsm(116);
    ap_CS_fsm_state118 <= ap_CS_fsm(117);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_pack_sig_fu_1288_ap_done, ap_CS_fsm_state118)
    begin
        if ((((grp_pack_sig_fu_1288_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state118)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_pack_sig_fu_1288_ap_done, ap_CS_fsm_state118)
    begin
        if (((grp_pack_sig_fu_1288_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state118))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    cp_coeffs_address0_assign_proc : process(ap_CS_fsm_state82, grp_poly_challenge_fu_1296_c_coeffs_address0, grp_ntt_1_fu_1388_a_address0, grp_polyveck_pointwise_p_fu_1432_a_coeffs_address0, ap_CS_fsm_state80, ap_CS_fsm_state78, ap_CS_fsm_state95, ap_CS_fsm_state104, zext_ln181_fu_2766_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            cp_coeffs_address0 <= zext_ln181_fu_2766_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state95))) then 
            cp_coeffs_address0 <= grp_polyveck_pointwise_p_fu_1432_a_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            cp_coeffs_address0 <= grp_ntt_1_fu_1388_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            cp_coeffs_address0 <= grp_poly_challenge_fu_1296_c_coeffs_address0;
        else 
            cp_coeffs_address0 <= "XXXXXXXX";
        end if; 
    end process;


    cp_coeffs_ce0_assign_proc : process(ap_CS_fsm_state82, grp_poly_challenge_fu_1296_c_coeffs_ce0, grp_ntt_1_fu_1388_a_ce0, grp_polyveck_pointwise_p_fu_1432_a_coeffs_ce0, ap_CS_fsm_state80, ap_CS_fsm_state78, ap_CS_fsm_state95, ap_CS_fsm_state104)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            cp_coeffs_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state95))) then 
            cp_coeffs_ce0 <= grp_polyveck_pointwise_p_fu_1432_a_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            cp_coeffs_ce0 <= grp_ntt_1_fu_1388_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            cp_coeffs_ce0 <= grp_poly_challenge_fu_1296_c_coeffs_ce0;
        else 
            cp_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cp_coeffs_ce1_assign_proc : process(grp_ntt_1_fu_1388_a_ce1, ap_CS_fsm_state80)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            cp_coeffs_ce1 <= grp_ntt_1_fu_1388_a_ce1;
        else 
            cp_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cp_coeffs_d0_assign_proc : process(grp_poly_challenge_fu_1296_c_coeffs_d0, grp_ntt_1_fu_1388_a_d0, ap_CS_fsm_state80, ap_CS_fsm_state78)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            cp_coeffs_d0 <= grp_ntt_1_fu_1388_a_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            cp_coeffs_d0 <= grp_poly_challenge_fu_1296_c_coeffs_d0;
        else 
            cp_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    cp_coeffs_we0_assign_proc : process(grp_poly_challenge_fu_1296_c_coeffs_we0, grp_ntt_1_fu_1388_a_we0, ap_CS_fsm_state80, ap_CS_fsm_state78)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            cp_coeffs_we0 <= grp_ntt_1_fu_1388_a_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            cp_coeffs_we0 <= grp_poly_challenge_fu_1296_c_coeffs_we0;
        else 
            cp_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_KeccakF1600_StatePer_1_fu_1358_ap_start <= grp_KeccakF1600_StatePer_1_fu_1358_ap_start_reg;
    grp_KeccakF1600_StatePer_fu_1365_ap_start <= grp_KeccakF1600_StatePer_fu_1365_ap_start_reg;
    grp_fu_1457_p4 <= grp_keccak_absorb_2_fu_1342_ap_return(31 downto 3);
    grp_fu_1467_p2 <= (state_s_q0 xor ap_const_lv64_8000000000000000);
    grp_fu_3320_p0 <= ap_const_lv32_2C0B(15 - 1 downto 0);
    grp_fu_3320_p2 <= ap_const_lv32_800000(25 - 1 downto 0);
    grp_fu_3329_p0 <= ap_const_lv27_7FD1800(19 - 1 downto 0);
    grp_fu_3339_p1 <= ap_const_lv32_FF801FFF(24 - 1 downto 0);
    grp_invntt_tomont_fu_1379_ap_start <= grp_invntt_tomont_fu_1379_ap_start_reg;
    grp_keccak_absorb_2_fu_1342_ap_start <= grp_keccak_absorb_2_fu_1342_ap_start_reg;

    grp_keccak_absorb_2_fu_1342_m_offset_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            grp_keccak_absorb_2_fu_1342_m_offset <= ap_const_lv13_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_keccak_absorb_2_fu_1342_m_offset <= ap_const_lv13_974;
        else 
            grp_keccak_absorb_2_fu_1342_m_offset <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    grp_keccak_absorb_2_fu_1342_mlen_assign_proc : process(mlen, ap_CS_fsm_state6, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            grp_keccak_absorb_2_fu_1342_mlen <= ap_const_lv64_300;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_keccak_absorb_2_fu_1342_mlen <= mlen;
        else 
            grp_keccak_absorb_2_fu_1342_mlen <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_keccak_absorb_3199_fu_1416_ap_start <= grp_keccak_absorb_3199_fu_1416_ap_start_reg;

    grp_keccak_absorb_3199_fu_1416_m_offset_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_keccak_absorb_3199_fu_1416_m_offset <= ap_const_lv8_70;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_keccak_absorb_3199_fu_1416_m_offset <= ap_const_lv8_20;
        else 
            grp_keccak_absorb_3199_fu_1416_m_offset <= "XXXXXXXX";
        end if; 
    end process;

    grp_ntt_1_fu_1388_ap_start <= grp_ntt_1_fu_1388_ap_start_reg;

    grp_ntt_fu_1395_a_offset_assign_proc : process(i_0_i3_reg_938, ap_CS_fsm_state35, i_0_i5_reg_950, ap_CS_fsm_state37, i_0_i7_reg_962, ap_CS_fsm_state39, i_0_i12_reg_1030, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_ntt_fu_1395_a_offset <= i_0_i12_reg_1030;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_ntt_fu_1395_a_offset <= i_0_i7_reg_962;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_ntt_fu_1395_a_offset <= i_0_i5_reg_950;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_ntt_fu_1395_a_offset <= i_0_i3_reg_938;
        else 
            grp_ntt_fu_1395_a_offset <= "XXX";
        end if; 
    end process;


    grp_ntt_fu_1395_a_q0_assign_proc : process(s1_vec_coeffs_q0, z_vec_coeffs_q0, t0_vec_coeffs_q0, s2_vec_coeffs_q0, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_ntt_fu_1395_a_q0 <= z_vec_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_ntt_fu_1395_a_q0 <= t0_vec_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_ntt_fu_1395_a_q0 <= s2_vec_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_ntt_fu_1395_a_q0 <= s1_vec_coeffs_q0;
        else 
            grp_ntt_fu_1395_a_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_ntt_fu_1395_a_q1_assign_proc : process(s1_vec_coeffs_q1, z_vec_coeffs_q1, t0_vec_coeffs_q1, s2_vec_coeffs_q1, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_ntt_fu_1395_a_q1 <= z_vec_coeffs_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_ntt_fu_1395_a_q1 <= t0_vec_coeffs_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_ntt_fu_1395_a_q1 <= s2_vec_coeffs_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_ntt_fu_1395_a_q1 <= s1_vec_coeffs_q1;
        else 
            grp_ntt_fu_1395_a_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_ntt_fu_1395_ap_start <= grp_ntt_fu_1395_ap_start_reg;
    grp_pack_sig_fu_1288_ap_start <= grp_pack_sig_fu_1288_ap_start_reg;
    grp_poly_challenge_fu_1296_ap_start <= grp_poly_challenge_fu_1296_ap_start_reg;
    grp_poly_uniform_fu_1305_ap_start <= grp_poly_uniform_fu_1305_ap_start_reg;
    grp_polyveck_caddq_fu_1447_ap_start <= grp_polyveck_caddq_fu_1447_ap_start_reg;

    grp_polyveck_caddq_fu_1447_v_vec_coeffs_q0_assign_proc : process(w1_vec_coeffs_q0, w0_vec_coeffs_q0, ap_CS_fsm_state58, ap_CS_fsm_state114)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            grp_polyveck_caddq_fu_1447_v_vec_coeffs_q0 <= w0_vec_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            grp_polyveck_caddq_fu_1447_v_vec_coeffs_q0 <= w1_vec_coeffs_q0;
        else 
            grp_polyveck_caddq_fu_1447_v_vec_coeffs_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_polyveck_chknorm_fu_1439_ap_start <= grp_polyveck_chknorm_fu_1439_ap_start_reg;

    grp_polyveck_chknorm_fu_1439_bound_assign_proc : process(ap_CS_fsm_state103, ap_CS_fsm_state110)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            grp_polyveck_chknorm_fu_1439_bound <= ap_const_lv18_17400;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            grp_polyveck_chknorm_fu_1439_bound <= ap_const_lv18_173B2;
        else 
            grp_polyveck_chknorm_fu_1439_bound <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_polyveck_chknorm_fu_1439_v_vec_coeffs_q0_assign_proc : process(ap_CS_fsm_state103, ap_CS_fsm_state110, w0_vec_coeffs_q0, h_vec_coeffs_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            grp_polyveck_chknorm_fu_1439_v_vec_coeffs_q0 <= h_vec_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            grp_polyveck_chknorm_fu_1439_v_vec_coeffs_q0 <= w0_vec_coeffs_q0;
        else 
            grp_polyveck_chknorm_fu_1439_v_vec_coeffs_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_polyveck_invntt_tomo_fu_1372_ap_start <= grp_polyveck_invntt_tomo_fu_1372_ap_start_reg;

    grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_q0_assign_proc : process(w1_vec_coeffs_q0, h_vec_coeffs_q0, ap_CS_fsm_state97, ap_CS_fsm_state56, ap_CS_fsm_state106)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state97))) then 
            grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_q0 <= h_vec_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_q0 <= w1_vec_coeffs_q0;
        else 
            grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_q1_assign_proc : process(w1_vec_coeffs_q1, h_vec_coeffs_q1, ap_CS_fsm_state97, ap_CS_fsm_state56, ap_CS_fsm_state106)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state97))) then 
            grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_q1 <= h_vec_coeffs_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_q1 <= w1_vec_coeffs_q1;
        else 
            grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_polyveck_pack_w1_fu_1425_ap_start <= grp_polyveck_pack_w1_fu_1425_ap_start_reg;
    grp_polyveck_pointwise_p_fu_1432_ap_start <= grp_polyveck_pointwise_p_fu_1432_ap_start_reg;

    grp_polyveck_pointwise_p_fu_1432_v_vec_coeffs_q0_assign_proc : process(t0_vec_coeffs_q0, s2_vec_coeffs_q0, ap_CS_fsm_state95, ap_CS_fsm_state104)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            grp_polyveck_pointwise_p_fu_1432_v_vec_coeffs_q0 <= t0_vec_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            grp_polyveck_pointwise_p_fu_1432_v_vec_coeffs_q0 <= s2_vec_coeffs_q0;
        else 
            grp_polyveck_pointwise_p_fu_1432_v_vec_coeffs_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_polyveck_reduce_fu_1452_ap_start <= grp_polyveck_reduce_fu_1452_ap_start_reg;

    grp_polyveck_reduce_fu_1452_v_vec_coeffs_q0_assign_proc : process(w1_vec_coeffs_q0, w0_vec_coeffs_q0, h_vec_coeffs_q0, ap_CS_fsm_state54, ap_CS_fsm_state101, ap_CS_fsm_state108)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            grp_polyveck_reduce_fu_1452_v_vec_coeffs_q0 <= h_vec_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_polyveck_reduce_fu_1452_v_vec_coeffs_q0 <= w0_vec_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_polyveck_reduce_fu_1452_v_vec_coeffs_q0 <= w1_vec_coeffs_q0;
        else 
            grp_polyveck_reduce_fu_1452_v_vec_coeffs_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_polyvecl_pointwise_a_fu_1407_ap_start <= grp_polyvecl_pointwise_a_fu_1407_ap_start_reg;
    grp_polyvecl_uniform_gam_fu_1318_ap_start <= grp_polyvecl_uniform_gam_fu_1318_ap_start_reg;
    grp_unpack_sk_fu_1328_ap_start <= grp_unpack_sk_fu_1328_ap_start_reg;

    h_vec_coeffs_address0_assign_proc : process(ap_CS_fsm_state99, ap_CS_fsm_state110, ap_CS_fsm_state112, zext_ln249_1_reg_3948, ap_CS_fsm_state117, grp_pack_sig_fu_1288_h_vec_coeffs_address0, grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_address0, grp_polyveck_pointwise_p_fu_1432_r_vec_coeffs_address0, grp_polyveck_chknorm_fu_1439_v_vec_coeffs_address0, grp_polyveck_reduce_fu_1452_v_vec_coeffs_address0, ap_CS_fsm_state97, ap_CS_fsm_state118, ap_CS_fsm_state106, ap_CS_fsm_state95, ap_CS_fsm_state104, ap_CS_fsm_state108, zext_ln109_1_fu_3119_p1, zext_ln88_6_fu_3177_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            h_vec_coeffs_address0 <= zext_ln249_1_reg_3948(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            h_vec_coeffs_address0 <= zext_ln88_6_fu_3177_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            h_vec_coeffs_address0 <= zext_ln109_1_fu_3119_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            h_vec_coeffs_address0 <= grp_polyveck_reduce_fu_1452_v_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            h_vec_coeffs_address0 <= grp_polyveck_chknorm_fu_1439_v_vec_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state95))) then 
            h_vec_coeffs_address0 <= grp_polyveck_pointwise_p_fu_1432_r_vec_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state97))) then 
            h_vec_coeffs_address0 <= grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            h_vec_coeffs_address0 <= grp_pack_sig_fu_1288_h_vec_coeffs_address0;
        else 
            h_vec_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    h_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state99, ap_CS_fsm_state110, ap_CS_fsm_state112, ap_CS_fsm_state117, grp_pack_sig_fu_1288_h_vec_coeffs_ce0, grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_ce0, grp_polyveck_pointwise_p_fu_1432_r_vec_coeffs_ce0, grp_polyveck_chknorm_fu_1439_v_vec_coeffs_ce0, grp_polyveck_reduce_fu_1452_v_vec_coeffs_ce0, ap_CS_fsm_state97, ap_CS_fsm_state118, ap_CS_fsm_state106, ap_CS_fsm_state95, ap_CS_fsm_state104, ap_CS_fsm_state108)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state99))) then 
            h_vec_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            h_vec_coeffs_ce0 <= grp_polyveck_reduce_fu_1452_v_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            h_vec_coeffs_ce0 <= grp_polyveck_chknorm_fu_1439_v_vec_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state95))) then 
            h_vec_coeffs_ce0 <= grp_polyveck_pointwise_p_fu_1432_r_vec_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state97))) then 
            h_vec_coeffs_ce0 <= grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            h_vec_coeffs_ce0 <= grp_pack_sig_fu_1288_h_vec_coeffs_ce0;
        else 
            h_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    h_vec_coeffs_ce1_assign_proc : process(grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_ce1, ap_CS_fsm_state97, ap_CS_fsm_state106)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state97))) then 
            h_vec_coeffs_ce1 <= grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_ce1;
        else 
            h_vec_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    h_vec_coeffs_d0_assign_proc : process(ap_CS_fsm_state117, grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_d0, grp_polyveck_pointwise_p_fu_1432_r_vec_coeffs_d0, grp_polyveck_reduce_fu_1452_v_vec_coeffs_d0, ap_CS_fsm_state97, ap_CS_fsm_state106, ap_CS_fsm_state95, ap_CS_fsm_state104, ap_CS_fsm_state108, zext_ln69_1_fu_3309_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            h_vec_coeffs_d0 <= zext_ln69_1_fu_3309_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            h_vec_coeffs_d0 <= grp_polyveck_reduce_fu_1452_v_vec_coeffs_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state95))) then 
            h_vec_coeffs_d0 <= grp_polyveck_pointwise_p_fu_1432_r_vec_coeffs_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state97))) then 
            h_vec_coeffs_d0 <= grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_d0;
        else 
            h_vec_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    h_vec_coeffs_we0_assign_proc : process(ap_CS_fsm_state117, grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_we0, grp_polyveck_pointwise_p_fu_1432_r_vec_coeffs_we0, grp_polyveck_reduce_fu_1452_v_vec_coeffs_we0, ap_CS_fsm_state97, ap_CS_fsm_state106, ap_CS_fsm_state95, ap_CS_fsm_state104, ap_CS_fsm_state108)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            h_vec_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            h_vec_coeffs_we0 <= grp_polyveck_reduce_fu_1452_v_vec_coeffs_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state95))) then 
            h_vec_coeffs_we0 <= grp_polyveck_pointwise_p_fu_1432_r_vec_coeffs_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state97))) then 
            h_vec_coeffs_we0 <= grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_we0;
        else 
            h_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_43_fu_1592_p2 <= std_logic_vector(unsigned(i_0_i_i_reg_833) + unsigned(ap_const_lv5_1));
    i_44_fu_1829_p2 <= std_logic_vector(unsigned(i_0_i_i_i_reg_856) + unsigned(ap_const_lv5_1));
    i_45_fu_1874_p2 <= std_logic_vector(unsigned(i_0_i5_i_reg_878) + unsigned(ap_const_lv4_1));
    i_47_fu_2218_p2 <= std_logic_vector(unsigned(i_0_i_reg_914) + unsigned(ap_const_lv3_1));
    i_70_fu_2257_p2 <= std_logic_vector(unsigned(i_0_i3_reg_938) + unsigned(ap_const_lv3_1));
    i_71_fu_2269_p2 <= std_logic_vector(unsigned(i_0_i5_reg_950) + unsigned(ap_const_lv3_1));
    i_72_fu_2281_p2 <= std_logic_vector(unsigned(i_0_i7_reg_962) + unsigned(ap_const_lv3_1));
    i_73_fu_2399_p2 <= std_logic_vector(unsigned(i_0_i12_reg_1030) + unsigned(ap_const_lv3_1));
    i_74_fu_2411_p2 <= std_logic_vector(unsigned(i_0_i17_reg_1042) + unsigned(ap_const_lv3_1));
    i_75_fu_2423_p2 <= std_logic_vector(unsigned(i_0_i19_reg_1054) + unsigned(ap_const_lv3_1));
    i_76_fu_2576_p2 <= std_logic_vector(unsigned(i_0_i_i23_reg_1076) + unsigned(ap_const_lv5_1));
    i_77_fu_2447_p2 <= std_logic_vector(unsigned(i_0_i_i20_reg_1065) + unsigned(ap_const_lv9_1));
    i_78_fu_2736_p2 <= std_logic_vector(unsigned(i_0_i43_reg_1098) + unsigned(ap_const_lv3_1));
    i_79_fu_2846_p2 <= std_logic_vector(unsigned(i_0_i49_reg_1120) + unsigned(ap_const_lv3_1));
    i_80_fu_2760_p2 <= std_logic_vector(unsigned(i_0_i_i44_reg_1109) + unsigned(ap_const_lv9_1));
    i_81_fu_2858_p2 <= std_logic_vector(unsigned(i_0_i51_reg_1132) + unsigned(ap_const_lv3_1));
    i_82_fu_2920_p2 <= std_logic_vector(unsigned(i_0_i59_reg_1154) + unsigned(ap_const_lv3_1));
    i_83_fu_2882_p2 <= std_logic_vector(unsigned(i_0_i_i52_reg_1143) + unsigned(ap_const_lv9_1));
    i_84_fu_2990_p2 <= std_logic_vector(unsigned(i_0_i85_reg_1176) + unsigned(ap_const_lv3_1));
    i_85_fu_2944_p2 <= std_logic_vector(unsigned(i_0_i_i60_reg_1165) + unsigned(ap_const_lv9_1));
    i_86_fu_3080_p2 <= std_logic_vector(unsigned(i_0_i66_reg_1198) + unsigned(ap_const_lv3_1));
    i_87_fu_3014_p2 <= std_logic_vector(unsigned(i_0_i_i86_reg_1187) + unsigned(ap_const_lv9_1));
    i_88_fu_3104_p2 <= std_logic_vector(unsigned(i_0_i_i67_reg_1209) + unsigned(ap_const_lv9_1));
    i_89_fu_3138_p2 <= std_logic_vector(unsigned(i_0_i74_reg_1220) + unsigned(ap_const_lv3_1));
    i_90_fu_3162_p2 <= std_logic_vector(unsigned(i_0_i_i75_reg_1231) + unsigned(ap_const_lv9_1));
    i_91_fu_3196_p2 <= std_logic_vector(unsigned(i_0_i87_reg_1242) + unsigned(ap_const_lv3_1));
    i_92_fu_3226_p2 <= std_logic_vector(unsigned(i_0_i_i88_reg_1265) + unsigned(ap_const_lv9_1));
    icmp_ln100_1_fu_2393_p2 <= "1" when (i_0_i12_reg_1030 = ap_const_lv3_4) else "0";
    icmp_ln100_fu_2251_p2 <= "1" when (i_0_i3_reg_938 = ap_const_lv3_4) else "0";
    icmp_ln107_fu_2840_p2 <= "1" when (i_0_i49_reg_1120 = ap_const_lv3_4) else "0";
    icmp_ln108_fu_3098_p2 <= "1" when (i_0_i_i67_reg_1209 = ap_const_lv9_100) else "0";
    icmp_ln114_fu_2730_p2 <= "1" when (i_0_i43_reg_1098 = ap_const_lv3_4) else "0";
    icmp_ln124_1_fu_2330_p2 <= "1" when (phi_ln124_1_reg_997 = ap_const_lv8_FF) else "0";
    icmp_ln124_2_fu_2356_p2 <= "1" when (phi_ln124_2_reg_1008 = ap_const_lv8_FF) else "0";
    icmp_ln124_3_fu_2382_p2 <= "1" when (phi_ln124_3_reg_1019 = ap_const_lv8_FF) else "0";
    icmp_ln124_fu_2304_p2 <= "1" when (phi_ln124_reg_986 = ap_const_lv8_FF) else "0";
    icmp_ln158_fu_2984_p2 <= "1" when (i_0_i85_reg_1176 = ap_const_lv3_4) else "0";
    icmp_ln172_fu_3214_p2 <= "1" when (unsigned(n_reg_1253) > unsigned(ap_const_lv11_50)) else "0";
    icmp_ln180_fu_2754_p2 <= "1" when (i_0_i_i44_reg_1109 = ap_const_lv9_100) else "0";
    icmp_ln20_fu_2212_p2 <= "1" when (i_0_i_reg_914 = ap_const_lv3_4) else "0";
    icmp_ln21_fu_2224_p2 <= "1" when (j_0_i_reg_926 = ap_const_lv3_4) else "0";
    icmp_ln225_fu_2441_p2 <= "1" when (i_0_i_i20_reg_1065 = ap_const_lv9_100) else "0";
    icmp_ln236_fu_3132_p2 <= "1" when (i_0_i74_reg_1220 = ap_const_lv3_4) else "0";
    icmp_ln248_fu_3220_p2 <= "1" when (i_0_i_i88_reg_1265 = ap_const_lv9_100) else "0";
    icmp_ln254_fu_3074_p2 <= "1" when (i_0_i66_reg_1198 = ap_const_lv3_4) else "0";
    icmp_ln284_1_fu_2275_p2 <= "1" when (i_0_i7_reg_962 = ap_const_lv3_4) else "0";
    icmp_ln284_fu_2263_p2 <= "1" when (i_0_i5_reg_950 = ap_const_lv3_4) else "0";
    icmp_ln28_fu_2405_p2 <= "1" when (i_0_i17_reg_1042 = ap_const_lv3_4) else "0";
    icmp_ln298_fu_3008_p2 <= "1" when (i_0_i_i86_reg_1187 = ap_const_lv9_100) else "0";
    icmp_ln303_fu_3068_p2 <= "1" when (signed(t_17_fu_3062_p2) < signed(ap_const_lv32_1FFB2)) else "0";
    icmp_ln30_fu_1868_p2 <= "1" when (i_0_i5_i_reg_878 = ap_const_lv4_8) else "0";
    icmp_ln32_fu_2938_p2 <= "1" when (i_0_i_i60_reg_1165 = ap_const_lv9_100) else "0";
    icmp_ln362_1_fu_1823_p2 <= "1" when (i_0_i_i_i_reg_856 = ap_const_lv5_19) else "0";
    icmp_ln362_2_fu_2570_p2 <= "1" when (i_0_i_i23_reg_1076 = ap_const_lv5_19) else "0";
    icmp_ln362_fu_1586_p2 <= "1" when (i_0_i_i_reg_833 = ap_const_lv5_19) else "0";
    icmp_ln373_fu_2417_p2 <= "1" when (i_0_i19_reg_1054 = ap_const_lv3_4) else "0";
    icmp_ln394_fu_3190_p2 <= "1" when (i_0_i87_reg_1242 = ap_const_lv3_4) else "0";
    icmp_ln416_fu_1844_p2 <= "1" when (i_3_i1_reg_867 = ap_const_lv4_A) else "0";
    icmp_ln53_fu_2914_p2 <= "1" when (i_0_i59_reg_1154 = ap_const_lv3_4) else "0";
    icmp_ln540_1_fu_1960_p2 <= "1" when (i_3_i3_reg_902 = ap_const_lv3_6) else "0";
    icmp_ln540_2_fu_2626_p2 <= "1" when (i_3_i47_reg_1087 = ap_const_lv3_4) else "0";
    icmp_ln540_fu_1642_p2 <= "1" when (i_3_i_reg_844 = ap_const_lv3_6) else "0";
    icmp_ln69_1_fu_3263_p2 <= "1" when (signed(w0_vec_coeffs_q0) > signed(ap_const_lv32_7E6C01)) else "0";
    icmp_ln69_2_fu_3269_p2 <= "1" when (w0_vec_coeffs_q0 = ap_const_lv32_7E6C01) else "0";
    icmp_ln69_3_fu_3275_p2 <= "1" when (w1_vec_coeffs_q0 = ap_const_lv32_0) else "0";
    icmp_ln69_fu_3257_p2 <= "1" when (signed(w0_vec_coeffs_q0) < signed(ap_const_lv32_17401)) else "0";
    icmp_ln85_fu_2852_p2 <= "1" when (i_0_i51_reg_1132 = ap_const_lv3_4) else "0";
    icmp_ln87_1_fu_3156_p2 <= "1" when (i_0_i_i75_reg_1231 = ap_const_lv9_100) else "0";
    icmp_ln87_fu_2876_p2 <= "1" when (i_0_i_i52_reg_1143 = ap_const_lv9_100) else "0";
    j_fu_2230_p2 <= std_logic_vector(unsigned(j_0_i_reg_926) + unsigned(ap_const_lv3_1));

    mat_vec_coeffs_address0_assign_proc : process(grp_poly_uniform_fu_1305_a_coeffs_address0, grp_polyvecl_pointwise_a_fu_1407_u_vec_coeffs_address0, ap_CS_fsm_state33, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            mat_vec_coeffs_address0 <= grp_polyvecl_pointwise_a_fu_1407_u_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            mat_vec_coeffs_address0 <= grp_poly_uniform_fu_1305_a_coeffs_address0;
        else 
            mat_vec_coeffs_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    mat_vec_coeffs_ce0_assign_proc : process(grp_poly_uniform_fu_1305_a_coeffs_ce0, grp_polyvecl_pointwise_a_fu_1407_u_vec_coeffs_ce0, ap_CS_fsm_state33, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            mat_vec_coeffs_ce0 <= grp_polyvecl_pointwise_a_fu_1407_u_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            mat_vec_coeffs_ce0 <= grp_poly_uniform_fu_1305_a_coeffs_ce0;
        else 
            mat_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mat_vec_coeffs_we0_assign_proc : process(grp_poly_uniform_fu_1305_a_coeffs_we0, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            mat_vec_coeffs_we0 <= grp_poly_uniform_fu_1305_a_coeffs_we0;
        else 
            mat_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln181_fu_2793_p0 <= s1_vec_coeffs_q0;
    mul_ln181_fu_2793_p1 <= cp_coeffs_q0;
    mul_ln181_fu_2793_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln181_fu_2793_p0) * signed(mul_ln181_fu_2793_p1))), 64));
    mul_ln19_fu_2813_p1 <= t_fu_2803_p2;
    mul_ln19_fu_2813_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ap_const_lv55_7FFFFFFF801FFF) * signed(mul_ln19_fu_2813_p1))), 55));
    nonce_fu_2287_p2 <= std_logic_vector(unsigned(nonce_0_reg_974) + unsigned(ap_const_lv16_1));
    or_ln542_1_fu_2011_p2 <= (shl_ln541_1_fu_1977_p3 or ap_const_lv6_1);
    or_ln542_2_fu_2659_p2 <= (shl_ln541_2_fu_2647_p3 or ap_const_lv5_1);
    or_ln542_fu_1682_p2 <= (shl_ln21_fu_1659_p3 or ap_const_lv6_1);
    or_ln543_1_fu_2092_p2 <= (shl_ln541_1_reg_3469 or ap_const_lv6_2);
    or_ln543_2_fu_2670_p2 <= (shl_ln541_2_reg_3713 or ap_const_lv5_2);
    or_ln543_fu_1703_p2 <= (shl_ln21_reg_3384 or ap_const_lv6_2);
    or_ln544_1_fu_2112_p2 <= (shl_ln541_1_reg_3469 or ap_const_lv6_3);
    or_ln544_2_fu_2680_p2 <= (shl_ln541_2_reg_3713 or ap_const_lv5_3);
    or_ln544_fu_1723_p2 <= (shl_ln21_reg_3384 or ap_const_lv6_3);
    or_ln545_1_fu_2132_p2 <= (shl_ln541_1_reg_3469 or ap_const_lv6_4);
    or_ln545_2_fu_2690_p2 <= (shl_ln541_2_reg_3713 or ap_const_lv5_4);
    or_ln545_fu_1743_p2 <= (shl_ln21_reg_3384 or ap_const_lv6_4);
    or_ln546_1_fu_2152_p2 <= (shl_ln541_1_reg_3469 or ap_const_lv6_5);
    or_ln546_2_fu_2700_p2 <= (shl_ln541_2_reg_3713 or ap_const_lv5_5);
    or_ln546_fu_1763_p2 <= (shl_ln21_reg_3384 or ap_const_lv6_5);
    or_ln547_1_fu_2172_p2 <= (shl_ln541_1_reg_3469 or ap_const_lv6_6);
    or_ln547_2_fu_2710_p2 <= (shl_ln541_2_reg_3713 or ap_const_lv5_6);
    or_ln547_fu_1783_p2 <= (shl_ln21_reg_3384 or ap_const_lv6_6);
    or_ln548_1_fu_2192_p2 <= (shl_ln541_1_reg_3469 or ap_const_lv6_7);
    or_ln548_2_fu_2720_p2 <= (shl_ln541_2_reg_3713 or ap_const_lv5_7);
    or_ln548_fu_1803_p2 <= (shl_ln21_reg_3384 or ap_const_lv6_7);
    or_ln69_1_fu_3293_p2 <= (or_ln69_fu_3287_p2 or icmp_ln69_fu_3257_p2);
    or_ln69_fu_3287_p2 <= (icmp_ln69_1_fu_3263_p2 or and_ln69_fu_3281_p2);
    or_ln_fu_1880_p3 <= (ap_const_lv3_5 & i_0_i5_i_reg_878);
    r_fu_1928_p2 <= (shl_ln31_fu_1922_p2 or r_0_i6_i_reg_890);

    s1_vec_coeffs_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state82, zext_ln181_16_fu_2780_p1, grp_unpack_sk_fu_1328_s1_vec_coeffs_address0, grp_ntt_fu_1395_a_address0, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            s1_vec_coeffs_address0 <= zext_ln181_16_fu_2780_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            s1_vec_coeffs_address0 <= grp_ntt_fu_1395_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s1_vec_coeffs_address0 <= grp_unpack_sk_fu_1328_s1_vec_coeffs_address0;
        else 
            s1_vec_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    s1_vec_coeffs_address1_assign_proc : process(ap_CS_fsm_state2, grp_unpack_sk_fu_1328_s1_vec_coeffs_address1, grp_ntt_fu_1395_a_address1, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            s1_vec_coeffs_address1 <= grp_ntt_fu_1395_a_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s1_vec_coeffs_address1 <= grp_unpack_sk_fu_1328_s1_vec_coeffs_address1;
        else 
            s1_vec_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    s1_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state82, grp_unpack_sk_fu_1328_s1_vec_coeffs_ce0, grp_ntt_fu_1395_a_ce0, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            s1_vec_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            s1_vec_coeffs_ce0 <= grp_ntt_fu_1395_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s1_vec_coeffs_ce0 <= grp_unpack_sk_fu_1328_s1_vec_coeffs_ce0;
        else 
            s1_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s1_vec_coeffs_ce1_assign_proc : process(ap_CS_fsm_state2, grp_unpack_sk_fu_1328_s1_vec_coeffs_ce1, grp_ntt_fu_1395_a_ce1, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            s1_vec_coeffs_ce1 <= grp_ntt_fu_1395_a_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s1_vec_coeffs_ce1 <= grp_unpack_sk_fu_1328_s1_vec_coeffs_ce1;
        else 
            s1_vec_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s1_vec_coeffs_d0_assign_proc : process(ap_CS_fsm_state2, grp_unpack_sk_fu_1328_s1_vec_coeffs_d0, grp_ntt_fu_1395_a_d0, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            s1_vec_coeffs_d0 <= grp_ntt_fu_1395_a_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s1_vec_coeffs_d0 <= grp_unpack_sk_fu_1328_s1_vec_coeffs_d0;
        else 
            s1_vec_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s1_vec_coeffs_we0_assign_proc : process(ap_CS_fsm_state2, grp_unpack_sk_fu_1328_s1_vec_coeffs_we0, grp_ntt_fu_1395_a_we0, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            s1_vec_coeffs_we0 <= grp_ntt_fu_1395_a_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s1_vec_coeffs_we0 <= grp_unpack_sk_fu_1328_s1_vec_coeffs_we0;
        else 
            s1_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s1_vec_coeffs_we1_assign_proc : process(ap_CS_fsm_state2, grp_unpack_sk_fu_1328_s1_vec_coeffs_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s1_vec_coeffs_we1 <= grp_unpack_sk_fu_1328_s1_vec_coeffs_we1;
        else 
            s1_vec_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;


    s2_vec_coeffs_address0_assign_proc : process(ap_CS_fsm_state2, grp_unpack_sk_fu_1328_s2_vec_coeffs_address0, grp_ntt_fu_1395_a_address0, grp_polyveck_pointwise_p_fu_1432_v_vec_coeffs_address0, ap_CS_fsm_state37, ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            s2_vec_coeffs_address0 <= grp_polyveck_pointwise_p_fu_1432_v_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            s2_vec_coeffs_address0 <= grp_ntt_fu_1395_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s2_vec_coeffs_address0 <= grp_unpack_sk_fu_1328_s2_vec_coeffs_address0;
        else 
            s2_vec_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    s2_vec_coeffs_address1_assign_proc : process(ap_CS_fsm_state2, grp_unpack_sk_fu_1328_s2_vec_coeffs_address1, grp_ntt_fu_1395_a_address1, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            s2_vec_coeffs_address1 <= grp_ntt_fu_1395_a_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s2_vec_coeffs_address1 <= grp_unpack_sk_fu_1328_s2_vec_coeffs_address1;
        else 
            s2_vec_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    s2_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state2, grp_unpack_sk_fu_1328_s2_vec_coeffs_ce0, grp_ntt_fu_1395_a_ce0, grp_polyveck_pointwise_p_fu_1432_v_vec_coeffs_ce0, ap_CS_fsm_state37, ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            s2_vec_coeffs_ce0 <= grp_polyveck_pointwise_p_fu_1432_v_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            s2_vec_coeffs_ce0 <= grp_ntt_fu_1395_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s2_vec_coeffs_ce0 <= grp_unpack_sk_fu_1328_s2_vec_coeffs_ce0;
        else 
            s2_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s2_vec_coeffs_ce1_assign_proc : process(ap_CS_fsm_state2, grp_unpack_sk_fu_1328_s2_vec_coeffs_ce1, grp_ntt_fu_1395_a_ce1, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            s2_vec_coeffs_ce1 <= grp_ntt_fu_1395_a_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s2_vec_coeffs_ce1 <= grp_unpack_sk_fu_1328_s2_vec_coeffs_ce1;
        else 
            s2_vec_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s2_vec_coeffs_d0_assign_proc : process(ap_CS_fsm_state2, grp_unpack_sk_fu_1328_s2_vec_coeffs_d0, grp_ntt_fu_1395_a_d0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            s2_vec_coeffs_d0 <= grp_ntt_fu_1395_a_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s2_vec_coeffs_d0 <= grp_unpack_sk_fu_1328_s2_vec_coeffs_d0;
        else 
            s2_vec_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s2_vec_coeffs_we0_assign_proc : process(ap_CS_fsm_state2, grp_unpack_sk_fu_1328_s2_vec_coeffs_we0, grp_ntt_fu_1395_a_we0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            s2_vec_coeffs_we0 <= grp_ntt_fu_1395_a_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s2_vec_coeffs_we0 <= grp_unpack_sk_fu_1328_s2_vec_coeffs_we0;
        else 
            s2_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s2_vec_coeffs_we1_assign_proc : process(ap_CS_fsm_state2, grp_unpack_sk_fu_1328_s2_vec_coeffs_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s2_vec_coeffs_we1 <= grp_unpack_sk_fu_1328_s2_vec_coeffs_we1;
        else 
            s2_vec_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;

    s_1_fu_3314_p2 <= std_logic_vector(unsigned(s_0_i_i_reg_1276) + unsigned(zext_ln69_fu_3305_p1));
    s_fu_3251_p2 <= std_logic_vector(unsigned(zext_ln248_fu_3247_p1) + unsigned(n_reg_1253));

    seedbuf_address0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state2, ap_CS_fsm_state20, ap_CS_fsm_state27, grp_poly_uniform_fu_1305_seed_address0, grp_polyvecl_uniform_gam_fu_1318_seed_address0, grp_unpack_sk_fu_1328_rho_address0, grp_keccak_absorb_3199_fu_1416_m_address0, ap_CS_fsm_state17, ap_CS_fsm_state30, ap_CS_fsm_state33, ap_CS_fsm_state41, ap_CS_fsm_state4, ap_CS_fsm_state64, zext_ln541_1_fu_1677_p1, zext_ln543_1_fu_1718_p1, ap_CS_fsm_state15, zext_ln545_1_fu_1758_p1, ap_CS_fsm_state16, zext_ln547_1_fu_1798_p1, zext_ln31_18_fu_1897_p1, zext_ln542_3_fu_2027_p1, ap_CS_fsm_state28, zext_ln544_3_fu_2127_p1, ap_CS_fsm_state29, zext_ln546_3_fu_2167_p1, zext_ln548_3_fu_2207_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            seedbuf_address0 <= zext_ln548_3_fu_2207_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            seedbuf_address0 <= zext_ln546_3_fu_2167_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            seedbuf_address0 <= zext_ln544_3_fu_2127_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            seedbuf_address0 <= zext_ln542_3_fu_2027_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            seedbuf_address0 <= zext_ln31_18_fu_1897_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            seedbuf_address0 <= zext_ln547_1_fu_1798_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            seedbuf_address0 <= zext_ln545_1_fu_1758_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            seedbuf_address0 <= zext_ln543_1_fu_1718_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            seedbuf_address0 <= zext_ln541_1_fu_1677_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            seedbuf_address0 <= grp_keccak_absorb_3199_fu_1416_m_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            seedbuf_address0 <= grp_unpack_sk_fu_1328_rho_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            seedbuf_address0 <= grp_polyvecl_uniform_gam_fu_1318_seed_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            seedbuf_address0 <= grp_poly_uniform_fu_1305_seed_address0;
        else 
            seedbuf_address0 <= "XXXXXXXX";
        end if; 
    end process;


    seedbuf_address1_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state27, ap_CS_fsm_state17, ap_CS_fsm_state30, zext_ln542_1_fu_1698_p1, ap_CS_fsm_state15, zext_ln544_1_fu_1738_p1, ap_CS_fsm_state16, zext_ln546_1_fu_1778_p1, zext_ln548_1_fu_1818_p1, zext_ln541_3_fu_1995_p1, zext_ln543_3_fu_2107_p1, ap_CS_fsm_state28, zext_ln545_3_fu_2147_p1, ap_CS_fsm_state29, zext_ln547_3_fu_2187_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            seedbuf_address1 <= zext_ln547_3_fu_2187_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            seedbuf_address1 <= zext_ln545_3_fu_2147_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            seedbuf_address1 <= zext_ln543_3_fu_2107_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            seedbuf_address1 <= zext_ln541_3_fu_1995_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            seedbuf_address1 <= zext_ln548_1_fu_1818_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            seedbuf_address1 <= zext_ln546_1_fu_1778_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            seedbuf_address1 <= zext_ln544_1_fu_1738_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            seedbuf_address1 <= zext_ln542_1_fu_1698_p1(8 - 1 downto 0);
        else 
            seedbuf_address1 <= "XXXXXXXX";
        end if; 
    end process;


    seedbuf_ce0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state2, ap_CS_fsm_state20, ap_CS_fsm_state27, grp_poly_uniform_fu_1305_seed_ce0, grp_polyvecl_uniform_gam_fu_1318_seed_ce0, grp_unpack_sk_fu_1328_rho_ce0, grp_keccak_absorb_3199_fu_1416_m_ce0, ap_CS_fsm_state17, ap_CS_fsm_state30, ap_CS_fsm_state33, ap_CS_fsm_state41, ap_CS_fsm_state4, ap_CS_fsm_state64, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            seedbuf_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            seedbuf_ce0 <= grp_keccak_absorb_3199_fu_1416_m_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            seedbuf_ce0 <= grp_unpack_sk_fu_1328_rho_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            seedbuf_ce0 <= grp_polyvecl_uniform_gam_fu_1318_seed_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            seedbuf_ce0 <= grp_poly_uniform_fu_1305_seed_ce0;
        else 
            seedbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    seedbuf_ce1_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state27, ap_CS_fsm_state17, ap_CS_fsm_state30, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            seedbuf_ce1 <= ap_const_logic_1;
        else 
            seedbuf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    seedbuf_d0_assign_proc : process(reg_1550, ap_CS_fsm_state14, reg_1562, reg_1574, ap_CS_fsm_state2, ap_CS_fsm_state27, trunc_ln544_1_reg_3484, trunc_ln546_1_reg_3494, trunc_ln548_1_reg_3504, state_0_s_q1, grp_unpack_sk_fu_1328_rho_d0, ap_CS_fsm_state17, ap_CS_fsm_state30, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state28, ap_CS_fsm_state29, trunc_ln541_fu_1654_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            seedbuf_d0 <= trunc_ln548_1_reg_3504;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            seedbuf_d0 <= trunc_ln546_1_reg_3494;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            seedbuf_d0 <= trunc_ln544_1_reg_3484;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            seedbuf_d0 <= state_0_s_q1(15 downto 8);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            seedbuf_d0 <= reg_1574;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            seedbuf_d0 <= reg_1562;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            seedbuf_d0 <= reg_1550;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            seedbuf_d0 <= trunc_ln541_fu_1654_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            seedbuf_d0 <= grp_unpack_sk_fu_1328_rho_d0;
        else 
            seedbuf_d0 <= "XXXXXXXX";
        end if; 
    end process;


    seedbuf_d1_assign_proc : process(ap_CS_fsm_state14, reg_1556, reg_1568, reg_1580, ap_CS_fsm_state27, trunc_ln543_1_reg_3479, trunc_ln545_1_reg_3489, trunc_ln547_1_reg_3499, state_s_q0, ap_CS_fsm_state17, ap_CS_fsm_state30, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state28, ap_CS_fsm_state29, trunc_ln541_1_fu_1972_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            seedbuf_d1 <= trunc_ln547_1_reg_3499;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            seedbuf_d1 <= trunc_ln545_1_reg_3489;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            seedbuf_d1 <= trunc_ln543_1_reg_3479;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            seedbuf_d1 <= trunc_ln541_1_fu_1972_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            seedbuf_d1 <= reg_1580;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            seedbuf_d1 <= reg_1568;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            seedbuf_d1 <= reg_1556;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            seedbuf_d1 <= state_s_q0(15 downto 8);
        else 
            seedbuf_d1 <= "XXXXXXXX";
        end if; 
    end process;


    seedbuf_we0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state2, ap_CS_fsm_state27, grp_unpack_sk_fu_1328_rho_we0, ap_CS_fsm_state17, ap_CS_fsm_state30, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            seedbuf_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            seedbuf_we0 <= grp_unpack_sk_fu_1328_rho_we0;
        else 
            seedbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    seedbuf_we1_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state27, ap_CS_fsm_state17, ap_CS_fsm_state30, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            seedbuf_we1 <= ap_const_logic_1;
        else 
            seedbuf_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln48_fu_2520_p3 <= 
        ap_const_lv8_FF when (xor_ln48_fu_2514_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln52_fu_2556_p3 <= 
        ap_const_lv32_7FE001 when (tmp_106_fu_2548_p3(0) = '1') else 
        ap_const_lv32_0;
        sext_ln124_1_fu_2336_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_vec_coeffs_q0),32));

        sext_ln124_2_fu_2362_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_vec_coeffs_q0),32));

        sext_ln124_3_fu_2388_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_vec_coeffs_q0),32));

        sext_ln124_fu_2310_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_vec_coeffs_q0),32));

        sext_ln19_14_fu_2819_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln19_fu_2813_p2),64));

        sext_ln47_fu_2496_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln11_fu_2487_p4),9));

        sext_ln48_1_fu_2538_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a1_1_fu_2528_p2),32));

        sext_ln88_fu_2903_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_vec_coeffs_q0),32));

    shl_ln21_fu_1659_p3 <= (i_3_i_reg_844 & ap_const_lv3_0);
    shl_ln22_fu_1856_p3 <= (i_3_i1_reg_867 & ap_const_lv3_0);
    shl_ln23_fu_1910_p3 <= (trunc_ln31_fu_1906_p1 & ap_const_lv3_0);
    shl_ln301_fu_3050_p2 <= std_logic_vector(shift_left(unsigned(z_vec_coeffs_q0),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln31_fu_1922_p2 <= std_logic_vector(shift_left(unsigned(zext_ln31_19_fu_1902_p1),to_integer(unsigned('0' & zext_ln31_20_fu_1918_p1(31-1 downto 0)))));
    shl_ln450_1_fu_2608_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1F),to_integer(unsigned('0' & zext_ln450_5_fu_2604_p1(31-1 downto 0)))));
    shl_ln450_5_fu_2596_p3 <= (trunc_ln450_1_fu_2592_p1 & ap_const_lv3_0);
    shl_ln450_fu_1624_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1F),to_integer(unsigned('0' & zext_ln450_fu_1620_p1(31-1 downto 0)))));
    shl_ln541_1_fu_1977_p3 <= (i_3_i3_reg_902 & ap_const_lv3_0);
    shl_ln541_2_fu_2647_p3 <= (trunc_ln541_3_reg_3708 & ap_const_lv3_0);
    shl_ln_fu_1612_p3 <= (trunc_ln450_fu_1608_p1 & ap_const_lv3_0);

    sig_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state66, ap_CS_fsm_state74, grp_pack_sig_fu_1288_sig_address0, grp_poly_challenge_fu_1296_seed_address0, grp_keccak_absorb_2_fu_1342_m_address0, grp_polyveck_pack_w1_fu_1425_r_address0, ap_CS_fsm_state62, ap_CS_fsm_state77, ap_CS_fsm_state118, ap_CS_fsm_state78, zext_ln541_4_fu_2654_p1, zext_ln543_4_fu_2675_p1, ap_CS_fsm_state75, zext_ln545_4_fu_2695_p1, ap_CS_fsm_state76, zext_ln547_4_fu_2715_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            sig_address0 <= zext_ln547_4_fu_2715_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            sig_address0 <= zext_ln545_4_fu_2695_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            sig_address0 <= zext_ln543_4_fu_2675_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            sig_address0 <= zext_ln541_4_fu_2654_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            sig_address0 <= grp_polyveck_pack_w1_fu_1425_r_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sig_address0 <= grp_keccak_absorb_2_fu_1342_m_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            sig_address0 <= grp_poly_challenge_fu_1296_seed_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            sig_address0 <= grp_pack_sig_fu_1288_sig_address0;
        else 
            sig_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    sig_address1_assign_proc : process(ap_CS_fsm_state74, grp_pack_sig_fu_1288_sig_address1, grp_polyveck_pack_w1_fu_1425_r_address1, ap_CS_fsm_state62, ap_CS_fsm_state77, ap_CS_fsm_state118, zext_ln542_4_fu_2665_p1, ap_CS_fsm_state75, zext_ln544_4_fu_2685_p1, ap_CS_fsm_state76, zext_ln546_4_fu_2705_p1, zext_ln548_4_fu_2725_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            sig_address1 <= zext_ln548_4_fu_2725_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            sig_address1 <= zext_ln546_4_fu_2705_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            sig_address1 <= zext_ln544_4_fu_2685_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            sig_address1 <= zext_ln542_4_fu_2665_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            sig_address1 <= grp_polyveck_pack_w1_fu_1425_r_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            sig_address1 <= grp_pack_sig_fu_1288_sig_address1;
        else 
            sig_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    sig_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state66, ap_CS_fsm_state74, grp_pack_sig_fu_1288_sig_ce0, grp_poly_challenge_fu_1296_seed_ce0, grp_keccak_absorb_2_fu_1342_m_ce0, grp_polyveck_pack_w1_fu_1425_r_ce0, ap_CS_fsm_state62, ap_CS_fsm_state77, ap_CS_fsm_state118, ap_CS_fsm_state78, ap_CS_fsm_state75, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state77))) then 
            sig_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            sig_ce0 <= grp_polyveck_pack_w1_fu_1425_r_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sig_ce0 <= grp_keccak_absorb_2_fu_1342_m_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            sig_ce0 <= grp_poly_challenge_fu_1296_seed_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            sig_ce0 <= grp_pack_sig_fu_1288_sig_ce0;
        else 
            sig_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_ce1_assign_proc : process(ap_CS_fsm_state74, grp_pack_sig_fu_1288_sig_ce1, grp_polyveck_pack_w1_fu_1425_r_ce1, ap_CS_fsm_state62, ap_CS_fsm_state77, ap_CS_fsm_state118, ap_CS_fsm_state75, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state77))) then 
            sig_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            sig_ce1 <= grp_polyveck_pack_w1_fu_1425_r_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            sig_ce1 <= grp_pack_sig_fu_1288_sig_ce1;
        else 
            sig_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sig_d0_assign_proc : process(reg_1550, ap_CS_fsm_state74, reg_1562, reg_1574, grp_pack_sig_fu_1288_sig_d0, grp_polyveck_pack_w1_fu_1425_r_d0, ap_CS_fsm_state62, ap_CS_fsm_state77, ap_CS_fsm_state118, ap_CS_fsm_state75, ap_CS_fsm_state76, trunc_ln541_2_fu_2642_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            sig_d0 <= reg_1574;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            sig_d0 <= reg_1562;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            sig_d0 <= reg_1550;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            sig_d0 <= trunc_ln541_2_fu_2642_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            sig_d0 <= grp_polyveck_pack_w1_fu_1425_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            sig_d0 <= grp_pack_sig_fu_1288_sig_d0;
        else 
            sig_d0 <= "XXXXXXXX";
        end if; 
    end process;


    sig_d1_assign_proc : process(ap_CS_fsm_state74, reg_1556, reg_1568, reg_1580, state_s_q0, grp_pack_sig_fu_1288_sig_d1, grp_polyveck_pack_w1_fu_1425_r_d1, ap_CS_fsm_state62, ap_CS_fsm_state77, ap_CS_fsm_state118, ap_CS_fsm_state75, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            sig_d1 <= reg_1580;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            sig_d1 <= reg_1568;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            sig_d1 <= reg_1556;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            sig_d1 <= state_s_q0(15 downto 8);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            sig_d1 <= grp_polyveck_pack_w1_fu_1425_r_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            sig_d1 <= grp_pack_sig_fu_1288_sig_d1;
        else 
            sig_d1 <= "XXXXXXXX";
        end if; 
    end process;


    sig_we0_assign_proc : process(ap_CS_fsm_state74, grp_pack_sig_fu_1288_sig_we0, grp_polyveck_pack_w1_fu_1425_r_we0, ap_CS_fsm_state62, ap_CS_fsm_state77, ap_CS_fsm_state118, ap_CS_fsm_state75, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state77))) then 
            sig_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            sig_we0 <= grp_polyveck_pack_w1_fu_1425_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            sig_we0 <= grp_pack_sig_fu_1288_sig_we0;
        else 
            sig_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_we1_assign_proc : process(ap_CS_fsm_state74, grp_pack_sig_fu_1288_sig_we1, grp_polyveck_pack_w1_fu_1425_r_we1, ap_CS_fsm_state62, ap_CS_fsm_state77, ap_CS_fsm_state118, ap_CS_fsm_state75, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state77))) then 
            sig_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            sig_we1 <= grp_polyveck_pack_w1_fu_1425_r_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            sig_we1 <= grp_pack_sig_fu_1288_sig_we1;
        else 
            sig_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sk_address0 <= grp_unpack_sk_fu_1328_sk_address0;
    sk_address1 <= grp_unpack_sk_fu_1328_sk_address1;
    sk_ce0 <= grp_unpack_sk_fu_1328_sk_ce0;
    sk_ce1 <= grp_unpack_sk_fu_1328_sk_ce1;

    state_0_s_address0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19, state_0_s_addr_4_reg_3445, grp_KeccakF1600_StatePer_fu_1365_state_0_address0, ap_CS_fsm_state22, ap_CS_fsm_state25, zext_ln363_1_fu_1835_p1, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            state_0_s_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            state_0_s_address0 <= state_0_s_addr_4_reg_3445;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            state_0_s_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            state_0_s_address0 <= zext_ln363_1_fu_1835_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            state_0_s_address0 <= grp_KeccakF1600_StatePer_fu_1365_state_0_address0;
        else 
            state_0_s_address0 <= "XXXXX";
        end if; 
    end process;


    state_0_s_address1_assign_proc : process(zext_ln416_reg_3402, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state26, grp_KeccakF1600_StatePer_fu_1365_state_0_address1, ap_CS_fsm_state25, zext_ln540_1_fu_1955_p1, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            state_0_s_address1 <= zext_ln540_1_fu_1955_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            state_0_s_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            state_0_s_address1 <= zext_ln416_reg_3402(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            state_0_s_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            state_0_s_address1 <= grp_KeccakF1600_StatePer_fu_1365_state_0_address1;
        else 
            state_0_s_address1 <= "XXXXX";
        end if; 
    end process;


    state_0_s_ce0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19, grp_KeccakF1600_StatePer_fu_1365_state_0_ce0, ap_CS_fsm_state22, ap_CS_fsm_state25, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            state_0_s_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            state_0_s_ce0 <= grp_KeccakF1600_StatePer_fu_1365_state_0_ce0;
        else 
            state_0_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_0_s_ce1_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state26, grp_KeccakF1600_StatePer_fu_1365_state_0_ce1, ap_CS_fsm_state25, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            state_0_s_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            state_0_s_ce1 <= grp_KeccakF1600_StatePer_fu_1365_state_0_ce1;
        else 
            state_0_s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_0_s_d0_assign_proc : process(ap_CS_fsm_state18, grp_KeccakF1600_StatePer_fu_1365_state_0_d0, ap_CS_fsm_state22, ap_CS_fsm_state25, xor_ln417_fu_1934_p2, ap_CS_fsm_state23, xor_ln451_1_fu_1948_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            state_0_s_d0 <= xor_ln451_1_fu_1948_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            state_0_s_d0 <= xor_ln417_fu_1934_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            state_0_s_d0 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            state_0_s_d0 <= grp_KeccakF1600_StatePer_fu_1365_state_0_d0;
        else 
            state_0_s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_0_s_d1_assign_proc : process(grp_KeccakF1600_StatePer_fu_1365_state_0_d1, ap_CS_fsm_state25, ap_CS_fsm_state23, xor_ln450_1_fu_1941_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            state_0_s_d1 <= xor_ln450_1_fu_1941_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            state_0_s_d1 <= grp_KeccakF1600_StatePer_fu_1365_state_0_d1;
        else 
            state_0_s_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_0_s_we0_assign_proc : process(ap_CS_fsm_state18, grp_KeccakF1600_StatePer_fu_1365_state_0_we0, icmp_ln362_1_fu_1823_p2, ap_CS_fsm_state22, ap_CS_fsm_state25, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or ((icmp_ln362_1_fu_1823_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            state_0_s_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            state_0_s_we0 <= grp_KeccakF1600_StatePer_fu_1365_state_0_we0;
        else 
            state_0_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_0_s_we1_assign_proc : process(grp_KeccakF1600_StatePer_fu_1365_state_0_we1, ap_CS_fsm_state25, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            state_0_s_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            state_0_s_we1 <= grp_KeccakF1600_StatePer_fu_1365_state_0_we1;
        else 
            state_0_s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    state_s_addr_9_reg_3366 <= ap_const_lv64_10(5 - 1 downto 0);

    state_s_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state66, ap_CS_fsm_state3, state_s_addr_reg_3361, state_s_addr_9_reg_3366, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state63, state_s_addr_12_reg_3690, ap_CS_fsm_state73, grp_keccak_absorb_2_fu_1342_s_address0, grp_KeccakF1600_StatePer_1_fu_1358_state_address0, grp_keccak_absorb_3199_fu_1416_s_address0, icmp_ln362_fu_1586_p2, ap_CS_fsm_state12, icmp_ln362_2_fu_2570_p2, ap_CS_fsm_state72, ap_CS_fsm_state4, ap_CS_fsm_state64, zext_ln363_fu_1598_p1, zext_ln540_fu_1637_p1, zext_ln363_2_fu_2582_p1, zext_ln540_2_fu_2621_p1, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            state_s_address0 <= zext_ln540_2_fu_2621_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            state_s_address0 <= state_s_addr_12_reg_3690;
        elsif (((icmp_ln362_2_fu_2570_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state63))) then 
            state_s_address0 <= zext_ln363_2_fu_2582_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_s_address0 <= zext_ln540_fu_1637_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_s_address0 <= state_s_addr_9_reg_3366;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_s_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            state_s_address0 <= state_s_addr_reg_3361;
        elsif (((icmp_ln362_fu_1586_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_s_address0 <= zext_ln363_fu_1598_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_s_address0 <= grp_keccak_absorb_3199_fu_1416_s_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            state_s_address0 <= grp_KeccakF1600_StatePer_1_fu_1358_state_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            state_s_address0 <= grp_keccak_absorb_2_fu_1342_s_address0;
        else 
            state_s_address0 <= "XXXXX";
        end if; 
    end process;


    state_s_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state66, grp_keccak_absorb_2_fu_1342_s_address1, grp_KeccakF1600_StatePer_1_fu_1358_state_address1, ap_CS_fsm_state12, ap_CS_fsm_state72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            state_s_address1 <= grp_KeccakF1600_StatePer_1_fu_1358_state_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            state_s_address1 <= grp_keccak_absorb_2_fu_1342_s_address1;
        else 
            state_s_address1 <= "XXXXX";
        end if; 
    end process;


    state_s_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state66, ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state63, ap_CS_fsm_state73, grp_keccak_absorb_2_fu_1342_s_ce0, grp_KeccakF1600_StatePer_1_fu_1358_state_ce0, grp_keccak_absorb_3199_fu_1416_s_ce0, icmp_ln362_fu_1586_p2, ap_CS_fsm_state12, icmp_ln362_2_fu_2570_p2, ap_CS_fsm_state72, ap_CS_fsm_state4, ap_CS_fsm_state64, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((icmp_ln362_2_fu_2570_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state63)) or ((icmp_ln362_fu_1586_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            state_s_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_s_ce0 <= grp_keccak_absorb_3199_fu_1416_s_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            state_s_ce0 <= grp_KeccakF1600_StatePer_1_fu_1358_state_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            state_s_ce0 <= grp_keccak_absorb_2_fu_1342_s_ce0;
        else 
            state_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_s_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state66, grp_keccak_absorb_2_fu_1342_s_ce1, grp_KeccakF1600_StatePer_1_fu_1358_state_ce1, ap_CS_fsm_state12, ap_CS_fsm_state72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            state_s_ce1 <= grp_KeccakF1600_StatePer_1_fu_1358_state_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            state_s_ce1 <= grp_keccak_absorb_2_fu_1342_s_ce1;
        else 
            state_s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_s_d0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state66, ap_CS_fsm_state3, ap_CS_fsm_state63, grp_keccak_absorb_2_fu_1342_s_d0, grp_KeccakF1600_StatePer_1_fu_1358_state_d0, grp_keccak_absorb_3199_fu_1416_s_d0, icmp_ln362_fu_1586_p2, ap_CS_fsm_state12, icmp_ln362_2_fu_2570_p2, ap_CS_fsm_state72, ap_CS_fsm_state4, ap_CS_fsm_state64, ap_CS_fsm_state8, xor_ln450_fu_1630_p2, ap_CS_fsm_state10, grp_fu_1467_p2, ap_CS_fsm_state68, xor_ln450_2_fu_2614_p2, ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            state_s_d0 <= xor_ln450_2_fu_2614_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_s_d0 <= grp_fu_1467_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_s_d0 <= xor_ln450_fu_1630_p2;
        elsif ((((icmp_ln362_2_fu_2570_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state63)) or ((icmp_ln362_fu_1586_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            state_s_d0 <= ap_const_lv64_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_s_d0 <= grp_keccak_absorb_3199_fu_1416_s_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            state_s_d0 <= grp_KeccakF1600_StatePer_1_fu_1358_state_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            state_s_d0 <= grp_keccak_absorb_2_fu_1342_s_d0;
        else 
            state_s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_s_d1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state66, grp_keccak_absorb_2_fu_1342_s_d1, grp_KeccakF1600_StatePer_1_fu_1358_state_d1, ap_CS_fsm_state12, ap_CS_fsm_state72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            state_s_d1 <= grp_KeccakF1600_StatePer_1_fu_1358_state_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            state_s_d1 <= grp_keccak_absorb_2_fu_1342_s_d1;
        else 
            state_s_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_s_we0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state66, ap_CS_fsm_state3, ap_CS_fsm_state63, grp_keccak_absorb_2_fu_1342_s_we0, grp_KeccakF1600_StatePer_1_fu_1358_state_we0, grp_keccak_absorb_3199_fu_1416_s_we0, icmp_ln362_fu_1586_p2, ap_CS_fsm_state12, icmp_ln362_2_fu_2570_p2, ap_CS_fsm_state72, ap_CS_fsm_state4, ap_CS_fsm_state64, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state68, ap_CS_fsm_state70)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((icmp_ln362_2_fu_2570_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state63)) or ((icmp_ln362_fu_1586_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            state_s_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_s_we0 <= grp_keccak_absorb_3199_fu_1416_s_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            state_s_we0 <= grp_KeccakF1600_StatePer_1_fu_1358_state_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            state_s_we0 <= grp_keccak_absorb_2_fu_1342_s_we0;
        else 
            state_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_s_we1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state66, grp_keccak_absorb_2_fu_1342_s_we1, grp_KeccakF1600_StatePer_1_fu_1358_state_we1, ap_CS_fsm_state12, ap_CS_fsm_state72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            state_s_we1 <= grp_KeccakF1600_StatePer_1_fu_1358_state_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            state_s_we1 <= grp_keccak_absorb_2_fu_1342_s_we1;
        else 
            state_s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln109_fu_3125_p2 <= std_logic_vector(unsigned(w0_vec_coeffs_q0) - unsigned(h_vec_coeffs_q0));
    sub_ln48_fu_2500_p2 <= std_logic_vector(unsigned(ap_const_lv9_2B) - unsigned(sext_ln47_fu_2496_p1));
    sub_ln52_1_fu_2564_p2 <= std_logic_vector(signed(grp_fu_3329_p3) - signed(select_ln52_fu_2556_p3));
    sub_ln52_fu_2543_p2 <= std_logic_vector(unsigned(ap_const_lv32_3FF000) - unsigned(grp_fu_3329_p3));

    t0_vec_coeffs_address0_assign_proc : process(ap_CS_fsm_state2, grp_unpack_sk_fu_1328_t0_vec_coeffs_address0, grp_ntt_fu_1395_a_address0, grp_polyveck_pointwise_p_fu_1432_v_vec_coeffs_address0, ap_CS_fsm_state39, ap_CS_fsm_state104)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            t0_vec_coeffs_address0 <= grp_polyveck_pointwise_p_fu_1432_v_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            t0_vec_coeffs_address0 <= grp_ntt_fu_1395_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t0_vec_coeffs_address0 <= grp_unpack_sk_fu_1328_t0_vec_coeffs_address0;
        else 
            t0_vec_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    t0_vec_coeffs_address1_assign_proc : process(ap_CS_fsm_state2, grp_unpack_sk_fu_1328_t0_vec_coeffs_address1, grp_ntt_fu_1395_a_address1, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            t0_vec_coeffs_address1 <= grp_ntt_fu_1395_a_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t0_vec_coeffs_address1 <= grp_unpack_sk_fu_1328_t0_vec_coeffs_address1;
        else 
            t0_vec_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    t0_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state2, grp_unpack_sk_fu_1328_t0_vec_coeffs_ce0, grp_ntt_fu_1395_a_ce0, grp_polyveck_pointwise_p_fu_1432_v_vec_coeffs_ce0, ap_CS_fsm_state39, ap_CS_fsm_state104)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            t0_vec_coeffs_ce0 <= grp_polyveck_pointwise_p_fu_1432_v_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            t0_vec_coeffs_ce0 <= grp_ntt_fu_1395_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t0_vec_coeffs_ce0 <= grp_unpack_sk_fu_1328_t0_vec_coeffs_ce0;
        else 
            t0_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t0_vec_coeffs_ce1_assign_proc : process(ap_CS_fsm_state2, grp_unpack_sk_fu_1328_t0_vec_coeffs_ce1, grp_ntt_fu_1395_a_ce1, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            t0_vec_coeffs_ce1 <= grp_ntt_fu_1395_a_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t0_vec_coeffs_ce1 <= grp_unpack_sk_fu_1328_t0_vec_coeffs_ce1;
        else 
            t0_vec_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    t0_vec_coeffs_d0_assign_proc : process(ap_CS_fsm_state2, grp_unpack_sk_fu_1328_t0_vec_coeffs_d0, grp_ntt_fu_1395_a_d0, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            t0_vec_coeffs_d0 <= grp_ntt_fu_1395_a_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t0_vec_coeffs_d0 <= grp_unpack_sk_fu_1328_t0_vec_coeffs_d0;
        else 
            t0_vec_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    t0_vec_coeffs_we0_assign_proc : process(ap_CS_fsm_state2, grp_unpack_sk_fu_1328_t0_vec_coeffs_we0, grp_ntt_fu_1395_a_we0, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            t0_vec_coeffs_we0 <= grp_ntt_fu_1395_a_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t0_vec_coeffs_we0 <= grp_unpack_sk_fu_1328_t0_vec_coeffs_we0;
        else 
            t0_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    t0_vec_coeffs_we1_assign_proc : process(ap_CS_fsm_state2, grp_unpack_sk_fu_1328_t0_vec_coeffs_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t0_vec_coeffs_we1 <= grp_unpack_sk_fu_1328_t0_vec_coeffs_we1;
        else 
            t0_vec_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;

    t_16_fu_3042_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_107_fu_3034_p3(0) = '1') else 
        ap_const_lv32_0;
    t_17_fu_3062_p2 <= std_logic_vector(unsigned(z_vec_coeffs_q0) - unsigned(and_ln301_fu_3056_p2));
    t_fu_2803_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_3802001) * signed(trunc_ln18_fu_2799_p1))), 32));
    tmp_106_fu_2548_p3 <= sub_ln52_fu_2543_p2(31 downto 31);
    tmp_107_fu_3034_p3 <= z_vec_coeffs_q0(31 downto 31);
    tmp_1127_fu_2347_p3 <= (ap_const_lv56_2 & phi_ln124_2_reg_1008);
    tmp_1128_fu_2373_p3 <= (ap_const_lv56_3 & phi_ln124_3_reg_1019);
    tmp_1129_fu_2429_p3 <= (i_0_i19_reg_1054 & ap_const_lv8_0);
    tmp_1130_fu_2742_p3 <= (i_0_i43_reg_1098 & ap_const_lv8_0);
    tmp_1131_fu_2864_p3 <= (i_0_i51_reg_1132 & ap_const_lv8_0);
    tmp_1132_fu_2926_p3 <= (i_0_i59_reg_1154 & ap_const_lv8_0);
    tmp_1133_fu_2996_p3 <= (i_0_i85_reg_1176 & ap_const_lv8_0);
    tmp_1134_fu_3086_p3 <= (i_0_i66_reg_1198 & ap_const_lv8_0);
    tmp_1135_fu_3144_p3 <= (i_0_i74_reg_1220 & ap_const_lv8_0);
    tmp_1136_fu_3202_p3 <= (i_0_i87_reg_1242 & ap_const_lv8_0);
    tmp_fu_2506_p3 <= sub_ln48_fu_2500_p2(8 downto 8);
    tmp_s_fu_2321_p3 <= (ap_const_lv56_1 & phi_ln124_1_reg_997);
    trunc_ln10_fu_2473_p4 <= add_ln42_fu_2467_p2(31 downto 7);
    trunc_ln11_fu_2487_p4 <= grp_fu_3320_p3(31 downto 24);
    trunc_ln12_fu_2970_p4 <= add_ln36_fu_2964_p2(31 downto 23);
    trunc_ln18_fu_2799_p1 <= mul_ln181_fu_2793_p2(32 - 1 downto 0);
    trunc_ln22_fu_2236_p1 <= i_0_i_reg_914(2 - 1 downto 0);
    trunc_ln31_fu_1906_p1 <= i_0_i5_i_reg_878(3 - 1 downto 0);
    trunc_ln450_1_fu_2592_p1 <= reg_1546(3 - 1 downto 0);
    trunc_ln450_fu_1608_p1 <= reg_1546(3 - 1 downto 0);
    trunc_ln541_1_fu_1972_p1 <= state_0_s_q1(8 - 1 downto 0);
    trunc_ln541_2_fu_2642_p1 <= state_s_q0(8 - 1 downto 0);
    trunc_ln541_3_fu_2638_p1 <= i_3_i47_reg_1087(2 - 1 downto 0);
    trunc_ln541_fu_1654_p1 <= state_s_q0(8 - 1 downto 0);

    w0_vec_coeffs_address0_assign_proc : process(zext_ln226_1_reg_3672, ap_CS_fsm_state99, w0_vec_coeffs_addr_1_reg_3875, ap_CS_fsm_state103, ap_CS_fsm_state112, w0_vec_coeffs_addr_2_reg_3914, ap_CS_fsm_state116, zext_ln249_1_fu_3241_p1, grp_polyveck_chknorm_fu_1439_v_vec_coeffs_address0, grp_polyveck_caddq_fu_1447_v_vec_coeffs_address0, grp_polyveck_reduce_fu_1452_v_vec_coeffs_address0, ap_CS_fsm_state61, ap_CS_fsm_state100, ap_CS_fsm_state113, ap_CS_fsm_state114, ap_CS_fsm_state101, zext_ln109_1_fu_3119_p1, zext_ln88_6_fu_3177_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state116)) then 
            w0_vec_coeffs_address0 <= zext_ln249_1_fu_3241_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
            w0_vec_coeffs_address0 <= w0_vec_coeffs_addr_2_reg_3914;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            w0_vec_coeffs_address0 <= zext_ln88_6_fu_3177_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            w0_vec_coeffs_address0 <= w0_vec_coeffs_addr_1_reg_3875;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            w0_vec_coeffs_address0 <= zext_ln109_1_fu_3119_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            w0_vec_coeffs_address0 <= zext_ln226_1_reg_3672(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            w0_vec_coeffs_address0 <= grp_polyveck_reduce_fu_1452_v_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            w0_vec_coeffs_address0 <= grp_polyveck_caddq_fu_1447_v_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            w0_vec_coeffs_address0 <= grp_polyveck_chknorm_fu_1439_v_vec_coeffs_address0;
        else 
            w0_vec_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    w0_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state99, ap_CS_fsm_state103, ap_CS_fsm_state112, ap_CS_fsm_state116, grp_polyveck_chknorm_fu_1439_v_vec_coeffs_ce0, grp_polyveck_caddq_fu_1447_v_vec_coeffs_ce0, grp_polyveck_reduce_fu_1452_v_vec_coeffs_ce0, ap_CS_fsm_state61, ap_CS_fsm_state100, ap_CS_fsm_state113, ap_CS_fsm_state114, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            w0_vec_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            w0_vec_coeffs_ce0 <= grp_polyveck_reduce_fu_1452_v_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            w0_vec_coeffs_ce0 <= grp_polyveck_caddq_fu_1447_v_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            w0_vec_coeffs_ce0 <= grp_polyveck_chknorm_fu_1439_v_vec_coeffs_ce0;
        else 
            w0_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w0_vec_coeffs_d0_assign_proc : process(grp_polyveck_caddq_fu_1447_v_vec_coeffs_d0, grp_polyveck_reduce_fu_1452_v_vec_coeffs_d0, ap_CS_fsm_state61, ap_CS_fsm_state100, ap_CS_fsm_state113, ap_CS_fsm_state114, ap_CS_fsm_state101, sub_ln52_1_fu_2564_p2, sub_ln109_fu_3125_p2, add_ln88_2_fu_3183_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
            w0_vec_coeffs_d0 <= add_ln88_2_fu_3183_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            w0_vec_coeffs_d0 <= sub_ln109_fu_3125_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            w0_vec_coeffs_d0 <= sub_ln52_1_fu_2564_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            w0_vec_coeffs_d0 <= grp_polyveck_reduce_fu_1452_v_vec_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            w0_vec_coeffs_d0 <= grp_polyveck_caddq_fu_1447_v_vec_coeffs_d0;
        else 
            w0_vec_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    w0_vec_coeffs_we0_assign_proc : process(grp_polyveck_caddq_fu_1447_v_vec_coeffs_we0, grp_polyveck_reduce_fu_1452_v_vec_coeffs_we0, ap_CS_fsm_state61, ap_CS_fsm_state100, ap_CS_fsm_state113, ap_CS_fsm_state114, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            w0_vec_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            w0_vec_coeffs_we0 <= grp_polyveck_reduce_fu_1452_v_vec_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            w0_vec_coeffs_we0 <= grp_polyveck_caddq_fu_1447_v_vec_coeffs_we0;
        else 
            w0_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w1_vec_coeffs_address0_assign_proc : process(ap_CS_fsm_state60, zext_ln226_1_fu_2462_p1, w1_vec_coeffs_addr_reg_3677, ap_CS_fsm_state116, zext_ln249_1_fu_3241_p1, grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_address0, grp_polyvecl_pointwise_a_fu_1407_w_coeffs_address0, grp_polyveck_pack_w1_fu_1425_w1_vec_coeffs_address0, grp_polyveck_caddq_fu_1447_v_vec_coeffs_address0, grp_polyveck_reduce_fu_1452_v_vec_coeffs_address0, ap_CS_fsm_state53, ap_CS_fsm_state58, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state56, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state116)) then 
            w1_vec_coeffs_address0 <= zext_ln249_1_fu_3241_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            w1_vec_coeffs_address0 <= w1_vec_coeffs_addr_reg_3677;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            w1_vec_coeffs_address0 <= zext_ln226_1_fu_2462_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            w1_vec_coeffs_address0 <= grp_polyveck_reduce_fu_1452_v_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            w1_vec_coeffs_address0 <= grp_polyveck_caddq_fu_1447_v_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            w1_vec_coeffs_address0 <= grp_polyveck_pack_w1_fu_1425_w1_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            w1_vec_coeffs_address0 <= grp_polyvecl_pointwise_a_fu_1407_w_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            w1_vec_coeffs_address0 <= grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_address0;
        else 
            w1_vec_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    w1_vec_coeffs_address1_assign_proc : process(grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_address1, grp_polyveck_pack_w1_fu_1425_w1_vec_coeffs_address1, ap_CS_fsm_state62, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            w1_vec_coeffs_address1 <= grp_polyveck_pack_w1_fu_1425_w1_vec_coeffs_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            w1_vec_coeffs_address1 <= grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_address1;
        else 
            w1_vec_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    w1_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state60, ap_CS_fsm_state116, grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_ce0, grp_polyvecl_pointwise_a_fu_1407_w_coeffs_ce0, grp_polyveck_pack_w1_fu_1425_w1_vec_coeffs_ce0, grp_polyveck_caddq_fu_1447_v_vec_coeffs_ce0, grp_polyveck_reduce_fu_1452_v_vec_coeffs_ce0, ap_CS_fsm_state53, ap_CS_fsm_state58, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state56, ap_CS_fsm_state54)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            w1_vec_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            w1_vec_coeffs_ce0 <= grp_polyveck_reduce_fu_1452_v_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            w1_vec_coeffs_ce0 <= grp_polyveck_caddq_fu_1447_v_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            w1_vec_coeffs_ce0 <= grp_polyveck_pack_w1_fu_1425_w1_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            w1_vec_coeffs_ce0 <= grp_polyvecl_pointwise_a_fu_1407_w_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            w1_vec_coeffs_ce0 <= grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_ce0;
        else 
            w1_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w1_vec_coeffs_ce1_assign_proc : process(grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_ce1, grp_polyveck_pack_w1_fu_1425_w1_vec_coeffs_ce1, ap_CS_fsm_state62, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            w1_vec_coeffs_ce1 <= grp_polyveck_pack_w1_fu_1425_w1_vec_coeffs_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            w1_vec_coeffs_ce1 <= grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_ce1;
        else 
            w1_vec_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    w1_vec_coeffs_d0_assign_proc : process(grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_d0, grp_polyvecl_pointwise_a_fu_1407_w_coeffs_d0, grp_polyveck_caddq_fu_1447_v_vec_coeffs_d0, grp_polyveck_reduce_fu_1452_v_vec_coeffs_d0, ap_CS_fsm_state53, ap_CS_fsm_state58, ap_CS_fsm_state61, ap_CS_fsm_state56, ap_CS_fsm_state54, sext_ln48_1_fu_2538_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            w1_vec_coeffs_d0 <= sext_ln48_1_fu_2538_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            w1_vec_coeffs_d0 <= grp_polyveck_reduce_fu_1452_v_vec_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            w1_vec_coeffs_d0 <= grp_polyveck_caddq_fu_1447_v_vec_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            w1_vec_coeffs_d0 <= grp_polyvecl_pointwise_a_fu_1407_w_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            w1_vec_coeffs_d0 <= grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_d0;
        else 
            w1_vec_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    w1_vec_coeffs_we0_assign_proc : process(grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_we0, grp_polyvecl_pointwise_a_fu_1407_w_coeffs_we0, grp_polyveck_caddq_fu_1447_v_vec_coeffs_we0, grp_polyveck_reduce_fu_1452_v_vec_coeffs_we0, ap_CS_fsm_state53, ap_CS_fsm_state58, ap_CS_fsm_state61, ap_CS_fsm_state56, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            w1_vec_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            w1_vec_coeffs_we0 <= grp_polyveck_reduce_fu_1452_v_vec_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            w1_vec_coeffs_we0 <= grp_polyveck_caddq_fu_1447_v_vec_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            w1_vec_coeffs_we0 <= grp_polyvecl_pointwise_a_fu_1407_w_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            w1_vec_coeffs_we0 <= grp_polyveck_invntt_tomo_fu_1372_v_vec_coeffs_we0;
        else 
            w1_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln417_fu_1934_p2 <= (state_0_s_q1 xor r_0_i6_i_reg_890);
    xor_ln450_1_fu_1941_p2 <= (state_0_s_q0 xor ap_const_lv64_1F);
    xor_ln450_2_fu_2614_p2 <= (state_s_q0 xor shl_ln450_1_fu_2608_p2);
    xor_ln450_fu_1630_p2 <= (state_s_q0 xor shl_ln450_fu_1624_p2);
    xor_ln451_1_fu_1948_p2 <= (state_0_s_q1 xor ap_const_lv64_8000000000000000);
    xor_ln48_fu_2514_p2 <= (tmp_fu_2506_p3 xor ap_const_lv1_1);
    xor_ln69_fu_3299_p2 <= (or_ln69_1_fu_3293_p2 xor ap_const_lv1_1);

    y_vec_coeffs_address0_assign_proc : process(ap_CS_fsm_state42, zext_ln124_fu_2299_p1, ap_CS_fsm_state44, tmp_s_fu_2321_p3, ap_CS_fsm_state46, tmp_1127_fu_2347_p3, ap_CS_fsm_state48, tmp_1128_fu_2373_p3, ap_CS_fsm_state87, grp_polyvecl_uniform_gam_fu_1318_v_vec_coeffs_address0, ap_CS_fsm_state41, zext_ln88_4_fu_2897_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            y_vec_coeffs_address0 <= zext_ln88_4_fu_2897_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            y_vec_coeffs_address0 <= tmp_1128_fu_2373_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            y_vec_coeffs_address0 <= tmp_1127_fu_2347_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            y_vec_coeffs_address0 <= tmp_s_fu_2321_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            y_vec_coeffs_address0 <= zext_ln124_fu_2299_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            y_vec_coeffs_address0 <= grp_polyvecl_uniform_gam_fu_1318_v_vec_coeffs_address0;
        else 
            y_vec_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    y_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state87, grp_polyvecl_uniform_gam_fu_1318_v_vec_coeffs_ce0, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            y_vec_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            y_vec_coeffs_ce0 <= grp_polyvecl_uniform_gam_fu_1318_v_vec_coeffs_ce0;
        else 
            y_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_vec_coeffs_we0_assign_proc : process(grp_polyvecl_uniform_gam_fu_1318_v_vec_coeffs_we0, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            y_vec_coeffs_we0 <= grp_polyvecl_uniform_gam_fu_1318_v_vec_coeffs_we0;
        else 
            y_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    z_vec_coeffs_address0_assign_proc : process(zext_ln124_reg_3564, tmp_s_reg_3583, tmp_1127_reg_3602, tmp_1128_reg_3621, zext_ln181_16_reg_3744, ap_CS_fsm_state87, z_vec_coeffs_addr_5_reg_3793, ap_CS_fsm_state90, z_vec_coeffs_addr_6_reg_3819, ap_CS_fsm_state93, grp_pack_sig_fu_1288_z_vec_coeffs_address0, grp_invntt_tomont_fu_1379_a_address0, grp_ntt_fu_1395_a_address0, grp_polyvecl_pointwise_a_fu_1407_v_vec_coeffs_address0, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state83, ap_CS_fsm_state85, ap_CS_fsm_state88, ap_CS_fsm_state91, ap_CS_fsm_state118, zext_ln88_4_fu_2897_p1, zext_ln33_2_fu_2959_p1, zext_ln300_2_fu_3029_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            z_vec_coeffs_address0 <= zext_ln300_2_fu_3029_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            z_vec_coeffs_address0 <= z_vec_coeffs_addr_6_reg_3819;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            z_vec_coeffs_address0 <= zext_ln33_2_fu_2959_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            z_vec_coeffs_address0 <= z_vec_coeffs_addr_5_reg_3793;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            z_vec_coeffs_address0 <= zext_ln88_4_fu_2897_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            z_vec_coeffs_address0 <= zext_ln181_16_reg_3744(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            z_vec_coeffs_address0 <= tmp_1128_reg_3621(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            z_vec_coeffs_address0 <= tmp_1127_reg_3602(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            z_vec_coeffs_address0 <= tmp_s_reg_3583(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            z_vec_coeffs_address0 <= zext_ln124_reg_3564(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            z_vec_coeffs_address0 <= grp_polyvecl_pointwise_a_fu_1407_v_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            z_vec_coeffs_address0 <= grp_ntt_fu_1395_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            z_vec_coeffs_address0 <= grp_invntt_tomont_fu_1379_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            z_vec_coeffs_address0 <= grp_pack_sig_fu_1288_z_vec_coeffs_address0;
        else 
            z_vec_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    z_vec_coeffs_address1_assign_proc : process(grp_invntt_tomont_fu_1379_a_address1, grp_ntt_fu_1395_a_address1, ap_CS_fsm_state51, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            z_vec_coeffs_address1 <= grp_ntt_fu_1395_a_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            z_vec_coeffs_address1 <= grp_invntt_tomont_fu_1379_a_address1;
        else 
            z_vec_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    z_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state87, ap_CS_fsm_state90, ap_CS_fsm_state93, grp_pack_sig_fu_1288_z_vec_coeffs_ce0, grp_invntt_tomont_fu_1379_a_ce0, grp_ntt_fu_1395_a_ce0, grp_polyvecl_pointwise_a_fu_1407_v_vec_coeffs_ce0, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state83, ap_CS_fsm_state85, ap_CS_fsm_state88, ap_CS_fsm_state91, ap_CS_fsm_state118)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            z_vec_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            z_vec_coeffs_ce0 <= grp_polyvecl_pointwise_a_fu_1407_v_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            z_vec_coeffs_ce0 <= grp_ntt_fu_1395_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            z_vec_coeffs_ce0 <= grp_invntt_tomont_fu_1379_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            z_vec_coeffs_ce0 <= grp_pack_sig_fu_1288_z_vec_coeffs_ce0;
        else 
            z_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    z_vec_coeffs_ce1_assign_proc : process(grp_invntt_tomont_fu_1379_a_ce1, grp_ntt_fu_1395_a_ce1, ap_CS_fsm_state51, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            z_vec_coeffs_ce1 <= grp_ntt_fu_1395_a_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            z_vec_coeffs_ce1 <= grp_invntt_tomont_fu_1379_a_ce1;
        else 
            z_vec_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    z_vec_coeffs_d0_assign_proc : process(grp_invntt_tomont_fu_1379_a_d0, grp_ntt_fu_1395_a_d0, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state83, ap_CS_fsm_state85, ap_CS_fsm_state88, ap_CS_fsm_state91, sext_ln124_fu_2310_p1, sext_ln124_1_fu_2336_p1, sext_ln124_2_fu_2362_p1, sext_ln124_3_fu_2388_p1, add_ln88_fu_2907_p2, grp_fu_3339_p3, add_ln19_fu_2823_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            z_vec_coeffs_d0 <= grp_fu_3339_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            z_vec_coeffs_d0 <= add_ln88_fu_2907_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            z_vec_coeffs_d0 <= add_ln19_fu_2823_p2(63 downto 32);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            z_vec_coeffs_d0 <= sext_ln124_3_fu_2388_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            z_vec_coeffs_d0 <= sext_ln124_2_fu_2362_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            z_vec_coeffs_d0 <= sext_ln124_1_fu_2336_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            z_vec_coeffs_d0 <= sext_ln124_fu_2310_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            z_vec_coeffs_d0 <= grp_ntt_fu_1395_a_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            z_vec_coeffs_d0 <= grp_invntt_tomont_fu_1379_a_d0;
        else 
            z_vec_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    z_vec_coeffs_we0_assign_proc : process(grp_invntt_tomont_fu_1379_a_we0, grp_ntt_fu_1395_a_we0, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state83, ap_CS_fsm_state85, ap_CS_fsm_state88, ap_CS_fsm_state91)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            z_vec_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            z_vec_coeffs_we0 <= grp_ntt_fu_1395_a_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            z_vec_coeffs_we0 <= grp_invntt_tomont_fu_1379_a_we0;
        else 
            z_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln104_fu_3094_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1134_fu_3086_p3),12));
    zext_ln109_1_fu_3119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln109_fu_3114_p2),64));
    zext_ln109_fu_3110_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i67_reg_1209),12));
    zext_ln124_fu_2299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln124_reg_986),64));
    zext_ln176_fu_2750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1130_fu_2742_p3),12));
    zext_ln181_15_fu_2771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i44_reg_1109),12));
    zext_ln181_16_fu_2780_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln181_fu_2775_p2),64));
    zext_ln181_fu_2766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i44_reg_1109),64));
    zext_ln221_fu_2437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1129_fu_2429_p3),12));
    zext_ln226_1_fu_2462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln226_fu_2457_p2),64));
    zext_ln226_fu_2453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i20_reg_1065),12));
    zext_ln244_fu_3210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1136_fu_3202_p3),12));
    zext_ln248_fu_3247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(s_0_i_i_reg_1276),11));
    zext_ln249_1_fu_3241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln249_fu_3236_p2),64));
    zext_ln249_fu_3232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i88_reg_1265),12));
    zext_ln26_fu_1864_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln22_fu_1856_p3),8));
    zext_ln287_fu_3004_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1133_fu_2996_p3),12));
    zext_ln28_fu_2934_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1132_fu_2926_p3),12));
    zext_ln300_2_fu_3029_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln300_fu_3024_p2),64));
    zext_ln300_fu_3020_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i86_reg_1187),12));
    zext_ln31_18_fu_1897_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_fu_1892_p2),64));
    zext_ln31_19_fu_1902_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(seedbuf_q0),64));
    zext_ln31_20_fu_1918_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln23_fu_1910_p3),64));
    zext_ln31_fu_1888_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_1880_p3),8));
    zext_ln33_2_fu_2959_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln33_fu_2954_p2),64));
    zext_ln33_fu_2950_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i60_reg_1165),12));
    zext_ln363_1_fu_1835_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_i_reg_856),64));
    zext_ln363_2_fu_2582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i23_reg_1076),64));
    zext_ln363_fu_1598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_reg_833),64));
    zext_ln416_fu_1840_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_i1_reg_867),64));
    zext_ln450_4_fu_1603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1457_p4),64));
    zext_ln450_5_fu_2604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln450_5_fu_2596_p3),64));
    zext_ln450_6_fu_2587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1457_p4),64));
    zext_ln450_fu_1620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_1612_p3),64));
    zext_ln540_1_fu_1955_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_i3_reg_902),64));
    zext_ln540_2_fu_2621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_i47_reg_1087),64));
    zext_ln540_fu_1637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_i_reg_844),64));
    zext_ln541_1_fu_1677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln541_fu_1671_p2),64));
    zext_ln541_2_fu_1985_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln541_1_fu_1977_p3),8));
    zext_ln541_3_fu_1995_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln541_1_fu_1989_p2),64));
    zext_ln541_4_fu_2654_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln541_2_fu_2647_p3),64));
    zext_ln541_fu_1667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln21_fu_1659_p3),8));
    zext_ln542_1_fu_1698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln542_fu_1692_p2),64));
    zext_ln542_2_fu_2017_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln542_1_fu_2011_p2),8));
    zext_ln542_3_fu_2027_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln542_1_fu_2021_p2),64));
    zext_ln542_4_fu_2665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln542_2_fu_2659_p2),64));
    zext_ln542_fu_1688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln542_fu_1682_p2),8));
    zext_ln543_1_fu_1718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln543_fu_1712_p2),64));
    zext_ln543_2_fu_2097_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln543_1_fu_2092_p2),8));
    zext_ln543_3_fu_2107_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln543_1_fu_2101_p2),64));
    zext_ln543_4_fu_2675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln543_2_fu_2670_p2),64));
    zext_ln543_fu_1708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln543_fu_1703_p2),8));
    zext_ln544_1_fu_1738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln544_fu_1732_p2),64));
    zext_ln544_2_fu_2117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln544_1_fu_2112_p2),8));
    zext_ln544_3_fu_2127_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln544_1_fu_2121_p2),64));
    zext_ln544_4_fu_2685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln544_2_fu_2680_p2),64));
    zext_ln544_fu_1728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln544_fu_1723_p2),8));
    zext_ln545_1_fu_1758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln545_fu_1752_p2),64));
    zext_ln545_2_fu_2137_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln545_1_fu_2132_p2),8));
    zext_ln545_3_fu_2147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln545_1_fu_2141_p2),64));
    zext_ln545_4_fu_2695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln545_2_fu_2690_p2),64));
    zext_ln545_fu_1748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln545_fu_1743_p2),8));
    zext_ln546_1_fu_1778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln546_fu_1772_p2),64));
    zext_ln546_2_fu_2157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln546_1_fu_2152_p2),8));
    zext_ln546_3_fu_2167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln546_1_fu_2161_p2),64));
    zext_ln546_4_fu_2705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln546_2_fu_2700_p2),64));
    zext_ln546_fu_1768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln546_fu_1763_p2),8));
    zext_ln547_1_fu_1798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln547_fu_1792_p2),64));
    zext_ln547_2_fu_2177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln547_1_fu_2172_p2),8));
    zext_ln547_3_fu_2187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln547_1_fu_2181_p2),64));
    zext_ln547_4_fu_2715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln547_2_fu_2710_p2),64));
    zext_ln547_fu_1788_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln547_fu_1783_p2),8));
    zext_ln548_1_fu_1818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln548_fu_1812_p2),64));
    zext_ln548_2_fu_2197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln548_1_fu_2192_p2),8));
    zext_ln548_3_fu_2207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln548_1_fu_2201_p2),64));
    zext_ln548_4_fu_2725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln548_2_fu_2720_p2),64));
    zext_ln548_fu_1808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln548_fu_1803_p2),8));
    zext_ln69_1_fu_3309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln69_fu_3299_p2),32));
    zext_ln69_fu_3305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln69_fu_3299_p2),9));
    zext_ln83_1_fu_3152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1135_fu_3144_p3),12));
    zext_ln83_fu_2872_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1131_fu_2864_p3),12));
    zext_ln88_4_fu_2897_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln88_3_fu_2892_p2),64));
    zext_ln88_5_fu_3168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i75_reg_1231),12));
    zext_ln88_6_fu_3177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln88_4_fu_3172_p2),64));
    zext_ln88_fu_2888_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i52_reg_1143),12));
end behav;
