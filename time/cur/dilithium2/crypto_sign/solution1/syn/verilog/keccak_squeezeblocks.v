// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module keccak_squeezeblocks (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0,
        out_r_address1,
        out_r_ce1,
        out_r_we1,
        out_r_d1,
        s_address0,
        s_ce0,
        s_we0,
        s_d0,
        s_q0,
        s_address1,
        s_ce1,
        s_we1,
        s_d1,
        s_q1
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_pp0_stage0 = 8'd8;
parameter    ap_ST_fsm_pp0_stage1 = 8'd16;
parameter    ap_ST_fsm_pp0_stage2 = 8'd32;
parameter    ap_ST_fsm_pp0_stage3 = 8'd64;
parameter    ap_ST_fsm_state9 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [7:0] out_r_d0;
output  [7:0] out_r_address1;
output   out_r_ce1;
output   out_r_we1;
output  [7:0] out_r_d1;
output  [4:0] s_address0;
output   s_ce0;
output   s_we0;
output  [63:0] s_d0;
input  [63:0] s_q0;
output  [4:0] s_address1;
output   s_ce1;
output   s_we1;
output  [63:0] s_d1;
input  [63:0] s_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] out_r_address0;
reg out_r_ce0;
reg out_r_we0;
reg[7:0] out_r_d0;
reg[7:0] out_r_address1;
reg out_r_ce1;
reg out_r_we1;
reg[7:0] out_r_d1;
reg[4:0] s_address0;
reg s_ce0;
reg s_we0;
reg s_ce1;
reg s_we1;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] i_0_reg_203;
wire   [0:0] icmp_ln488_fu_220_p2;
reg   [0:0] icmp_ln488_reg_408;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] i_fu_226_p2;
reg   [4:0] i_reg_412;
reg    ap_enable_reg_pp0_iter0;
wire   [7:0] shl_ln_fu_232_p3;
reg   [7:0] shl_ln_reg_417;
wire   [7:0] add_ln490_fu_245_p2;
reg   [7:0] add_ln490_reg_427;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg   [7:0] trunc_ln49_5_reg_437;
reg   [7:0] trunc_ln49_6_reg_442;
reg   [7:0] trunc_ln49_7_reg_447;
reg   [7:0] trunc_ln49_8_reg_452;
reg   [7:0] trunc_ln49_9_reg_457;
reg   [7:0] trunc_ln49_1_reg_462;
wire   [7:0] add_ln492_fu_402_p2;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state3;
wire    grp_KeccakF1600_StatePer_1_fu_214_ap_ready;
wire    grp_KeccakF1600_StatePer_1_fu_214_ap_done;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state7_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_subdone;
wire    ap_CS_fsm_pp0_stage3;
wire    grp_KeccakF1600_StatePer_1_fu_214_ap_start;
wire    grp_KeccakF1600_StatePer_1_fu_214_ap_idle;
wire   [4:0] grp_KeccakF1600_StatePer_1_fu_214_state_address0;
wire    grp_KeccakF1600_StatePer_1_fu_214_state_ce0;
wire    grp_KeccakF1600_StatePer_1_fu_214_state_we0;
wire   [63:0] grp_KeccakF1600_StatePer_1_fu_214_state_d0;
wire   [4:0] grp_KeccakF1600_StatePer_1_fu_214_state_address1;
wire    grp_KeccakF1600_StatePer_1_fu_214_state_ce1;
wire    grp_KeccakF1600_StatePer_1_fu_214_state_we1;
wire   [63:0] grp_KeccakF1600_StatePer_1_fu_214_state_d1;
wire   [0:0] ap_phi_mux_p_01_phi_fu_183_p4;
reg   [0:0] p_01_reg_178;
reg   [7:0] p_0_rec_reg_191;
reg   [4:0] ap_phi_mux_i_0_phi_fu_207_p4;
wire    ap_block_pp0_stage0;
reg    grp_KeccakF1600_StatePer_1_fu_214_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln490_1_fu_240_p1;
wire   [63:0] zext_ln490_fu_250_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln49_fu_277_p1;
wire   [63:0] zext_ln49_13_fu_347_p1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln49_14_fu_357_p1;
wire   [63:0] zext_ln49_15_fu_367_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln49_16_fu_377_p1;
wire   [63:0] zext_ln49_17_fu_387_p1;
wire   [63:0] zext_ln49_18_fu_397_p1;
wire   [7:0] trunc_ln49_fu_255_p1;
wire    ap_block_state6_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire    ap_block_pp0_stage3_11001;
wire   [7:0] or_ln49_fu_271_p2;
wire   [7:0] or_ln49_7_fu_342_p2;
wire   [7:0] or_ln49_8_fu_352_p2;
wire   [7:0] or_ln49_9_fu_362_p2;
wire   [7:0] or_ln49_10_fu_372_p2;
wire   [7:0] or_ln49_11_fu_382_p2;
wire   [7:0] or_ln49_12_fu_392_p2;
reg   [7:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 grp_KeccakF1600_StatePer_1_fu_214_ap_start_reg = 1'b0;
end

KeccakF1600_StatePer_1 grp_KeccakF1600_StatePer_1_fu_214(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_KeccakF1600_StatePer_1_fu_214_ap_start),
    .ap_done(grp_KeccakF1600_StatePer_1_fu_214_ap_done),
    .ap_idle(grp_KeccakF1600_StatePer_1_fu_214_ap_idle),
    .ap_ready(grp_KeccakF1600_StatePer_1_fu_214_ap_ready),
    .state_address0(grp_KeccakF1600_StatePer_1_fu_214_state_address0),
    .state_ce0(grp_KeccakF1600_StatePer_1_fu_214_state_ce0),
    .state_we0(grp_KeccakF1600_StatePer_1_fu_214_state_we0),
    .state_d0(grp_KeccakF1600_StatePer_1_fu_214_state_d0),
    .state_q0(s_q0),
    .state_address1(grp_KeccakF1600_StatePer_1_fu_214_state_address1),
    .state_ce1(grp_KeccakF1600_StatePer_1_fu_214_state_ce1),
    .state_we1(grp_KeccakF1600_StatePer_1_fu_214_state_we1),
    .state_d1(grp_KeccakF1600_StatePer_1_fu_214_state_d1),
    .state_q1(s_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (grp_KeccakF1600_StatePer_1_fu_214_ap_done == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (grp_KeccakF1600_StatePer_1_fu_214_ap_done == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_KeccakF1600_StatePer_1_fu_214_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_p_01_phi_fu_183_p4 == 1'd1))) begin
            grp_KeccakF1600_StatePer_1_fu_214_ap_start_reg <= 1'b1;
        end else if ((grp_KeccakF1600_StatePer_1_fu_214_ap_ready == 1'b1)) begin
            grp_KeccakF1600_StatePer_1_fu_214_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln488_reg_408 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_0_reg_203 <= i_reg_412;
    end else if (((1'b1 == ap_CS_fsm_state3) & (grp_KeccakF1600_StatePer_1_fu_214_ap_done == 1'b1))) begin
        i_0_reg_203 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_01_reg_178 <= 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_01_reg_178 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_0_rec_reg_191 <= add_ln492_fu_402_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_0_rec_reg_191 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln488_reg_408 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln490_reg_427 <= add_ln490_fu_245_p2;
        trunc_ln49_1_reg_462 <= {{s_q0[63:56]}};
        trunc_ln49_5_reg_437 <= {{s_q0[23:16]}};
        trunc_ln49_6_reg_442 <= {{s_q0[31:24]}};
        trunc_ln49_7_reg_447 <= {{s_q0[39:32]}};
        trunc_ln49_8_reg_452 <= {{s_q0[47:40]}};
        trunc_ln49_9_reg_457 <= {{s_q0[55:48]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_412 <= i_fu_226_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln488_reg_408 <= icmp_ln488_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln488_fu_220_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shl_ln_reg_417[7 : 3] <= shl_ln_fu_232_p3[7 : 3];
    end
end

always @ (*) begin
    if ((icmp_ln488_fu_220_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_phi_mux_p_01_phi_fu_183_p4 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln488_reg_408 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_207_p4 = i_reg_412;
    end else begin
        ap_phi_mux_i_0_phi_fu_207_p4 = i_0_reg_203;
    end
end

always @ (*) begin
    if (((ap_phi_mux_p_01_phi_fu_183_p4 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        out_r_address0 = zext_ln49_17_fu_387_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_r_address0 = zext_ln49_15_fu_367_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_r_address0 = zext_ln49_13_fu_347_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        out_r_address0 = zext_ln490_fu_250_p1;
    end else begin
        out_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        out_r_address1 = zext_ln49_18_fu_397_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_r_address1 = zext_ln49_16_fu_377_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_r_address1 = zext_ln49_14_fu_357_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        out_r_address1 = zext_ln49_fu_277_p1;
    end else begin
        out_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        out_r_ce1 = 1'b1;
    end else begin
        out_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        out_r_d0 = trunc_ln49_9_reg_457;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_r_d0 = trunc_ln49_7_reg_447;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_r_d0 = trunc_ln49_5_reg_437;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        out_r_d0 = trunc_ln49_fu_255_p1;
    end else begin
        out_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        out_r_d1 = trunc_ln49_1_reg_462;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_r_d1 = trunc_ln49_8_reg_452;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_r_d1 = trunc_ln49_6_reg_442;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        out_r_d1 = {{s_q0[15:8]}};
    end else begin
        out_r_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln488_reg_408 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln488_reg_408 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln488_reg_408 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln488_reg_408 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln488_reg_408 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln488_reg_408 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln488_reg_408 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln488_reg_408 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        out_r_we1 = 1'b1;
    end else begin
        out_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        s_address0 = zext_ln490_1_fu_240_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        s_address0 = grp_KeccakF1600_StatePer_1_fu_214_state_address0;
    end else begin
        s_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        s_ce0 = grp_KeccakF1600_StatePer_1_fu_214_state_ce0;
    end else begin
        s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        s_ce1 = grp_KeccakF1600_StatePer_1_fu_214_state_ce1;
    end else begin
        s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        s_we0 = grp_KeccakF1600_StatePer_1_fu_214_state_we0;
    end else begin
        s_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        s_we1 = grp_KeccakF1600_StatePer_1_fu_214_state_we1;
    end else begin
        s_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ap_phi_mux_p_01_phi_fu_183_p4 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_KeccakF1600_StatePer_1_fu_214_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln488_fu_220_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln488_fu_220_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln490_fu_245_p2 = (p_0_rec_reg_191 + shl_ln_reg_417);

assign add_ln492_fu_402_p2 = ($signed(p_0_rec_reg_191) + $signed(8'd136));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_p_01_phi_fu_183_p4 = p_01_reg_178;

assign grp_KeccakF1600_StatePer_1_fu_214_ap_start = grp_KeccakF1600_StatePer_1_fu_214_ap_start_reg;

assign i_fu_226_p2 = (ap_phi_mux_i_0_phi_fu_207_p4 + 5'd1);

assign icmp_ln488_fu_220_p2 = ((ap_phi_mux_i_0_phi_fu_207_p4 == 5'd17) ? 1'b1 : 1'b0);

assign or_ln49_10_fu_372_p2 = (8'd5 | add_ln490_reg_427);

assign or_ln49_11_fu_382_p2 = (8'd6 | add_ln490_reg_427);

assign or_ln49_12_fu_392_p2 = (8'd7 | add_ln490_reg_427);

assign or_ln49_7_fu_342_p2 = (8'd2 | add_ln490_reg_427);

assign or_ln49_8_fu_352_p2 = (8'd3 | add_ln490_reg_427);

assign or_ln49_9_fu_362_p2 = (8'd4 | add_ln490_reg_427);

assign or_ln49_fu_271_p2 = (8'd1 | add_ln490_fu_245_p2);

assign s_address1 = grp_KeccakF1600_StatePer_1_fu_214_state_address1;

assign s_d0 = grp_KeccakF1600_StatePer_1_fu_214_state_d0;

assign s_d1 = grp_KeccakF1600_StatePer_1_fu_214_state_d1;

assign shl_ln_fu_232_p3 = {{ap_phi_mux_i_0_phi_fu_207_p4}, {3'd0}};

assign trunc_ln49_fu_255_p1 = s_q0[7:0];

assign zext_ln490_1_fu_240_p1 = ap_phi_mux_i_0_phi_fu_207_p4;

assign zext_ln490_fu_250_p1 = add_ln490_fu_245_p2;

assign zext_ln49_13_fu_347_p1 = or_ln49_7_fu_342_p2;

assign zext_ln49_14_fu_357_p1 = or_ln49_8_fu_352_p2;

assign zext_ln49_15_fu_367_p1 = or_ln49_9_fu_362_p2;

assign zext_ln49_16_fu_377_p1 = or_ln49_10_fu_372_p2;

assign zext_ln49_17_fu_387_p1 = or_ln49_11_fu_382_p2;

assign zext_ln49_18_fu_397_p1 = or_ln49_12_fu_392_p2;

assign zext_ln49_fu_277_p1 = or_ln49_fu_271_p2;

always @ (posedge ap_clk) begin
    shl_ln_reg_417[2:0] <= 3'b000;
end

endmodule //keccak_squeezeblocks
