-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pqcrystals_dilithium_19 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sig_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    sig_ce0 : OUT STD_LOGIC;
    sig_we0 : OUT STD_LOGIC;
    sig_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sig_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    sig_ce1 : OUT STD_LOGIC;
    sig_we1 : OUT STD_LOGIC;
    sig_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    z_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    z_vec_coeffs_ce0 : OUT STD_LOGIC;
    z_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    h_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    h_vec_coeffs_ce0 : OUT STD_LOGIC;
    h_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of pqcrystals_dilithium_19 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (55 downto 0) := "00000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (55 downto 0) := "00000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (55 downto 0) := "00000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (55 downto 0) := "00000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (55 downto 0) := "00000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (55 downto 0) := "00000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (55 downto 0) := "00001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (55 downto 0) := "00010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (55 downto 0) := "00100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (55 downto 0) := "01000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (55 downto 0) := "10000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv12_20 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_const_lv12_260 : STD_LOGIC_VECTOR (11 downto 0) := "001001100000";
    constant ap_const_lv12_4A0 : STD_LOGIC_VECTOR (11 downto 0) := "010010100000";
    constant ap_const_lv12_6E0 : STD_LOGIC_VECTOR (11 downto 0) := "011011100000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv64_920 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100100000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_921 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100100001";
    constant ap_const_lv64_922 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100100010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_923 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100100011";
    constant ap_const_lv64_924 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100100100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_925 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100100101";
    constant ap_const_lv64_926 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100100110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_927 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100100111";
    constant ap_const_lv64_928 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100101000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_929 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100101001";
    constant ap_const_lv64_92A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100101010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv64_92B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100101011";
    constant ap_const_lv64_92C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100101100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv64_92D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100101101";
    constant ap_const_lv64_92E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100101110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv64_92F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100101111";
    constant ap_const_lv64_930 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100110000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv64_931 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100110001";
    constant ap_const_lv64_932 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100110010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv64_933 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100110011";
    constant ap_const_lv64_934 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100110100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv64_935 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100110101";
    constant ap_const_lv64_936 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100110110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv64_937 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100110111";
    constant ap_const_lv64_938 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100111000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv64_939 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100111001";
    constant ap_const_lv64_93A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100111010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv64_93B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100111011";
    constant ap_const_lv64_93C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100111100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv64_93D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100111101";
    constant ap_const_lv64_93E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100111110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv64_93F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100100111111";
    constant ap_const_lv64_940 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv64_941 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101000001";
    constant ap_const_lv64_942 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101000010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv64_943 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101000011";
    constant ap_const_lv64_944 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101000100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv64_945 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101000101";
    constant ap_const_lv64_946 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101000110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv64_947 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101000111";
    constant ap_const_lv64_948 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101001000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv64_949 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101001001";
    constant ap_const_lv64_94A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101001010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv64_94B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101001011";
    constant ap_const_lv64_94C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101001100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv64_94D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101001101";
    constant ap_const_lv64_94E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101001110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv64_94F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101001111";
    constant ap_const_lv64_950 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101010000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv64_951 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101010001";
    constant ap_const_lv64_952 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101010010";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv64_953 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101010011";
    constant ap_const_lv64_954 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101010100";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv64_955 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101010101";
    constant ap_const_lv64_956 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101010110";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv64_957 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101010111";
    constant ap_const_lv64_958 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101011000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv64_959 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101011001";
    constant ap_const_lv64_95A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101011010";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv64_95B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101011011";
    constant ap_const_lv64_95C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101011100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv64_95D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101011101";
    constant ap_const_lv64_95E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101011110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv64_95F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101011111";
    constant ap_const_lv64_960 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101100000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv64_961 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101100001";
    constant ap_const_lv64_962 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101100010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv64_963 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101100011";
    constant ap_const_lv64_964 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101100100";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv64_965 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101100101";
    constant ap_const_lv64_966 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101100110";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv64_967 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101100111";
    constant ap_const_lv64_968 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101101000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv64_969 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101101001";
    constant ap_const_lv64_96A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101101010";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv64_96B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101101011";
    constant ap_const_lv64_96C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101101100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv64_96D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101101101";
    constant ap_const_lv64_96E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101101110";
    constant ap_const_lv64_96F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101101111";
    constant ap_const_lv64_970 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101110000";
    constant ap_const_lv64_971 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101110001";
    constant ap_const_lv64_972 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101110010";
    constant ap_const_lv64_973 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100101110011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv14_920 : STD_LOGIC_VECTOR (13 downto 0) := "00100100100000";
    constant ap_const_lv55_1 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal k_1_0_load_reg_1427 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal add_ln187_fu_1159_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln187_reg_1436 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln187_fu_1153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_1_load_reg_1456 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal add_ln187_1_fu_1218_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln187_1_reg_1465 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln187_1_fu_1212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_2_load_reg_1485 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal add_ln187_2_fu_1283_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln187_2_reg_1494 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln187_2_fu_1277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln187_3_fu_1343_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln187_3_reg_1517 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal icmp_ln187_3_fu_1337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pqcrystals_dilithium_3_fu_1118_ap_start : STD_LOGIC;
    signal grp_pqcrystals_dilithium_3_fu_1118_ap_done : STD_LOGIC;
    signal grp_pqcrystals_dilithium_3_fu_1118_ap_idle : STD_LOGIC;
    signal grp_pqcrystals_dilithium_3_fu_1118_ap_ready : STD_LOGIC;
    signal grp_pqcrystals_dilithium_3_fu_1118_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_pqcrystals_dilithium_3_fu_1118_r_ce0 : STD_LOGIC;
    signal grp_pqcrystals_dilithium_3_fu_1118_r_we0 : STD_LOGIC;
    signal grp_pqcrystals_dilithium_3_fu_1118_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_pqcrystals_dilithium_3_fu_1118_r_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_pqcrystals_dilithium_3_fu_1118_r_ce1 : STD_LOGIC;
    signal grp_pqcrystals_dilithium_3_fu_1118_r_we1 : STD_LOGIC;
    signal grp_pqcrystals_dilithium_3_fu_1118_r_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_pqcrystals_dilithium_3_fu_1118_r_offset : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_pqcrystals_dilithium_3_fu_1118_a_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pqcrystals_dilithium_3_fu_1118_a_coeffs_ce0 : STD_LOGIC;
    signal grp_pqcrystals_dilithium_3_fu_1118_a_coeffs_offset : STD_LOGIC_VECTOR (2 downto 0);
    signal j_0_0_reg_1070 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal j_0_1_reg_1082 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal j_0_2_reg_1094 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal j_0_3_reg_1106 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal grp_pqcrystals_dilithium_3_fu_1118_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal zext_ln188_fu_1165_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln189_fu_1199_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln188_1_fu_1230_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln189_1_fu_1264_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_1289_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln189_2_fu_1327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln188_2_fu_1359_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln189_3_fu_1390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_1_0_fu_222 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_fu_1185_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_1_fu_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_5_fu_1250_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_2_fu_230 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_6_fu_1313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_3_fu_234 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_7_fu_1374_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln191_fu_1170_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln189_fu_1180_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln191_1_fu_1235_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln189_2_fu_1245_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln191_2_fu_1298_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln189_4_fu_1308_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln191_3_fu_1364_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln189_6_fu_1369_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln189_1_fu_1190_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln189_4_fu_1193_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal xor_ln188_fu_1224_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln189_3_fu_1255_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln189_1_fu_1258_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln189_5_fu_1318_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln189_2_fu_1321_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal xor_ln188_1_fu_1349_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln188_fu_1355_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln189_7_fu_1380_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln189_3_fu_1384_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (55 downto 0);

    component pqcrystals_dilithium_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        r_ce0 : OUT STD_LOGIC;
        r_we0 : OUT STD_LOGIC;
        r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        r_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        r_ce1 : OUT STD_LOGIC;
        r_we1 : OUT STD_LOGIC;
        r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        r_offset : IN STD_LOGIC_VECTOR (11 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_coeffs_offset : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;



begin
    grp_pqcrystals_dilithium_3_fu_1118 : component pqcrystals_dilithium_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pqcrystals_dilithium_3_fu_1118_ap_start,
        ap_done => grp_pqcrystals_dilithium_3_fu_1118_ap_done,
        ap_idle => grp_pqcrystals_dilithium_3_fu_1118_ap_idle,
        ap_ready => grp_pqcrystals_dilithium_3_fu_1118_ap_ready,
        r_address0 => grp_pqcrystals_dilithium_3_fu_1118_r_address0,
        r_ce0 => grp_pqcrystals_dilithium_3_fu_1118_r_ce0,
        r_we0 => grp_pqcrystals_dilithium_3_fu_1118_r_we0,
        r_d0 => grp_pqcrystals_dilithium_3_fu_1118_r_d0,
        r_address1 => grp_pqcrystals_dilithium_3_fu_1118_r_address1,
        r_ce1 => grp_pqcrystals_dilithium_3_fu_1118_r_ce1,
        r_we1 => grp_pqcrystals_dilithium_3_fu_1118_r_we1,
        r_d1 => grp_pqcrystals_dilithium_3_fu_1118_r_d1,
        r_offset => grp_pqcrystals_dilithium_3_fu_1118_r_offset,
        a_coeffs_address0 => grp_pqcrystals_dilithium_3_fu_1118_a_coeffs_address0,
        a_coeffs_ce0 => grp_pqcrystals_dilithium_3_fu_1118_a_coeffs_ce0,
        a_coeffs_q0 => z_vec_coeffs_q0,
        a_coeffs_offset => grp_pqcrystals_dilithium_3_fu_1118_a_coeffs_offset);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_pqcrystals_dilithium_3_fu_1118_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pqcrystals_dilithium_3_fu_1118_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_pqcrystals_dilithium_3_fu_1118_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pqcrystals_dilithium_3_fu_1118_ap_ready = ap_const_logic_1)) then 
                    grp_pqcrystals_dilithium_3_fu_1118_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    j_0_0_reg_1070_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                j_0_0_reg_1070 <= add_ln187_reg_1436;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                j_0_0_reg_1070 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_0_1_reg_1082_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                j_0_1_reg_1082 <= add_ln187_1_reg_1465;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state49) and (icmp_ln187_fu_1153_p2 = ap_const_lv1_1))) then 
                j_0_1_reg_1082 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_0_2_reg_1094_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                j_0_2_reg_1094 <= add_ln187_2_reg_1494;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state51) and (icmp_ln187_1_fu_1212_p2 = ap_const_lv1_1))) then 
                j_0_2_reg_1094 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_0_3_reg_1106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                j_0_3_reg_1106 <= add_ln187_3_reg_1517;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state53) and (icmp_ln187_2_fu_1277_p2 = ap_const_lv1_1))) then 
                j_0_3_reg_1106 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    k_1_0_fu_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state50) and (grp_fu_1136_p2 = ap_const_lv1_0))) then 
                k_1_0_fu_222 <= add_ln189_fu_1185_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_1_0_fu_222 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    k_1_1_fu_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state52) and (grp_fu_1136_p2 = ap_const_lv1_0))) then 
                k_1_1_fu_226 <= add_ln189_5_fu_1250_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state49) and (icmp_ln187_fu_1153_p2 = ap_const_lv1_1))) then 
                k_1_1_fu_226 <= k_1_0_fu_222;
            end if; 
        end if;
    end process;

    k_1_2_fu_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state54) and (grp_fu_1136_p2 = ap_const_lv1_0))) then 
                k_1_2_fu_230 <= add_ln189_6_fu_1313_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state51) and (icmp_ln187_1_fu_1212_p2 = ap_const_lv1_1))) then 
                k_1_2_fu_230 <= k_1_1_fu_226;
            end if; 
        end if;
    end process;

    k_1_3_fu_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state56) and (grp_fu_1136_p2 = ap_const_lv1_0))) then 
                k_1_3_fu_234 <= add_ln189_7_fu_1374_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state53) and (icmp_ln187_2_fu_1277_p2 = ap_const_lv1_1))) then 
                k_1_3_fu_234 <= k_1_2_fu_230;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                add_ln187_1_reg_1465 <= add_ln187_1_fu_1218_p2;
                k_1_1_load_reg_1456 <= k_1_1_fu_226;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                add_ln187_2_reg_1494 <= add_ln187_2_fu_1283_p2;
                k_1_2_load_reg_1485 <= k_1_2_fu_230;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then
                add_ln187_3_reg_1517 <= add_ln187_3_fu_1343_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                add_ln187_reg_1436 <= add_ln187_fu_1159_p2;
                k_1_0_load_reg_1427 <= k_1_0_fu_222;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state49, icmp_ln187_fu_1153_p2, ap_CS_fsm_state51, icmp_ln187_1_fu_1212_p2, ap_CS_fsm_state53, icmp_ln187_2_fu_1277_p2, ap_CS_fsm_state55, icmp_ln187_3_fu_1337_p2, grp_pqcrystals_dilithium_3_fu_1118_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_pqcrystals_dilithium_3_fu_1118_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_pqcrystals_dilithium_3_fu_1118_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_pqcrystals_dilithium_3_fu_1118_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_pqcrystals_dilithium_3_fu_1118_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state49) and (icmp_ln187_fu_1153_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state51 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state51) and (icmp_ln187_1_fu_1212_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state53 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state53) and (icmp_ln187_2_fu_1277_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state55 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state55) and (icmp_ln187_3_fu_1337_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln187_1_fu_1218_p2 <= std_logic_vector(unsigned(j_0_1_reg_1082) + unsigned(ap_const_lv9_1));
    add_ln187_2_fu_1283_p2 <= std_logic_vector(unsigned(j_0_2_reg_1094) + unsigned(ap_const_lv9_1));
    add_ln187_3_fu_1343_p2 <= std_logic_vector(unsigned(j_0_3_reg_1106) + unsigned(ap_const_lv9_1));
    add_ln187_fu_1159_p2 <= std_logic_vector(unsigned(j_0_0_reg_1070) + unsigned(ap_const_lv9_1));
    add_ln189_1_fu_1258_p2 <= std_logic_vector(unsigned(ap_const_lv14_920) + unsigned(trunc_ln189_3_fu_1255_p1));
    add_ln189_2_fu_1321_p2 <= std_logic_vector(unsigned(ap_const_lv14_920) + unsigned(trunc_ln189_5_fu_1318_p1));
    add_ln189_3_fu_1384_p2 <= std_logic_vector(unsigned(ap_const_lv14_920) + unsigned(trunc_ln189_7_fu_1380_p1));
    add_ln189_4_fu_1193_p2 <= std_logic_vector(unsigned(ap_const_lv14_920) + unsigned(trunc_ln189_1_fu_1190_p1));
    add_ln189_5_fu_1250_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(k_1_1_load_reg_1456));
    add_ln189_6_fu_1313_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(k_1_2_load_reg_1485));
    add_ln189_7_fu_1374_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(k_1_3_fu_234));
    add_ln189_fu_1185_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(k_1_0_load_reg_1427));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state55, icmp_ln187_3_fu_1337_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state55) and (icmp_ln187_3_fu_1337_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state55, icmp_ln187_3_fu_1337_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) and (icmp_ln187_3_fu_1337_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1136_p2 <= "1" when (h_vec_coeffs_q0 = ap_const_lv32_0) else "0";

    grp_pqcrystals_dilithium_3_fu_1118_a_coeffs_offset_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_pqcrystals_dilithium_3_fu_1118_a_coeffs_offset <= ap_const_lv3_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_pqcrystals_dilithium_3_fu_1118_a_coeffs_offset <= ap_const_lv3_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_pqcrystals_dilithium_3_fu_1118_a_coeffs_offset <= ap_const_lv3_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_pqcrystals_dilithium_3_fu_1118_a_coeffs_offset <= ap_const_lv3_0;
        else 
            grp_pqcrystals_dilithium_3_fu_1118_a_coeffs_offset <= "XXX";
        end if; 
    end process;

    grp_pqcrystals_dilithium_3_fu_1118_ap_start <= grp_pqcrystals_dilithium_3_fu_1118_ap_start_reg;

    grp_pqcrystals_dilithium_3_fu_1118_r_offset_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_pqcrystals_dilithium_3_fu_1118_r_offset <= ap_const_lv12_6E0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_pqcrystals_dilithium_3_fu_1118_r_offset <= ap_const_lv12_4A0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_pqcrystals_dilithium_3_fu_1118_r_offset <= ap_const_lv12_260;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_pqcrystals_dilithium_3_fu_1118_r_offset <= ap_const_lv12_20;
        else 
            grp_pqcrystals_dilithium_3_fu_1118_r_offset <= "XXXXXXXXXXXX";
        end if; 
    end process;


    h_vec_coeffs_address0_assign_proc : process(ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state55, zext_ln188_fu_1165_p1, zext_ln188_1_fu_1230_p1, tmp_s_fu_1289_p3, zext_ln188_2_fu_1359_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            h_vec_coeffs_address0 <= zext_ln188_2_fu_1359_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            h_vec_coeffs_address0 <= tmp_s_fu_1289_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            h_vec_coeffs_address0 <= zext_ln188_1_fu_1230_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            h_vec_coeffs_address0 <= zext_ln188_fu_1165_p1(10 - 1 downto 0);
        else 
            h_vec_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    h_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            h_vec_coeffs_ce0 <= ap_const_logic_1;
        else 
            h_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln187_1_fu_1212_p2 <= "1" when (j_0_1_reg_1082 = ap_const_lv9_100) else "0";
    icmp_ln187_2_fu_1277_p2 <= "1" when (j_0_2_reg_1094 = ap_const_lv9_100) else "0";
    icmp_ln187_3_fu_1337_p2 <= "1" when (j_0_3_reg_1106 = ap_const_lv9_100) else "0";
    icmp_ln187_fu_1153_p2 <= "1" when (j_0_0_reg_1070 = ap_const_lv9_100) else "0";
        sext_ln188_fu_1355_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln188_1_fu_1349_p2),10));

        sext_ln189_1_fu_1264_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln189_1_fu_1258_p2),64));

        sext_ln189_2_fu_1327_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln189_2_fu_1321_p2),64));

        sext_ln189_3_fu_1390_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln189_3_fu_1384_p2),64));

        sext_ln189_fu_1199_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln189_4_fu_1193_p2),64));


    sig_address0_assign_proc : process(ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state55, grp_pqcrystals_dilithium_3_fu_1118_r_address0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            sig_address0 <= ap_const_lv64_973(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            sig_address0 <= ap_const_lv64_972(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            sig_address0 <= ap_const_lv64_971(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            sig_address0 <= ap_const_lv64_970(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            sig_address0 <= ap_const_lv64_96E(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            sig_address0 <= ap_const_lv64_96C(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            sig_address0 <= ap_const_lv64_96A(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            sig_address0 <= ap_const_lv64_968(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            sig_address0 <= ap_const_lv64_966(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            sig_address0 <= ap_const_lv64_964(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            sig_address0 <= ap_const_lv64_962(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            sig_address0 <= ap_const_lv64_960(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            sig_address0 <= ap_const_lv64_95E(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            sig_address0 <= ap_const_lv64_95C(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            sig_address0 <= ap_const_lv64_95A(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            sig_address0 <= ap_const_lv64_958(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            sig_address0 <= ap_const_lv64_956(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            sig_address0 <= ap_const_lv64_954(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            sig_address0 <= ap_const_lv64_952(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            sig_address0 <= ap_const_lv64_950(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            sig_address0 <= ap_const_lv64_94E(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            sig_address0 <= ap_const_lv64_94C(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sig_address0 <= ap_const_lv64_94A(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sig_address0 <= ap_const_lv64_948(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sig_address0 <= ap_const_lv64_946(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sig_address0 <= ap_const_lv64_944(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            sig_address0 <= ap_const_lv64_942(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            sig_address0 <= ap_const_lv64_940(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            sig_address0 <= ap_const_lv64_93E(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            sig_address0 <= ap_const_lv64_93C(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            sig_address0 <= ap_const_lv64_93A(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            sig_address0 <= ap_const_lv64_938(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            sig_address0 <= ap_const_lv64_936(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            sig_address0 <= ap_const_lv64_934(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            sig_address0 <= ap_const_lv64_932(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sig_address0 <= ap_const_lv64_930(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sig_address0 <= ap_const_lv64_92E(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sig_address0 <= ap_const_lv64_92C(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sig_address0 <= ap_const_lv64_92A(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sig_address0 <= ap_const_lv64_928(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sig_address0 <= ap_const_lv64_926(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sig_address0 <= ap_const_lv64_924(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sig_address0 <= ap_const_lv64_922(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sig_address0 <= ap_const_lv64_920(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sig_address0 <= grp_pqcrystals_dilithium_3_fu_1118_r_address0;
        else 
            sig_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    sig_address1_assign_proc : process(ap_CS_fsm_state48, grp_pqcrystals_dilithium_3_fu_1118_r_address1, ap_CS_fsm_state50, ap_CS_fsm_state52, ap_CS_fsm_state54, ap_CS_fsm_state56, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, sext_ln189_fu_1199_p1, sext_ln189_1_fu_1264_p1, sext_ln189_2_fu_1327_p1, sext_ln189_3_fu_1390_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            sig_address1 <= sext_ln189_3_fu_1390_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            sig_address1 <= sext_ln189_2_fu_1327_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            sig_address1 <= sext_ln189_1_fu_1264_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            sig_address1 <= sext_ln189_fu_1199_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            sig_address1 <= ap_const_lv64_96F(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            sig_address1 <= ap_const_lv64_96D(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            sig_address1 <= ap_const_lv64_96B(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            sig_address1 <= ap_const_lv64_969(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            sig_address1 <= ap_const_lv64_967(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            sig_address1 <= ap_const_lv64_965(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            sig_address1 <= ap_const_lv64_963(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            sig_address1 <= ap_const_lv64_961(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            sig_address1 <= ap_const_lv64_95F(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            sig_address1 <= ap_const_lv64_95D(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            sig_address1 <= ap_const_lv64_95B(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            sig_address1 <= ap_const_lv64_959(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            sig_address1 <= ap_const_lv64_957(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            sig_address1 <= ap_const_lv64_955(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            sig_address1 <= ap_const_lv64_953(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            sig_address1 <= ap_const_lv64_951(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            sig_address1 <= ap_const_lv64_94F(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            sig_address1 <= ap_const_lv64_94D(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sig_address1 <= ap_const_lv64_94B(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sig_address1 <= ap_const_lv64_949(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sig_address1 <= ap_const_lv64_947(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sig_address1 <= ap_const_lv64_945(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            sig_address1 <= ap_const_lv64_943(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            sig_address1 <= ap_const_lv64_941(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            sig_address1 <= ap_const_lv64_93F(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            sig_address1 <= ap_const_lv64_93D(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            sig_address1 <= ap_const_lv64_93B(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            sig_address1 <= ap_const_lv64_939(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            sig_address1 <= ap_const_lv64_937(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            sig_address1 <= ap_const_lv64_935(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            sig_address1 <= ap_const_lv64_933(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sig_address1 <= ap_const_lv64_931(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sig_address1 <= ap_const_lv64_92F(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sig_address1 <= ap_const_lv64_92D(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sig_address1 <= ap_const_lv64_92B(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sig_address1 <= ap_const_lv64_929(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sig_address1 <= ap_const_lv64_927(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sig_address1 <= ap_const_lv64_925(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sig_address1 <= ap_const_lv64_923(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sig_address1 <= ap_const_lv64_921(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sig_address1 <= grp_pqcrystals_dilithium_3_fu_1118_r_address1;
        else 
            sig_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    sig_ce0_assign_proc : process(ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state55, grp_pqcrystals_dilithium_3_fu_1118_r_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            sig_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sig_ce0 <= grp_pqcrystals_dilithium_3_fu_1118_r_ce0;
        else 
            sig_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_ce1_assign_proc : process(ap_CS_fsm_state48, grp_pqcrystals_dilithium_3_fu_1118_r_ce1, ap_CS_fsm_state50, ap_CS_fsm_state52, ap_CS_fsm_state54, ap_CS_fsm_state56, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            sig_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sig_ce1 <= grp_pqcrystals_dilithium_3_fu_1118_r_ce1;
        else 
            sig_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sig_d0_assign_proc : process(ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state55, grp_pqcrystals_dilithium_3_fu_1118_r_d0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, trunc_ln191_fu_1170_p1, trunc_ln191_1_fu_1235_p1, trunc_ln191_2_fu_1298_p1, trunc_ln191_3_fu_1364_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            sig_d0 <= trunc_ln191_3_fu_1364_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            sig_d0 <= trunc_ln191_2_fu_1298_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            sig_d0 <= trunc_ln191_1_fu_1235_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            sig_d0 <= trunc_ln191_fu_1170_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            sig_d0 <= ap_const_lv8_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sig_d0 <= grp_pqcrystals_dilithium_3_fu_1118_r_d0;
        else 
            sig_d0 <= "XXXXXXXX";
        end if; 
    end process;


    sig_d1_assign_proc : process(ap_CS_fsm_state48, grp_pqcrystals_dilithium_3_fu_1118_r_d1, ap_CS_fsm_state50, ap_CS_fsm_state52, ap_CS_fsm_state54, ap_CS_fsm_state56, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, trunc_ln189_fu_1180_p1, trunc_ln189_2_fu_1245_p1, trunc_ln189_4_fu_1308_p1, trunc_ln189_6_fu_1369_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            sig_d1 <= trunc_ln189_6_fu_1369_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            sig_d1 <= trunc_ln189_4_fu_1308_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            sig_d1 <= trunc_ln189_2_fu_1245_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            sig_d1 <= trunc_ln189_fu_1180_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            sig_d1 <= ap_const_lv8_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sig_d1 <= grp_pqcrystals_dilithium_3_fu_1118_r_d1;
        else 
            sig_d1 <= "XXXXXXXX";
        end if; 
    end process;


    sig_we0_assign_proc : process(ap_CS_fsm_state48, ap_CS_fsm_state49, icmp_ln187_fu_1153_p2, ap_CS_fsm_state51, icmp_ln187_1_fu_1212_p2, ap_CS_fsm_state53, icmp_ln187_2_fu_1277_p2, ap_CS_fsm_state55, icmp_ln187_3_fu_1337_p2, grp_pqcrystals_dilithium_3_fu_1118_r_we0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state48) or ((ap_const_logic_1 = ap_CS_fsm_state55) and (icmp_ln187_3_fu_1337_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state53) and (icmp_ln187_2_fu_1277_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state51) and (icmp_ln187_1_fu_1212_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state49) and (icmp_ln187_fu_1153_p2 = ap_const_lv1_1)))) then 
            sig_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sig_we0 <= grp_pqcrystals_dilithium_3_fu_1118_r_we0;
        else 
            sig_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_we1_assign_proc : process(ap_CS_fsm_state48, grp_pqcrystals_dilithium_3_fu_1118_r_we1, ap_CS_fsm_state50, ap_CS_fsm_state52, ap_CS_fsm_state54, ap_CS_fsm_state56, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, grp_fu_1136_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state48) or ((ap_const_logic_1 = ap_CS_fsm_state56) and (grp_fu_1136_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state54) and (grp_fu_1136_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state52) and (grp_fu_1136_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state50) and (grp_fu_1136_p2 = ap_const_lv1_0)))) then 
            sig_we1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sig_we1 <= grp_pqcrystals_dilithium_3_fu_1118_r_we1;
        else 
            sig_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_s_fu_1289_p3 <= (ap_const_lv55_1 & j_0_2_reg_1094);
    trunc_ln189_1_fu_1190_p1 <= k_1_0_load_reg_1427(14 - 1 downto 0);
    trunc_ln189_2_fu_1245_p1 <= j_0_1_reg_1082(8 - 1 downto 0);
    trunc_ln189_3_fu_1255_p1 <= k_1_1_load_reg_1456(14 - 1 downto 0);
    trunc_ln189_4_fu_1308_p1 <= j_0_2_reg_1094(8 - 1 downto 0);
    trunc_ln189_5_fu_1318_p1 <= k_1_2_load_reg_1485(14 - 1 downto 0);
    trunc_ln189_6_fu_1369_p1 <= j_0_3_reg_1106(8 - 1 downto 0);
    trunc_ln189_7_fu_1380_p1 <= k_1_3_fu_234(14 - 1 downto 0);
    trunc_ln189_fu_1180_p1 <= j_0_0_reg_1070(8 - 1 downto 0);
    trunc_ln191_1_fu_1235_p1 <= k_1_1_fu_226(8 - 1 downto 0);
    trunc_ln191_2_fu_1298_p1 <= k_1_2_fu_230(8 - 1 downto 0);
    trunc_ln191_3_fu_1364_p1 <= k_1_3_fu_234(8 - 1 downto 0);
    trunc_ln191_fu_1170_p1 <= k_1_0_fu_222(8 - 1 downto 0);
    xor_ln188_1_fu_1349_p2 <= (j_0_3_reg_1106 xor ap_const_lv9_100);
    xor_ln188_fu_1224_p2 <= (j_0_1_reg_1082 xor ap_const_lv9_100);
    z_vec_coeffs_address0 <= grp_pqcrystals_dilithium_3_fu_1118_a_coeffs_address0;

    z_vec_coeffs_ce0_assign_proc : process(grp_pqcrystals_dilithium_3_fu_1118_a_coeffs_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            z_vec_coeffs_ce0 <= grp_pqcrystals_dilithium_3_fu_1118_a_coeffs_ce0;
        else 
            z_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln188_1_fu_1230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln188_fu_1224_p2),64));
    zext_ln188_2_fu_1359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln188_fu_1355_p1),64));
    zext_ln188_fu_1165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_0_reg_1070),64));
end behav;
