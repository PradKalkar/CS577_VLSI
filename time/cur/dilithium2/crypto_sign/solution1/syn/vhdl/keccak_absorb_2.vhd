-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity keccak_absorb_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce0 : OUT STD_LOGIC;
    s_we0 : OUT STD_LOGIC;
    s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce1 : OUT STD_LOGIC;
    s_we1 : OUT STD_LOGIC;
    s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    pos_r : IN STD_LOGIC_VECTOR (6 downto 0);
    m_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    m_ce0 : OUT STD_LOGIC;
    m_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    m_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    m_ce1 : OUT STD_LOGIC;
    m_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    m_offset : IN STD_LOGIC_VECTOR (12 downto 0);
    mlen : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of keccak_absorb_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (32 downto 0) := "000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (32 downto 0) := "000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (32 downto 0) := "000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (32 downto 0) := "000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (32 downto 0) := "000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (32 downto 0) := "000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (32 downto 0) := "000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (32 downto 0) := "000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (32 downto 0) := "000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (32 downto 0) := "001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (32 downto 0) := "010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (32 downto 0) := "100000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv14_3FFF : STD_LOGIC_VECTOR (13 downto 0) := "11111111111111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv29_1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv14_2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_const_lv14_3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000011";
    constant ap_const_lv14_4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_const_lv14_5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000101";
    constant ap_const_lv14_6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000110";
    constant ap_const_lv14_7 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000111";
    constant ap_const_lv64_88 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010001000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv64_FFFFFFFFFFFFFF78 : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111101111000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_774 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal t_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal reg_779 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_784 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal reg_788 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_792 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal reg_796 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_800 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal reg_805 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_810 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal reg_814 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_818 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal reg_822 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_770_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal reg_826 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal icmp_ln411_fu_1259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pos_cast1_fu_830_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pos_cast1_reg_1785 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln389_fu_834_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln391_fu_854_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln391_reg_1799 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln389_fu_845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln391_fu_858_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln391_reg_1805 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln393_2_fu_911_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln393_2_reg_1809 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln393_2_cast_fu_917_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal xor_ln393_2_cast_reg_1814 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_88_fu_923_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_88_reg_1819 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln395_1_fu_935_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln395_1_reg_1824 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln396_fu_940_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln396_reg_1829 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_offset_cast68_fu_945_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal m_offset_cast68_reg_1835 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln394_fu_967_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln394_reg_1848 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_962_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_addr_reg_1863 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_997_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln401_fu_1035_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln401_reg_1903 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln401_fu_1047_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln401_reg_1907 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln401_fu_1051_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln401_reg_1912 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln401_1_fu_1055_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln401_1_reg_1917 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln402_1_fu_1071_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln402_1_reg_1921 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_s_reg_1926 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln404_fu_1085_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln404_reg_1931 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_32_fu_1097_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal i_32_reg_1939 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln404_2_fu_1120_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln404_2_reg_1944 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln402_fu_1092_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_addr_1_reg_1964 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln405_fu_1245_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln405_reg_1999 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_KeccakF1600_StatePer_1_fu_764_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_764_ap_done : STD_LOGIC;
    signal ap_predicate_op195_call_state14 : BOOLEAN;
    signal ap_block_state14_on_subcall_done : BOOLEAN;
    signal trunc_ln414_fu_1251_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln414_reg_2005 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln411_fu_1254_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln411_reg_2011 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln420_1_fu_1275_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln420_1_reg_2019 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_3265_reg_2024 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_33_fu_1295_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_33_reg_2033 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal add_ln414_2_fu_1322_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln414_2_reg_2038 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln413_fu_1289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln415_fu_1344_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln415_reg_2058 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln418_fu_1350_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln418_reg_2063 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_addr_3_reg_2098 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln420_fu_1457_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln420_reg_2106 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal add_ln421_3_fu_1488_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln421_3_reg_2111 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln420_fu_1452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_addr_2_reg_2131 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln423_fu_1535_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln423_reg_2136 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln423_fu_1539_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln423_reg_2141 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln423_fu_1545_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln423_reg_2146 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln424_fu_1549_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln424_reg_2151 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln426_fu_1555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln426_reg_2158 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_34_fu_1654_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal add_ln430_fu_1668_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln430_reg_2200 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln427_fu_1648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln429_fu_1673_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln429_reg_2205 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal i_35_fu_1690_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_35_reg_2213 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln429_fu_1685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln432_fu_1716_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln432_reg_2233 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_addr_14_gep_fu_513_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_addr_15_gep_fu_521_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_addr_16_gep_fu_529_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_addr_17_gep_fu_537_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_addr_18_gep_fu_545_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_addr_19_gep_fu_553_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal s_addr_4_reg_2268 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_ce0 : STD_LOGIC;
    signal t_we0 : STD_LOGIC;
    signal t_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_ce1 : STD_LOGIC;
    signal t_we1 : STD_LOGIC;
    signal t_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_764_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_764_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_764_state_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_764_state_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_764_state_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_764_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_764_state_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_764_state_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_764_state_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_764_state_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_ln389_reg_569 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_05_rec_reg_580 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_reg_591 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_1621_reg_601 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_phi_mux_p_12_phi_fu_616_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_12_reg_613 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_p_1_phi_fu_626_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_1_reg_623 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_reg_633 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_phi_mux_p_2723_phi_fu_648_p6 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_2723_reg_644 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_23_reg_658 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln406_fu_1239_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_p_2_phi_fu_676_p6 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_2_reg_673 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv_reg_687 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal p_38_rec_reg_698 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_reg_710 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal i_3_reg_722 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal i_4_reg_733 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_reg_744 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal add_ln432_fu_1760_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_p_34_phi_fu_758_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_34_reg_755 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_KeccakF1600_StatePer_1_fu_764_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln389_fu_840_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum1_cast_fu_957_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln398_fu_992_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln394_fu_1003_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln404_2_fu_1126_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_fu_1137_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln404_1_fu_1147_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_19_fu_1157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_20_fu_1167_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_21_fu_1177_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_22_fu_1187_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_23_fu_1197_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_24_fu_1207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln414_3_fu_1328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_32_fu_1339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_33_fu_1361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_34_fu_1371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_35_fu_1381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_36_fu_1391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_37_fu_1401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_38_fu_1411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln414_1_fu_1416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln421_4_fu_1494_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_25_fu_1505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln421_1_fu_1515_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_26_fu_1566_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_27_fu_1576_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_28_fu_1586_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_29_fu_1596_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_30_fu_1606_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_31_fu_1616_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln428_fu_1660_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln430_1_fu_1711_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln431_fu_1728_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln398_fu_1028_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln404_fu_1232_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln414_fu_1441_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln421_fu_1641_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln431_fu_1753_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln391_fu_851_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln393_fu_869_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln393_fu_873_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_86_fu_879_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln393_fu_864_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln393_1_fu_883_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_87_fu_889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal umax_fu_895_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln393_1_fu_907_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln393_fu_903_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln395_fu_929_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_89_fu_948_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum1_fu_952_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln392_fu_973_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln398_fu_977_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln_fu_982_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_7_i_fu_1008_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln401_fu_1041_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_1061_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln404_fu_1103_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln_fu_1107_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln404_1_fu_1115_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_fu_1131_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln402_fu_1088_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln404_fu_1142_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln32_13_fu_1152_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_14_fu_1162_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_15_fu_1172_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_16_fu_1182_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_17_fu_1192_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_18_fu_1202_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_7_i1_fu_1212_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3264_fu_1265_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal shl_ln11_fu_1301_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln414_fu_1309_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln414_1_fu_1313_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln414_2_fu_1318_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_26_fu_1333_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_27_fu_1356_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_28_fu_1366_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_29_fu_1376_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_30_fu_1386_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_31_fu_1396_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_32_fu_1406_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_7_i4_fu_1421_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln421_fu_1463_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln10_fu_1467_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln421_fu_1475_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln421_2_fu_1479_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln421_3_fu_1484_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_19_fu_1499_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln420_fu_1448_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln421_1_fu_1510_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal and_ln_fu_1520_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln422_fu_1531_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln422_1_fu_1527_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln32_20_fu_1561_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_21_fu_1571_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_22_fu_1581_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_23_fu_1591_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_24_fu_1601_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_25_fu_1611_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_7_i2_fu_1621_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln430_fu_1665_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln429_1_fu_1681_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln429_fu_1677_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln430_1_fu_1696_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln430_2_fu_1701_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln430_3_fu_1706_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln9_fu_1719_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_7_i3_fu_1733_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (32 downto 0);

    component KeccakF1600_StatePer_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keccak_absorb_2_t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    t_U : component keccak_absorb_2_t
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t_address0,
        ce0 => t_ce0,
        we0 => t_we0,
        d0 => ap_const_lv8_0,
        q0 => t_q0,
        address1 => t_address1,
        ce1 => t_ce1,
        we1 => t_we1,
        d1 => t_d1,
        q1 => t_q1);

    grp_KeccakF1600_StatePer_1_fu_764 : component KeccakF1600_StatePer_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePer_1_fu_764_ap_start,
        ap_done => grp_KeccakF1600_StatePer_1_fu_764_ap_done,
        ap_idle => grp_KeccakF1600_StatePer_1_fu_764_ap_idle,
        ap_ready => grp_KeccakF1600_StatePer_1_fu_764_ap_ready,
        state_address0 => grp_KeccakF1600_StatePer_1_fu_764_state_address0,
        state_ce0 => grp_KeccakF1600_StatePer_1_fu_764_state_ce0,
        state_we0 => grp_KeccakF1600_StatePer_1_fu_764_state_we0,
        state_d0 => grp_KeccakF1600_StatePer_1_fu_764_state_d0,
        state_q0 => s_q0,
        state_address1 => grp_KeccakF1600_StatePer_1_fu_764_state_address1,
        state_ce1 => grp_KeccakF1600_StatePer_1_fu_764_state_ce1,
        state_we1 => grp_KeccakF1600_StatePer_1_fu_764_state_we1,
        state_d1 => grp_KeccakF1600_StatePer_1_fu_764_state_d1,
        state_q1 => s_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                    ap_return_preg <= ap_phi_mux_p_34_phi_fu_758_p4;
                end if; 
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_1_fu_764_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_1_fu_764_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln413_fu_1289_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln402_fu_1092_p2 = ap_const_lv1_1)))) then 
                    grp_KeccakF1600_StatePer_1_fu_764_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_1_fu_764_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_1_fu_764_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_591_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_0_reg_591 <= i_fu_997_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln389_fu_845_p2 = ap_const_lv1_1) and (icmp_ln391_fu_858_p2 = ap_const_lv1_0))) then 
                i_0_reg_591 <= zext_ln391_fu_854_p1;
            end if; 
        end if;
    end process;

    i_1_reg_633_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln401_1_fu_1055_p2 = ap_const_lv1_0) and (icmp_ln401_fu_1035_p2 = ap_const_lv1_0))) then 
                i_1_reg_633 <= ap_const_lv29_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_1_reg_633 <= i_32_reg_1939;
            end if; 
        end if;
    end process;

    i_2_reg_710_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln411_fu_1259_p2 = ap_const_lv1_0))) then 
                i_2_reg_710 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i_2_reg_710 <= i_33_reg_2033;
            end if; 
        end if;
    end process;

    i_3_reg_722_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                i_3_reg_722 <= add_ln420_reg_2106;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln411_fu_1259_p2 = ap_const_lv1_1))) then 
                i_3_reg_722 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_4_reg_733_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln420_fu_1452_p2 = ap_const_lv1_1) and (icmp_ln426_fu_1555_p2 = ap_const_lv1_0))) then 
                i_4_reg_733 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln427_fu_1648_p2 = ap_const_lv1_0))) then 
                i_4_reg_733 <= i_34_fu_1654_p2;
            end if; 
        end if;
    end process;

    i_5_reg_744_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln427_fu_1648_p2 = ap_const_lv1_1))) then 
                i_5_reg_744 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                i_5_reg_744 <= i_35_reg_2213;
            end if; 
        end if;
    end process;

    indvars_iv_reg_687_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                indvars_iv_reg_687 <= ap_phi_mux_p_2_phi_fu_676_p6;
            elsif (((grp_KeccakF1600_StatePer_1_fu_764_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                indvars_iv_reg_687 <= add_ln418_reg_2063;
            end if; 
        end if;
    end process;

    p_05_rec_reg_580_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_05_rec_reg_580 <= add_ln394_reg_1848;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln389_fu_845_p2 = ap_const_lv1_1) and (icmp_ln391_fu_858_p2 = ap_const_lv1_0))) then 
                p_05_rec_reg_580 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    p_12_reg_613_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln391_fu_858_p2 = ap_const_lv1_1) and (icmp_ln389_fu_845_p2 = ap_const_lv1_1))) then 
                p_12_reg_613 <= pos_cast1_reg_1785;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln391_reg_1805 = ap_const_lv1_0))) then 
                p_12_reg_613 <= add_ln396_reg_1829;
            end if; 
        end if;
    end process;

    p_1621_reg_601_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln391_fu_858_p2 = ap_const_lv1_1) and (icmp_ln389_fu_845_p2 = ap_const_lv1_1))) then 
                p_1621_reg_601 <= ap_const_lv14_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln391_reg_1805 = ap_const_lv1_0))) then 
                p_1621_reg_601 <= xor_ln393_2_cast_reg_1814;
            end if; 
        end if;
    end process;

    p_1_reg_623_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln391_fu_858_p2 = ap_const_lv1_1) and (icmp_ln389_fu_845_p2 = ap_const_lv1_1))) then 
                p_1_reg_623 <= mlen;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln391_reg_1805 = ap_const_lv1_0))) then 
                p_1_reg_623 <= add_ln395_1_reg_1824;
            end if; 
        end if;
    end process;

    p_23_reg_658_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln401_fu_1035_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln401_1_fu_1055_p2 = ap_const_lv1_1) and (icmp_ln401_fu_1035_p2 = ap_const_lv1_0)))) then 
                p_23_reg_658 <= ap_phi_mux_p_12_phi_fu_616_p4;
            elsif (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln401_1_reg_1917 = ap_const_lv1_0) and (icmp_ln401_reg_1903 = ap_const_lv1_0))) then 
                p_23_reg_658 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_2723_reg_644_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln401_fu_1035_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln401_1_fu_1055_p2 = ap_const_lv1_1) and (icmp_ln401_fu_1035_p2 = ap_const_lv1_0)))) then 
                p_2723_reg_644 <= ap_const_lv14_0;
            elsif (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln401_1_reg_1917 = ap_const_lv1_0) and (icmp_ln401_reg_1903 = ap_const_lv1_0))) then 
                p_2723_reg_644 <= trunc_ln401_reg_1912;
            end if; 
        end if;
    end process;

    p_2_reg_673_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln401_fu_1035_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln401_1_fu_1055_p2 = ap_const_lv1_1) and (icmp_ln401_fu_1035_p2 = ap_const_lv1_0)))) then 
                p_2_reg_673 <= ap_phi_mux_p_1_phi_fu_626_p4;
            elsif (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln401_1_reg_1917 = ap_const_lv1_0) and (icmp_ln401_reg_1903 = ap_const_lv1_0))) then 
                p_2_reg_673 <= sub_ln406_fu_1239_p2;
            end if; 
        end if;
    end process;

    p_34_reg_755_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln426_fu_1555_p2 = ap_const_lv1_1) and (icmp_ln420_fu_1452_p2 = ap_const_lv1_1))) then 
                p_34_reg_755 <= add_ln424_fu_1549_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln426_reg_2158 = ap_const_lv1_0))) then 
                p_34_reg_755 <= add_ln432_fu_1760_p2;
            end if; 
        end if;
    end process;

    p_38_rec_reg_698_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                p_38_rec_reg_698 <= ap_const_lv64_0;
            elsif (((grp_KeccakF1600_StatePer_1_fu_764_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                p_38_rec_reg_698 <= add_ln415_reg_2058;
            end if; 
        end if;
    end process;

    phi_ln389_reg_569_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln389_fu_845_p2 = ap_const_lv1_0))) then 
                phi_ln389_reg_569 <= add_ln389_fu_834_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln389_reg_569 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    reg_774_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                reg_774 <= t_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                reg_774 <= t_q0;
            end if; 
        end if;
    end process;

    reg_779_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                reg_779 <= t_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                reg_779 <= t_q1;
            end if; 
        end if;
    end process;

    reg_800_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                reg_800 <= m_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                reg_800 <= m_q0;
            end if; 
        end if;
    end process;

    reg_805_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                reg_805 <= m_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                reg_805 <= m_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln394_reg_1848 <= add_ln394_fu_967_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln389_fu_845_p2 = ap_const_lv1_1) and (icmp_ln391_fu_858_p2 = ap_const_lv1_0))) then
                add_ln395_1_reg_1824 <= add_ln395_1_fu_935_p2;
                add_ln396_reg_1829 <= add_ln396_fu_940_p2;
                empty_88_reg_1819 <= empty_88_fu_923_p2;
                    m_offset_cast68_reg_1835(12 downto 0) <= m_offset_cast68_fu_945_p1(12 downto 0);
                xor_ln393_2_cast_reg_1814 <= xor_ln393_2_cast_fu_917_p2;
                xor_ln393_2_reg_1809 <= xor_ln393_2_fu_911_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln402_fu_1092_p2 = ap_const_lv1_0))) then
                add_ln404_2_reg_1944 <= add_ln404_2_fu_1120_p2;
                s_addr_1_reg_1964 <= zext_ln404_1_fu_1147_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                add_ln405_reg_1999 <= add_ln405_fu_1245_p2;
                trunc_ln414_reg_2005 <= trunc_ln414_fu_1251_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln413_fu_1289_p2 = ap_const_lv1_0))) then
                add_ln414_2_reg_2038 <= add_ln414_2_fu_1322_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln413_fu_1289_p2 = ap_const_lv1_1))) then
                add_ln415_reg_2058 <= add_ln415_fu_1344_p2;
                add_ln418_reg_2063 <= add_ln418_fu_1350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                add_ln420_reg_2106 <= add_ln420_fu_1457_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln420_fu_1452_p2 = ap_const_lv1_0))) then
                add_ln421_3_reg_2111 <= add_ln421_3_fu_1488_p2;
                s_addr_2_reg_2131 <= zext_ln421_1_fu_1515_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln420_fu_1452_p2 = ap_const_lv1_1))) then
                add_ln424_reg_2151 <= add_ln424_fu_1549_p2;
                icmp_ln426_reg_2158 <= icmp_ln426_fu_1555_p2;
                sub_ln423_reg_2141 <= sub_ln423_fu_1539_p2;
                trunc_ln423_reg_2146 <= trunc_ln423_fu_1545_p1;
                    zext_ln423_reg_2136(7 downto 3) <= zext_ln423_fu_1535_p1(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln427_fu_1648_p2 = ap_const_lv1_1))) then
                add_ln430_reg_2200 <= add_ln430_fu_1668_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_32_reg_1939 <= i_32_fu_1097_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                i_33_reg_2033 <= i_33_fu_1295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                i_35_reg_2213 <= i_35_fu_1690_p2;
                    zext_ln429_reg_2205(31 downto 0) <= zext_ln429_fu_1673_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln389_fu_845_p2 = ap_const_lv1_1))) then
                icmp_ln391_reg_1805 <= icmp_ln391_fu_858_p2;
                    zext_ln391_reg_1799(2 downto 0) <= zext_ln391_fu_854_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln401_fu_1035_p2 = ap_const_lv1_0))) then
                icmp_ln401_1_reg_1917 <= icmp_ln401_1_fu_1055_p2;
                trunc_ln401_reg_1912 <= trunc_ln401_fu_1051_p1;
                    zext_ln401_reg_1907(31 downto 0) <= zext_ln401_fu_1047_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                icmp_ln401_reg_1903 <= icmp_ln401_fu_1035_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    pos_cast1_reg_1785(6 downto 0) <= pos_cast1_fu_830_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state31))) then
                reg_784 <= t_q0;
                reg_788 <= t_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_792 <= t_q0;
                reg_796 <= t_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_810 <= m_q1;
                reg_814 <= m_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_818 <= m_q1;
                reg_822 <= m_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln411_fu_1259_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln411_fu_1259_p2 = ap_const_lv1_0)))) then
                reg_826 <= grp_fu_770_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                s_addr_3_reg_2098 <= zext_ln414_1_fu_1416_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                s_addr_4_reg_2268 <= zext_ln431_fu_1728_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_962_p2 = ap_const_lv1_1))) then
                s_addr_reg_1863 <= zext_ln398_fu_992_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln411_fu_1259_p2 = ap_const_lv1_1))) then
                tmp_3265_reg_2024 <= indvars_iv_reg_687(7 downto 3);
                    zext_ln420_1_reg_2019(28 downto 0) <= zext_ln420_1_fu_1275_p1(28 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln401_1_fu_1055_p2 = ap_const_lv1_0) and (icmp_ln401_fu_1035_p2 = ap_const_lv1_0))) then
                tmp_s_reg_1926 <= sub_ln401_fu_1041_p2(31 downto 3);
                    zext_ln402_1_reg_1921(28 downto 0) <= zext_ln402_1_fu_1071_p1(28 downto 0);
                    zext_ln404_reg_1931(12 downto 0) <= zext_ln404_fu_1085_p1(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                trunc_ln411_reg_2011 <= trunc_ln411_fu_1254_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln429_fu_1685_p2 = ap_const_lv1_0))) then
                trunc_ln432_reg_2233 <= trunc_ln432_fu_1716_p1;
            end if;
        end if;
    end process;
    pos_cast1_reg_1785(31 downto 7) <= "0000000000000000000000000";
    zext_ln391_reg_1799(31 downto 3) <= "00000000000000000000000000000";
    m_offset_cast68_reg_1835(13) <= '0';
    zext_ln401_reg_1907(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln402_1_reg_1921(29) <= '0';
    zext_ln404_reg_1931(13) <= '0';
    zext_ln420_1_reg_2019(29) <= '0';
    zext_ln423_reg_2136(2 downto 0) <= "000";
    zext_ln423_reg_2136(13 downto 8) <= "000000";
    zext_ln429_reg_2205(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state15, icmp_ln411_fu_1259_p2, ap_CS_fsm_state2, icmp_ln389_fu_845_p2, icmp_ln391_fu_858_p2, ap_CS_fsm_state3, exitcond_fu_962_p2, icmp_ln401_fu_1035_p2, ap_CS_fsm_state8, icmp_ln401_1_fu_1055_p2, ap_CS_fsm_state9, icmp_ln402_fu_1092_p2, ap_CS_fsm_state14, grp_KeccakF1600_StatePer_1_fu_764_ap_done, ap_block_state14_on_subcall_done, ap_CS_fsm_state16, icmp_ln413_fu_1289_p2, ap_CS_fsm_state22, icmp_ln420_fu_1452_p2, icmp_ln426_fu_1555_p2, ap_CS_fsm_state27, icmp_ln427_fu_1648_p2, ap_CS_fsm_state28, icmp_ln429_fu_1685_p2, ap_CS_fsm_state21)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln389_fu_845_p2 = ap_const_lv1_1) and (icmp_ln391_fu_858_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln391_fu_858_p2 = ap_const_lv1_1) and (icmp_ln389_fu_845_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_962_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln401_1_fu_1055_p2 = ap_const_lv1_0) and (icmp_ln401_fu_1035_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln402_fu_1092_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state14 => 
                if (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln411_fu_1259_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln413_fu_1289_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state21 => 
                if (((grp_KeccakF1600_StatePer_1_fu_764_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln420_fu_1452_p2 = ap_const_lv1_1) and (icmp_ln426_fu_1555_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln426_fu_1555_p2 = ap_const_lv1_1) and (icmp_ln420_fu_1452_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln427_fu_1648_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln429_fu_1685_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln32_13_fu_1152_p2 <= std_logic_vector(unsigned(ap_const_lv14_2) + unsigned(add_ln404_2_reg_1944));
    add_ln32_14_fu_1162_p2 <= std_logic_vector(unsigned(ap_const_lv14_3) + unsigned(add_ln404_2_reg_1944));
    add_ln32_15_fu_1172_p2 <= std_logic_vector(unsigned(ap_const_lv14_4) + unsigned(add_ln404_2_reg_1944));
    add_ln32_16_fu_1182_p2 <= std_logic_vector(unsigned(ap_const_lv14_5) + unsigned(add_ln404_2_reg_1944));
    add_ln32_17_fu_1192_p2 <= std_logic_vector(unsigned(ap_const_lv14_6) + unsigned(add_ln404_2_reg_1944));
    add_ln32_18_fu_1202_p2 <= std_logic_vector(unsigned(ap_const_lv14_7) + unsigned(add_ln404_2_reg_1944));
    add_ln32_19_fu_1499_p2 <= std_logic_vector(unsigned(ap_const_lv14_1) + unsigned(add_ln421_3_fu_1488_p2));
    add_ln32_20_fu_1561_p2 <= std_logic_vector(unsigned(ap_const_lv14_2) + unsigned(add_ln421_3_reg_2111));
    add_ln32_21_fu_1571_p2 <= std_logic_vector(unsigned(ap_const_lv14_3) + unsigned(add_ln421_3_reg_2111));
    add_ln32_22_fu_1581_p2 <= std_logic_vector(unsigned(ap_const_lv14_4) + unsigned(add_ln421_3_reg_2111));
    add_ln32_23_fu_1591_p2 <= std_logic_vector(unsigned(ap_const_lv14_5) + unsigned(add_ln421_3_reg_2111));
    add_ln32_24_fu_1601_p2 <= std_logic_vector(unsigned(ap_const_lv14_6) + unsigned(add_ln421_3_reg_2111));
    add_ln32_25_fu_1611_p2 <= std_logic_vector(unsigned(ap_const_lv14_7) + unsigned(add_ln421_3_reg_2111));
    add_ln32_26_fu_1333_p2 <= std_logic_vector(unsigned(add_ln414_2_fu_1322_p2) + unsigned(ap_const_lv14_1));
    add_ln32_27_fu_1356_p2 <= std_logic_vector(unsigned(add_ln414_2_reg_2038) + unsigned(ap_const_lv14_2));
    add_ln32_28_fu_1366_p2 <= std_logic_vector(unsigned(add_ln414_2_reg_2038) + unsigned(ap_const_lv14_3));
    add_ln32_29_fu_1376_p2 <= std_logic_vector(unsigned(add_ln414_2_reg_2038) + unsigned(ap_const_lv14_4));
    add_ln32_30_fu_1386_p2 <= std_logic_vector(unsigned(add_ln414_2_reg_2038) + unsigned(ap_const_lv14_5));
    add_ln32_31_fu_1396_p2 <= std_logic_vector(unsigned(add_ln414_2_reg_2038) + unsigned(ap_const_lv14_6));
    add_ln32_32_fu_1406_p2 <= std_logic_vector(unsigned(add_ln414_2_reg_2038) + unsigned(ap_const_lv14_7));
    add_ln32_fu_1131_p2 <= std_logic_vector(unsigned(ap_const_lv14_1) + unsigned(add_ln404_2_fu_1120_p2));
    add_ln389_fu_834_p2 <= std_logic_vector(unsigned(phi_ln389_reg_569) + unsigned(ap_const_lv3_1));
    add_ln392_fu_973_p2 <= std_logic_vector(unsigned(zext_ln391_reg_1799) + unsigned(empty_88_reg_1819));
    add_ln394_fu_967_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(p_05_rec_reg_580));
    add_ln395_1_fu_935_p2 <= std_logic_vector(unsigned(mlen) + unsigned(add_ln395_fu_929_p2));
    add_ln395_fu_929_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(umax_fu_895_p3));
    add_ln396_fu_940_p2 <= std_logic_vector(unsigned(empty_88_fu_923_p2) + unsigned(pos_cast1_reg_1785));
    add_ln404_1_fu_1115_p2 <= std_logic_vector(unsigned(shl_ln_fu_1107_p3) + unsigned(zext_ln404_reg_1931));
    add_ln404_2_fu_1120_p2 <= std_logic_vector(unsigned(add_ln404_1_fu_1115_p2) + unsigned(p_1621_reg_601));
    add_ln404_fu_1142_p2 <= std_logic_vector(unsigned(zext_ln402_fu_1088_p1) + unsigned(zext_ln402_1_reg_1921));
    add_ln405_fu_1245_p2 <= std_logic_vector(unsigned(p_1621_reg_601) + unsigned(ap_phi_mux_p_2723_phi_fu_648_p6));
    add_ln414_1_fu_1313_p2 <= std_logic_vector(unsigned(trunc_ln414_reg_2005) + unsigned(zext_ln414_fu_1309_p1));
    add_ln414_2_fu_1322_p2 <= std_logic_vector(unsigned(reg_826) + unsigned(zext_ln414_2_fu_1318_p1));
    add_ln415_fu_1344_p2 <= std_logic_vector(unsigned(p_38_rec_reg_698) + unsigned(ap_const_lv64_88));
    add_ln418_fu_1350_p2 <= std_logic_vector(unsigned(indvars_iv_reg_687) + unsigned(ap_const_lv64_FFFFFFFFFFFFFF78));
    add_ln420_fu_1457_p2 <= std_logic_vector(unsigned(i_3_reg_722) + unsigned(ap_const_lv5_1));
    add_ln421_1_fu_1510_p2 <= std_logic_vector(unsigned(zext_ln420_1_reg_2019) + unsigned(zext_ln420_fu_1448_p1));
    add_ln421_2_fu_1479_p2 <= std_logic_vector(unsigned(trunc_ln414_reg_2005) + unsigned(zext_ln421_fu_1475_p1));
    add_ln421_3_fu_1488_p2 <= std_logic_vector(unsigned(reg_826) + unsigned(zext_ln421_3_fu_1484_p1));
    add_ln424_fu_1549_p2 <= std_logic_vector(unsigned(p_23_reg_658) + unsigned(zext_ln422_1_fu_1527_p1));
    add_ln430_1_fu_1696_p2 <= std_logic_vector(unsigned(trunc_ln429_fu_1677_p1) + unsigned(zext_ln423_reg_2136));
    add_ln430_2_fu_1701_p2 <= std_logic_vector(unsigned(trunc_ln411_reg_2011) + unsigned(add_ln430_1_fu_1696_p2));
    add_ln430_3_fu_1706_p2 <= std_logic_vector(unsigned(add_ln430_reg_2200) + unsigned(add_ln430_2_fu_1701_p2));
    add_ln430_fu_1668_p2 <= std_logic_vector(unsigned(zext_ln430_fu_1665_p1) + unsigned(add_ln405_reg_1999));
    add_ln432_fu_1760_p2 <= std_logic_vector(unsigned(add_ln424_reg_2151) + unsigned(trunc_ln432_reg_2233));
    and_ln_fu_1520_p3 <= (tmp_3265_reg_2024 & ap_const_lv3_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state14_on_subcall_done_assign_proc : process(grp_KeccakF1600_StatePer_1_fu_764_ap_done, ap_predicate_op195_call_state14)
    begin
                ap_block_state14_on_subcall_done <= ((ap_predicate_op195_call_state14 = ap_const_boolean_1) and (grp_KeccakF1600_StatePer_1_fu_764_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_12_phi_fu_616_p4_assign_proc : process(icmp_ln391_reg_1805, add_ln396_reg_1829, ap_CS_fsm_state8, p_12_reg_613)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln391_reg_1805 = ap_const_lv1_0))) then 
            ap_phi_mux_p_12_phi_fu_616_p4 <= add_ln396_reg_1829;
        else 
            ap_phi_mux_p_12_phi_fu_616_p4 <= p_12_reg_613;
        end if; 
    end process;


    ap_phi_mux_p_1_phi_fu_626_p4_assign_proc : process(icmp_ln391_reg_1805, add_ln395_1_reg_1824, ap_CS_fsm_state8, p_1_reg_623)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln391_reg_1805 = ap_const_lv1_0))) then 
            ap_phi_mux_p_1_phi_fu_626_p4 <= add_ln395_1_reg_1824;
        else 
            ap_phi_mux_p_1_phi_fu_626_p4 <= p_1_reg_623;
        end if; 
    end process;


    ap_phi_mux_p_2723_phi_fu_648_p6_assign_proc : process(icmp_ln401_reg_1903, trunc_ln401_reg_1912, icmp_ln401_1_reg_1917, ap_CS_fsm_state14, p_2723_reg_644)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln401_1_reg_1917 = ap_const_lv1_0) and (icmp_ln401_reg_1903 = ap_const_lv1_0))) then 
            ap_phi_mux_p_2723_phi_fu_648_p6 <= trunc_ln401_reg_1912;
        else 
            ap_phi_mux_p_2723_phi_fu_648_p6 <= p_2723_reg_644;
        end if; 
    end process;


    ap_phi_mux_p_2_phi_fu_676_p6_assign_proc : process(icmp_ln401_reg_1903, icmp_ln401_1_reg_1917, ap_CS_fsm_state14, sub_ln406_fu_1239_p2, p_2_reg_673)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln401_1_reg_1917 = ap_const_lv1_0) and (icmp_ln401_reg_1903 = ap_const_lv1_0))) then 
            ap_phi_mux_p_2_phi_fu_676_p6 <= sub_ln406_fu_1239_p2;
        else 
            ap_phi_mux_p_2_phi_fu_676_p6 <= p_2_reg_673;
        end if; 
    end process;


    ap_phi_mux_p_34_phi_fu_758_p4_assign_proc : process(icmp_ln426_reg_2158, add_ln432_fu_1760_p2, p_34_reg_755, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln426_reg_2158 = ap_const_lv1_0))) then 
            ap_phi_mux_p_34_phi_fu_758_p4 <= add_ln432_fu_1760_p2;
        else 
            ap_phi_mux_p_34_phi_fu_758_p4 <= p_34_reg_755;
        end if; 
    end process;


    ap_predicate_op195_call_state14_assign_proc : process(icmp_ln401_reg_1903, icmp_ln401_1_reg_1917)
    begin
                ap_predicate_op195_call_state14 <= ((icmp_ln401_1_reg_1917 = ap_const_lv1_0) and (icmp_ln401_reg_1903 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_p_34_phi_fu_758_p4, ap_CS_fsm_state33, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            ap_return <= ap_phi_mux_p_34_phi_fu_758_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    empty_86_fu_879_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln393_fu_873_p2),64));
    empty_87_fu_889_p2 <= "1" when (unsigned(xor_ln393_fu_864_p2) > unsigned(xor_ln393_1_fu_883_p2)) else "0";
    empty_88_fu_923_p2 <= (trunc_ln393_fu_903_p1 xor ap_const_lv32_FFFFFFFF);
    empty_89_fu_948_p1 <= p_05_rec_reg_580(14 - 1 downto 0);
    exitcond_fu_962_p2 <= "1" when (p_05_rec_reg_580 = xor_ln393_2_reg_1809) else "0";
    grp_KeccakF1600_StatePer_1_fu_764_ap_start <= grp_KeccakF1600_StatePer_1_fu_764_ap_start_reg;
    grp_fu_770_p2 <= std_logic_vector(unsigned(trunc_ln411_fu_1254_p1) + unsigned(add_ln405_reg_1999));
    i_32_fu_1097_p2 <= std_logic_vector(unsigned(i_1_reg_633) + unsigned(ap_const_lv29_1));
    i_33_fu_1295_p2 <= std_logic_vector(unsigned(i_2_reg_710) + unsigned(ap_const_lv5_1));
    i_34_fu_1654_p2 <= std_logic_vector(unsigned(i_4_reg_733) + unsigned(ap_const_lv4_1));
    i_35_fu_1690_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(i_5_reg_744));
    i_fu_997_p2 <= std_logic_vector(unsigned(i_0_reg_591) + unsigned(ap_const_lv32_1));
    icmp_ln389_fu_845_p2 <= "1" when (phi_ln389_reg_569 = ap_const_lv3_7) else "0";
    icmp_ln391_fu_858_p2 <= "1" when (trunc_ln391_fu_851_p1 = ap_const_lv3_0) else "0";
    icmp_ln401_1_fu_1055_p2 <= "1" when (unsigned(ap_phi_mux_p_1_phi_fu_626_p4) < unsigned(zext_ln401_fu_1047_p1)) else "0";
    icmp_ln401_fu_1035_p2 <= "1" when (ap_phi_mux_p_12_phi_fu_616_p4 = ap_const_lv32_0) else "0";
    icmp_ln402_fu_1092_p2 <= "1" when (i_1_reg_633 = tmp_s_reg_1926) else "0";
    icmp_ln411_fu_1259_p2 <= "1" when (unsigned(indvars_iv_reg_687) < unsigned(ap_const_lv64_88)) else "0";
    icmp_ln413_fu_1289_p2 <= "1" when (i_2_reg_710 = ap_const_lv5_11) else "0";
    icmp_ln420_fu_1452_p2 <= "1" when (i_3_reg_722 = tmp_3265_reg_2024) else "0";
    icmp_ln426_fu_1555_p2 <= "1" when (indvars_iv_reg_687 = zext_ln422_fu_1531_p1) else "0";
    icmp_ln427_fu_1648_p2 <= "1" when (i_4_reg_733 = ap_const_lv4_8) else "0";
    icmp_ln429_fu_1685_p2 <= "1" when (unsigned(zext_ln429_1_fu_1681_p1) < unsigned(trunc_ln423_reg_2146)) else "0";
    lshr_ln9_fu_1719_p4 <= add_ln424_reg_2151(31 downto 3);
    lshr_ln_fu_982_p4 <= sub_ln398_fu_977_p2(31 downto 3);

    m_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state17, ap_CS_fsm_state23, ap_CS_fsm_state11, ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state12, ap_CS_fsm_state19, ap_CS_fsm_state25, ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state22, sum1_cast_fu_957_p1, zext_ln404_2_fu_1126_p1, zext_ln32_20_fu_1167_p1, zext_ln32_22_fu_1187_p1, zext_ln32_24_fu_1207_p1, zext_ln32_32_fu_1339_p1, zext_ln32_34_fu_1371_p1, zext_ln32_36_fu_1391_p1, zext_ln32_38_fu_1411_p1, zext_ln32_25_fu_1505_p1, zext_ln32_27_fu_1576_p1, zext_ln32_29_fu_1596_p1, zext_ln32_31_fu_1616_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            m_address0 <= zext_ln32_31_fu_1616_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            m_address0 <= zext_ln32_29_fu_1596_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            m_address0 <= zext_ln32_27_fu_1576_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            m_address0 <= zext_ln32_25_fu_1505_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            m_address0 <= zext_ln32_38_fu_1411_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            m_address0 <= zext_ln32_36_fu_1391_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            m_address0 <= zext_ln32_34_fu_1371_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            m_address0 <= zext_ln32_32_fu_1339_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            m_address0 <= zext_ln32_24_fu_1207_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            m_address0 <= zext_ln32_22_fu_1187_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            m_address0 <= zext_ln32_20_fu_1167_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            m_address0 <= zext_ln404_2_fu_1126_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            m_address0 <= sum1_cast_fu_957_p1(13 - 1 downto 0);
        else 
            m_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    m_address1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state17, ap_CS_fsm_state23, ap_CS_fsm_state11, ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state12, ap_CS_fsm_state19, ap_CS_fsm_state25, ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state28, zext_ln32_fu_1137_p1, zext_ln32_19_fu_1157_p1, zext_ln32_21_fu_1177_p1, zext_ln32_23_fu_1197_p1, zext_ln414_3_fu_1328_p1, zext_ln32_33_fu_1361_p1, zext_ln32_35_fu_1381_p1, zext_ln32_37_fu_1401_p1, zext_ln421_4_fu_1494_p1, zext_ln32_26_fu_1566_p1, zext_ln32_28_fu_1586_p1, zext_ln32_30_fu_1606_p1, zext_ln430_1_fu_1711_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            m_address1 <= zext_ln430_1_fu_1711_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            m_address1 <= zext_ln32_30_fu_1606_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            m_address1 <= zext_ln32_28_fu_1586_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            m_address1 <= zext_ln32_26_fu_1566_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            m_address1 <= zext_ln421_4_fu_1494_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            m_address1 <= zext_ln32_37_fu_1401_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            m_address1 <= zext_ln32_35_fu_1381_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            m_address1 <= zext_ln32_33_fu_1361_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            m_address1 <= zext_ln414_3_fu_1328_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            m_address1 <= zext_ln32_23_fu_1197_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            m_address1 <= zext_ln32_21_fu_1177_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            m_address1 <= zext_ln32_19_fu_1157_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            m_address1 <= zext_ln32_fu_1137_p1(13 - 1 downto 0);
        else 
            m_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    m_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state17, ap_CS_fsm_state23, ap_CS_fsm_state11, ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state12, ap_CS_fsm_state19, ap_CS_fsm_state25, ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            m_ce0 <= ap_const_logic_1;
        else 
            m_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    m_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state17, ap_CS_fsm_state23, ap_CS_fsm_state11, ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state12, ap_CS_fsm_state19, ap_CS_fsm_state25, ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            m_ce1 <= ap_const_logic_1;
        else 
            m_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    m_offset_cast68_fu_945_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_offset),14));
    pos_cast1_fu_830_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pos_r),32));
    r_7_i1_fu_1212_p9 <= (((((((m_q0 & m_q1) & reg_822) & reg_818) & reg_814) & reg_810) & reg_805) & reg_800);
    r_7_i2_fu_1621_p9 <= (((((((m_q0 & m_q1) & reg_822) & reg_818) & reg_814) & reg_810) & reg_805) & reg_800);
    r_7_i3_fu_1733_p9 <= (((((((t_q1 & t_q0) & reg_796) & reg_792) & reg_788) & reg_784) & reg_779) & reg_774);
    r_7_i4_fu_1421_p9 <= (((((((m_q0 & m_q1) & reg_822) & reg_818) & reg_814) & reg_810) & reg_805) & reg_800);
    r_7_i_fu_1008_p9 <= (((((((t_q1 & t_q0) & reg_796) & reg_792) & reg_788) & reg_784) & reg_779) & reg_774);

    s_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state32, ap_CS_fsm_state12, ap_CS_fsm_state19, ap_CS_fsm_state25, s_addr_reg_1863, ap_CS_fsm_state8, s_addr_1_reg_1964, ap_CS_fsm_state14, ap_predicate_op195_call_state14, s_addr_3_reg_2098, s_addr_2_reg_2131, s_addr_4_reg_2268, grp_KeccakF1600_StatePer_1_fu_764_state_address0, ap_CS_fsm_state13, ap_CS_fsm_state21, ap_CS_fsm_state20, ap_CS_fsm_state26, ap_CS_fsm_state33, zext_ln414_1_fu_1416_p1, zext_ln431_fu_1728_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            s_address0 <= s_addr_4_reg_2268;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            s_address0 <= zext_ln431_fu_1728_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            s_address0 <= s_addr_2_reg_2131;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            s_address0 <= s_addr_3_reg_2098;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            s_address0 <= zext_ln414_1_fu_1416_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            s_address0 <= s_addr_1_reg_1964;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            s_address0 <= s_addr_reg_1863;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_predicate_op195_call_state14 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            s_address0 <= grp_KeccakF1600_StatePer_1_fu_764_state_address0;
        else 
            s_address0 <= "XXXXX";
        end if; 
    end process;

    s_address1 <= grp_KeccakF1600_StatePer_1_fu_764_state_address1;

    s_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state32, ap_CS_fsm_state12, ap_CS_fsm_state19, ap_CS_fsm_state25, ap_CS_fsm_state8, ap_CS_fsm_state14, ap_predicate_op195_call_state14, grp_KeccakF1600_StatePer_1_fu_764_state_ce0, ap_CS_fsm_state13, ap_CS_fsm_state21, ap_CS_fsm_state20, ap_CS_fsm_state26, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            s_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_predicate_op195_call_state14 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            s_ce0 <= grp_KeccakF1600_StatePer_1_fu_764_state_ce0;
        else 
            s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_ce1_assign_proc : process(ap_CS_fsm_state14, ap_predicate_op195_call_state14, grp_KeccakF1600_StatePer_1_fu_764_state_ce1, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_predicate_op195_call_state14 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            s_ce1 <= grp_KeccakF1600_StatePer_1_fu_764_state_ce1;
        else 
            s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_d0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state14, ap_predicate_op195_call_state14, grp_KeccakF1600_StatePer_1_fu_764_state_d0, ap_CS_fsm_state13, ap_CS_fsm_state21, ap_CS_fsm_state20, ap_CS_fsm_state26, ap_CS_fsm_state33, xor_ln398_fu_1028_p2, xor_ln404_fu_1232_p2, xor_ln414_fu_1441_p2, xor_ln421_fu_1641_p2, xor_ln431_fu_1753_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            s_d0 <= xor_ln431_fu_1753_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            s_d0 <= xor_ln421_fu_1641_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            s_d0 <= xor_ln414_fu_1441_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            s_d0 <= xor_ln404_fu_1232_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            s_d0 <= xor_ln398_fu_1028_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_predicate_op195_call_state14 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            s_d0 <= grp_KeccakF1600_StatePer_1_fu_764_state_d0;
        else 
            s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    s_d1 <= grp_KeccakF1600_StatePer_1_fu_764_state_d1;

    s_we0_assign_proc : process(icmp_ln391_reg_1805, ap_CS_fsm_state8, ap_CS_fsm_state14, ap_predicate_op195_call_state14, icmp_ln426_reg_2158, grp_KeccakF1600_StatePer_1_fu_764_state_we0, ap_CS_fsm_state13, ap_CS_fsm_state21, ap_CS_fsm_state20, ap_CS_fsm_state26, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln426_reg_2158 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln391_reg_1805 = ap_const_lv1_0)))) then 
            s_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_predicate_op195_call_state14 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            s_we0 <= grp_KeccakF1600_StatePer_1_fu_764_state_we0;
        else 
            s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s_we1_assign_proc : process(ap_CS_fsm_state14, ap_predicate_op195_call_state14, grp_KeccakF1600_StatePer_1_fu_764_state_we1, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_predicate_op195_call_state14 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            s_we1 <= grp_KeccakF1600_StatePer_1_fu_764_state_we1;
        else 
            s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln10_fu_1467_p3 <= (trunc_ln421_fu_1463_p1 & ap_const_lv3_0);
    shl_ln11_fu_1301_p3 <= (i_2_reg_710 & ap_const_lv3_0);
    shl_ln_fu_1107_p3 <= (trunc_ln404_fu_1103_p1 & ap_const_lv3_0);
    sub_ln393_fu_873_p2 <= std_logic_vector(signed(ap_const_lv4_8) - signed(zext_ln393_fu_869_p1));
    sub_ln398_fu_977_p2 <= std_logic_vector(unsigned(add_ln396_reg_1829) - unsigned(add_ln392_fu_973_p2));
    sub_ln401_fu_1041_p2 <= std_logic_vector(unsigned(ap_const_lv32_88) - unsigned(ap_phi_mux_p_12_phi_fu_616_p4));
    sub_ln406_fu_1239_p2 <= std_logic_vector(unsigned(p_1_reg_623) - unsigned(zext_ln401_reg_1907));
    sub_ln423_fu_1539_p2 <= std_logic_vector(unsigned(indvars_iv_reg_687) - unsigned(zext_ln422_fu_1531_p1));
    sum1_cast_fu_957_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_fu_952_p2),64));
    sum1_fu_952_p2 <= std_logic_vector(unsigned(m_offset_cast68_reg_1835) + unsigned(empty_89_fu_948_p1));
    t_addr_14_gep_fu_513_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    t_addr_15_gep_fu_521_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    t_addr_16_gep_fu_529_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    t_addr_17_gep_fu_537_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    t_addr_18_gep_fu_545_p3 <= ap_const_lv64_6(3 - 1 downto 0);
    t_addr_19_gep_fu_553_p3 <= ap_const_lv64_7(3 - 1 downto 0);

    t_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state30, ap_CS_fsm_state6, ap_CS_fsm_state31, ap_CS_fsm_state7, ap_CS_fsm_state32, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state27, ap_CS_fsm_state28, t_addr_14_gep_fu_513_p3, t_addr_16_gep_fu_529_p3, t_addr_18_gep_fu_545_p3, zext_ln389_fu_840_p1, zext_ln428_fu_1660_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            t_address0 <= t_addr_18_gep_fu_545_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            t_address0 <= t_addr_16_gep_fu_529_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            t_address0 <= t_addr_14_gep_fu_513_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            t_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            t_address0 <= zext_ln428_fu_1660_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            t_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            t_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            t_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            t_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_address0 <= zext_ln389_fu_840_p1(3 - 1 downto 0);
        else 
            t_address0 <= "XXX";
        end if; 
    end process;


    t_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state30, ap_CS_fsm_state6, ap_CS_fsm_state31, ap_CS_fsm_state7, ap_CS_fsm_state32, ap_CS_fsm_state3, ap_CS_fsm_state4, zext_ln429_reg_2205, ap_CS_fsm_state28, t_addr_15_gep_fu_521_p3, t_addr_17_gep_fu_537_p3, t_addr_19_gep_fu_553_p3, ap_CS_fsm_state29, zext_ln394_fu_1003_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            t_address1 <= t_addr_19_gep_fu_553_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            t_address1 <= t_addr_17_gep_fu_537_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            t_address1 <= t_addr_15_gep_fu_521_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            t_address1 <= zext_ln429_reg_2205(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            t_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            t_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            t_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            t_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_address1 <= zext_ln394_fu_1003_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            t_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            t_address1 <= "XXX";
        end if; 
    end process;


    t_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state30, ap_CS_fsm_state6, ap_CS_fsm_state31, ap_CS_fsm_state7, ap_CS_fsm_state32, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state27, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            t_ce0 <= ap_const_logic_1;
        else 
            t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state30, ap_CS_fsm_state6, ap_CS_fsm_state31, ap_CS_fsm_state7, ap_CS_fsm_state32, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            t_ce1 <= ap_const_logic_1;
        else 
            t_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    t_d1_assign_proc : process(m_q0, m_q1, ap_CS_fsm_state4, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            t_d1 <= m_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_d1 <= m_q0;
        else 
            t_d1 <= "XXXXXXXX";
        end if; 
    end process;


    t_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state27, icmp_ln427_fu_1648_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln427_fu_1648_p2 = ap_const_lv1_0)))) then 
            t_we0 <= ap_const_logic_1;
        else 
            t_we0 <= ap_const_logic_0;
        end if; 
    end process;


    t_we1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            t_we1 <= ap_const_logic_1;
        else 
            t_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_3264_fu_1265_p4 <= p_23_reg_658(31 downto 3);
    tmp_fu_1061_p4 <= ap_phi_mux_p_12_phi_fu_616_p4(31 downto 3);
    trunc_ln391_fu_851_p1 <= pos_r(3 - 1 downto 0);
    trunc_ln393_1_fu_907_p1 <= umax_fu_895_p3(14 - 1 downto 0);
    trunc_ln393_fu_903_p1 <= umax_fu_895_p3(32 - 1 downto 0);
    trunc_ln401_fu_1051_p1 <= sub_ln401_fu_1041_p2(14 - 1 downto 0);
    trunc_ln404_fu_1103_p1 <= i_1_reg_633(11 - 1 downto 0);
    trunc_ln411_fu_1254_p1 <= p_38_rec_reg_698(14 - 1 downto 0);
    trunc_ln414_fu_1251_p1 <= m_offset(12 - 1 downto 0);
    trunc_ln421_fu_1463_p1 <= i_3_reg_722(4 - 1 downto 0);
    trunc_ln423_fu_1545_p1 <= sub_ln423_fu_1539_p2(33 - 1 downto 0);
    trunc_ln429_fu_1677_p1 <= i_5_reg_744(14 - 1 downto 0);
    trunc_ln432_fu_1716_p1 <= sub_ln423_reg_2141(32 - 1 downto 0);
    umax_fu_895_p3 <= 
        xor_ln393_fu_864_p2 when (empty_87_fu_889_p2(0) = '1') else 
        xor_ln393_1_fu_883_p2;
    xor_ln393_1_fu_883_p2 <= (empty_86_fu_879_p1 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln393_2_cast_fu_917_p2 <= (trunc_ln393_1_fu_907_p1 xor ap_const_lv14_3FFF);
    xor_ln393_2_fu_911_p2 <= (umax_fu_895_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln393_fu_864_p2 <= (mlen xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln398_fu_1028_p2 <= (s_q0 xor r_7_i_fu_1008_p9);
    xor_ln404_fu_1232_p2 <= (s_q0 xor r_7_i1_fu_1212_p9);
    xor_ln414_fu_1441_p2 <= (s_q0 xor r_7_i4_fu_1421_p9);
    xor_ln421_fu_1641_p2 <= (s_q0 xor r_7_i2_fu_1621_p9);
    xor_ln431_fu_1753_p2 <= (s_q0 xor r_7_i3_fu_1733_p9);
    zext_ln32_19_fu_1157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_13_fu_1152_p2),64));
    zext_ln32_20_fu_1167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_14_fu_1162_p2),64));
    zext_ln32_21_fu_1177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_15_fu_1172_p2),64));
    zext_ln32_22_fu_1187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_16_fu_1182_p2),64));
    zext_ln32_23_fu_1197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_17_fu_1192_p2),64));
    zext_ln32_24_fu_1207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_18_fu_1202_p2),64));
    zext_ln32_25_fu_1505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_19_fu_1499_p2),64));
    zext_ln32_26_fu_1566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_20_fu_1561_p2),64));
    zext_ln32_27_fu_1576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_21_fu_1571_p2),64));
    zext_ln32_28_fu_1586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_22_fu_1581_p2),64));
    zext_ln32_29_fu_1596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_23_fu_1591_p2),64));
    zext_ln32_30_fu_1606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_24_fu_1601_p2),64));
    zext_ln32_31_fu_1616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_25_fu_1611_p2),64));
    zext_ln32_32_fu_1339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_26_fu_1333_p2),64));
    zext_ln32_33_fu_1361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_27_fu_1356_p2),64));
    zext_ln32_34_fu_1371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_28_fu_1366_p2),64));
    zext_ln32_35_fu_1381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_29_fu_1376_p2),64));
    zext_ln32_36_fu_1391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_30_fu_1386_p2),64));
    zext_ln32_37_fu_1401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_31_fu_1396_p2),64));
    zext_ln32_38_fu_1411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_32_fu_1406_p2),64));
    zext_ln32_fu_1137_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_fu_1131_p2),64));
    zext_ln389_fu_840_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln389_reg_569),64));
    zext_ln391_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln391_fu_851_p1),32));
    zext_ln393_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln391_fu_851_p1),4));
    zext_ln394_fu_1003_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_591),64));
    zext_ln398_fu_992_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_982_p4),64));
    zext_ln401_fu_1047_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln401_fu_1041_p2),64));
    zext_ln402_1_fu_1071_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_1061_p4),30));
    zext_ln402_fu_1088_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_633),30));
    zext_ln404_1_fu_1147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln404_fu_1142_p2),64));
    zext_ln404_2_fu_1126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln404_2_fu_1120_p2),64));
    zext_ln404_fu_1085_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_offset),14));
    zext_ln414_1_fu_1416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_710),64));
    zext_ln414_2_fu_1318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln414_1_fu_1313_p2),14));
    zext_ln414_3_fu_1328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln414_2_fu_1322_p2),64));
    zext_ln414_fu_1309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln11_fu_1301_p3),12));
    zext_ln420_1_fu_1275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3264_fu_1265_p4),30));
    zext_ln420_fu_1448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_722),30));
    zext_ln421_1_fu_1515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln421_1_fu_1510_p2),64));
    zext_ln421_3_fu_1484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln421_2_fu_1479_p2),14));
    zext_ln421_4_fu_1494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln421_3_fu_1488_p2),64));
    zext_ln421_fu_1475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln10_fu_1467_p3),12));
    zext_ln422_1_fu_1527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_1520_p3),32));
    zext_ln422_fu_1531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_1520_p3),64));
    zext_ln423_fu_1535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_1520_p3),14));
    zext_ln428_fu_1660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_733),64));
    zext_ln429_1_fu_1681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_744),33));
    zext_ln429_fu_1673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_744),64));
    zext_ln430_1_fu_1711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln430_3_fu_1706_p2),64));
    zext_ln430_fu_1665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_offset),14));
    zext_ln431_fu_1728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln9_fu_1719_p4),64));
end behav;
