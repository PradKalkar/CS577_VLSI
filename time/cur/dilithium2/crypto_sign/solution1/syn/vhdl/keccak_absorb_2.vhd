-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity keccak_absorb_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce0 : OUT STD_LOGIC;
    s_we0 : OUT STD_LOGIC;
    s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce1 : OUT STD_LOGIC;
    s_we1 : OUT STD_LOGIC;
    s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    pos_r : IN STD_LOGIC_VECTOR (6 downto 0);
    m_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    m_ce0 : OUT STD_LOGIC;
    m_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    m_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    m_ce1 : OUT STD_LOGIC;
    m_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    m_offset : IN STD_LOGIC_VECTOR (12 downto 0);
    mlen : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of keccak_absorb_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000100000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000001000000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000010000000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000010000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000100000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000001000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000010000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000100000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000001000000000000000000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000010000000000000000000000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000100000000000000000000000";
    constant ap_ST_fsm_pp1_stage3 : STD_LOGIC_VECTOR (34 downto 0) := "00000000001000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (34 downto 0) := "00000000010000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (34 downto 0) := "00000000100000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (34 downto 0) := "00000001000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (34 downto 0) := "00000010000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (34 downto 0) := "00000100000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (34 downto 0) := "00001000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (34 downto 0) := "00010000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (34 downto 0) := "00100000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (34 downto 0) := "01000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (34 downto 0) := "10000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv14_3FFF : STD_LOGIC_VECTOR (13 downto 0) := "11111111111111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv29_1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv14_2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_const_lv14_3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000011";
    constant ap_const_lv14_4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_const_lv14_5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000101";
    constant ap_const_lv14_6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000110";
    constant ap_const_lv14_7 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000111";
    constant ap_const_lv64_88 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010001000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv64_FFFFFFFFFFFFFF78 : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111101111000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_reg_637 : STD_LOGIC_VECTOR (28 downto 0);
    signal i_3_reg_726 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_5_reg_737 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_768 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal t_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal reg_773 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_778 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal reg_783 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_788 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal reg_793 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_798 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state10_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln404_reg_1922 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state24_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal icmp_ln423_reg_2091 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_803 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_808 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state11_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_block_state25_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_pp1_stage2_11001 : BOOLEAN;
    signal reg_812 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_816 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_820 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state12_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_pp1_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage3 : signal is "none";
    signal ap_block_state26_pp1_stage3_iter0 : BOOLEAN;
    signal ap_block_pp1_stage3_11001 : BOOLEAN;
    signal reg_824 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_764_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal reg_828 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln414_fu_1261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pos_cast1_fu_832_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pos_cast1_reg_1771 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln391_fu_836_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln393_fu_856_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln393_reg_1785 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln391_fu_847_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln393_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln393_reg_1791 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln395_2_fu_913_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln395_2_reg_1795 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln395_2_cast_fu_919_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal xor_ln395_2_cast_reg_1800 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_55_fu_925_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_55_reg_1805 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln397_1_fu_937_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln397_1_reg_1810 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln398_fu_942_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln398_reg_1815 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_offset_cast68_fu_947_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal m_offset_cast68_reg_1821 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln396_fu_969_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln396_reg_1834 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_964_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_addr_reg_1849 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_999_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln403_fu_1037_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln403_reg_1889 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln403_fu_1049_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln403_reg_1893 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln403_fu_1053_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln403_reg_1898 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln403_1_fu_1057_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln403_1_reg_1903 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln404_1_fu_1073_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln404_1_reg_1907 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_s_reg_1912 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln406_fu_1087_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln406_reg_1917 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln404_fu_1090_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_4_fu_1095_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal i_4_reg_1926 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln406_2_fu_1122_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln406_2_reg_1931 : STD_LOGIC_VECTOR (13 downto 0);
    signal s_addr_1_reg_1951 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln408_fu_1247_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln408_reg_1986 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_KeccakF1600_StatePer_1_fu_758_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_758_ap_done : STD_LOGIC;
    signal ap_predicate_op203_call_state15 : BOOLEAN;
    signal ap_block_state15_on_subcall_done : BOOLEAN;
    signal trunc_ln416_fu_1253_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln416_reg_1992 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln414_fu_1256_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln414_reg_1998 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln423_1_fu_1277_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln423_1_reg_2007 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_6739_reg_2012 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_6_fu_1297_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_6_reg_2021 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal add_ln416_2_fu_1324_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln416_2_reg_2026 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln415_fu_1291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln418_fu_1346_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln418_reg_2046 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_addr_3_reg_2081 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln421_fu_1444_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal icmp_ln423_fu_1450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state23_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state27_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln423_fu_1455_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln423_reg_2095 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln425_3_fu_1490_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln425_3_reg_2100 : STD_LOGIC_VECTOR (13 downto 0);
    signal s_addr_2_reg_2120 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln428_fu_1624_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln428_reg_2155 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal sub_ln428_fu_1628_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln428_reg_2160 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln428_fu_1634_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln428_reg_2165 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln429_fu_1638_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln429_reg_2170 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln431_fu_1644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln431_reg_2177 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_addr_10_gep_fu_484_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_addr_11_gep_fu_492_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln438_fu_1653_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln438_reg_2191 : STD_LOGIC_VECTOR (13 downto 0);
    signal t_addr_12_gep_fu_501_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal t_addr_13_gep_fu_509_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_addr_14_gep_fu_517_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal t_addr_15_gep_fu_525_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_addr_16_gep_fu_533_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal t_addr_17_gep_fu_541_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln436_fu_1662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln436_reg_2226 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state32_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state33_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal i_7_fu_1667_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_7_reg_2230 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal trunc_ln441_fu_1702_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln441_reg_2240 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal s_addr_4_reg_2245 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state23 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage3_subdone : BOOLEAN;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state32 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_ce0 : STD_LOGIC;
    signal t_we0 : STD_LOGIC;
    signal t_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_ce1 : STD_LOGIC;
    signal t_we1 : STD_LOGIC;
    signal t_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_758_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_758_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_758_state_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_758_state_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_758_state_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_758_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_758_state_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_758_state_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_758_state_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_758_state_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_ln391_reg_573 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_05_rec_reg_584 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_reg_595 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_1626_reg_605 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_phi_mux_p_12_phi_fu_620_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_12_reg_617 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_p_1_phi_fu_630_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_1_reg_627 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_i_1_phi_fu_641_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_p_2728_phi_fu_652_p6 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_2728_reg_648 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_23_reg_662 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln409_fu_1241_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_p_2_phi_fu_680_p6 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_2_reg_677 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv_reg_691 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_38_rec_reg_702 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_reg_714 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_phi_mux_i_3_phi_fu_730_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_i_5_phi_fu_741_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal add_ln441_fu_1746_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_p_34_phi_fu_752_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_34_reg_749 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_KeccakF1600_StatePer_1_fu_758_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln391_fu_842_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum1_cast_fu_959_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln400_fu_994_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln396_fu_1005_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln406_2_fu_1128_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_fu_1139_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln406_1_fu_1149_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_19_fu_1159_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln32_20_fu_1169_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_21_fu_1179_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln32_22_fu_1189_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_23_fu_1199_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln32_24_fu_1209_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln416_3_fu_1330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_32_fu_1341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_33_fu_1357_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_34_fu_1367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_35_fu_1377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_36_fu_1387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_37_fu_1397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_38_fu_1407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln416_1_fu_1412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln425_4_fu_1496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_25_fu_1507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln425_1_fu_1517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_26_fu_1527_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal zext_ln32_27_fu_1537_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_28_fu_1547_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage2 : BOOLEAN;
    signal zext_ln32_29_fu_1557_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_30_fu_1567_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage3 : BOOLEAN;
    signal zext_ln32_31_fu_1577_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln438_1_fu_1692_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln436_fu_1697_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln440_fu_1714_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln400_fu_1030_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln406_fu_1234_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln416_fu_1437_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln425_fu_1602_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln440_fu_1739_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln393_fu_853_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln395_fu_871_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln395_fu_875_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_53_fu_881_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln395_fu_866_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln395_1_fu_885_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_54_fu_891_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal umax_fu_897_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln395_2_fu_909_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln395_fu_905_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln397_fu_931_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_56_fu_950_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum1_fu_954_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln394_fu_975_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln400_fu_979_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln_fu_984_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_7_i_fu_1010_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln403_fu_1043_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_1063_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln406_fu_1105_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln_fu_1109_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln406_1_fu_1117_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_fu_1133_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln404_fu_1101_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln406_fu_1144_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln32_13_fu_1154_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_14_fu_1164_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_15_fu_1174_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_16_fu_1184_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_17_fu_1194_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_18_fu_1204_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_7_i1_fu_1214_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6738_fu_1267_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal shl_ln7_fu_1303_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln416_fu_1311_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln416_1_fu_1315_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln416_2_fu_1320_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_26_fu_1335_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_27_fu_1352_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_28_fu_1362_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_29_fu_1372_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_30_fu_1382_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_31_fu_1392_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_32_fu_1402_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_7_i4_fu_1417_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln425_fu_1465_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln6_fu_1469_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln425_fu_1477_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln425_2_fu_1481_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln425_3_fu_1486_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_19_fu_1501_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln423_fu_1461_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln425_1_fu_1512_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln32_20_fu_1522_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_21_fu_1532_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_22_fu_1542_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_23_fu_1552_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_24_fu_1562_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_25_fu_1572_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_7_i2_fu_1582_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln_fu_1609_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln427_fu_1620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln427_1_fu_1616_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln438_fu_1650_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln436_1_fu_1658_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln436_fu_1673_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln438_1_fu_1677_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln438_2_fu_1682_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln438_3_fu_1687_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln9_fu_1705_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_7_i3_fu_1719_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_block_pp1_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component KeccakF1600_StatePer_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keccak_absorb_2_t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    t_U : component keccak_absorb_2_t
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t_address0,
        ce0 => t_ce0,
        we0 => t_we0,
        d0 => t_d0,
        q0 => t_q0,
        address1 => t_address1,
        ce1 => t_ce1,
        we1 => t_we1,
        d1 => t_d1,
        q1 => t_q1);

    grp_KeccakF1600_StatePer_1_fu_758 : component KeccakF1600_StatePer_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePer_1_fu_758_ap_start,
        ap_done => grp_KeccakF1600_StatePer_1_fu_758_ap_done,
        ap_idle => grp_KeccakF1600_StatePer_1_fu_758_ap_idle,
        ap_ready => grp_KeccakF1600_StatePer_1_fu_758_ap_ready,
        state_address0 => grp_KeccakF1600_StatePer_1_fu_758_state_address0,
        state_ce0 => grp_KeccakF1600_StatePer_1_fu_758_state_ce0,
        state_we0 => grp_KeccakF1600_StatePer_1_fu_758_state_we0,
        state_d0 => grp_KeccakF1600_StatePer_1_fu_758_state_d0,
        state_q0 => s_q0,
        state_address1 => grp_KeccakF1600_StatePer_1_fu_758_state_address1,
        state_ce1 => grp_KeccakF1600_StatePer_1_fu_758_state_ce1,
        state_we1 => grp_KeccakF1600_StatePer_1_fu_758_state_we1,
        state_d1 => grp_KeccakF1600_StatePer_1_fu_758_state_d1,
        state_q1 => s_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln403_1_fu_1057_p2 = ap_const_lv1_0) and (icmp_ln403_fu_1037_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln403_1_fu_1057_p2 = ap_const_lv1_0) and (icmp_ln403_fu_1037_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state23) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln414_fu_1261_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((icmp_ln414_fu_1261_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state32) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state32))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state32);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                    ap_return_preg <= ap_phi_mux_p_34_phi_fu_752_p4;
                end if; 
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_1_fu_758_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_1_fu_758_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((icmp_ln415_fu_1291_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
                    grp_KeccakF1600_StatePer_1_fu_758_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_1_fu_758_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_1_fu_758_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_595_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_0_reg_595 <= i_fu_999_p2;
            elsif (((icmp_ln391_fu_847_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln393_fu_860_p2 = ap_const_lv1_0))) then 
                i_0_reg_595 <= zext_ln393_fu_856_p1;
            end if; 
        end if;
    end process;

    i_1_reg_637_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln403_1_fu_1057_p2 = ap_const_lv1_0) and (icmp_ln403_fu_1037_p2 = ap_const_lv1_0))) then 
                i_1_reg_637 <= ap_const_lv29_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln404_reg_1922 = ap_const_lv1_0))) then 
                i_1_reg_637 <= i_4_reg_1926;
            end if; 
        end if;
    end process;

    i_2_reg_714_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln414_fu_1261_p2 = ap_const_lv1_0))) then 
                i_2_reg_714 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                i_2_reg_714 <= i_6_reg_2021;
            end if; 
        end if;
    end process;

    i_3_reg_726_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln423_reg_2091 = ap_const_lv1_0))) then 
                i_3_reg_726 <= add_ln423_reg_2095;
            elsif (((icmp_ln414_fu_1261_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                i_3_reg_726 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_5_reg_737_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                i_5_reg_737 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln436_reg_2226 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                i_5_reg_737 <= i_7_reg_2230;
            end if; 
        end if;
    end process;

    indvars_iv_reg_691_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state15_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                indvars_iv_reg_691 <= ap_phi_mux_p_2_phi_fu_680_p6;
            elsif (((grp_KeccakF1600_StatePer_1_fu_758_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                indvars_iv_reg_691 <= add_ln421_fu_1444_p2;
            end if; 
        end if;
    end process;

    p_05_rec_reg_584_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_05_rec_reg_584 <= add_ln396_reg_1834;
            elsif (((icmp_ln391_fu_847_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln393_fu_860_p2 = ap_const_lv1_0))) then 
                p_05_rec_reg_584 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    p_12_reg_617_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln393_fu_860_p2 = ap_const_lv1_1) and (icmp_ln391_fu_847_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_12_reg_617 <= pos_cast1_reg_1771;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln393_reg_1791 = ap_const_lv1_0))) then 
                p_12_reg_617 <= add_ln398_reg_1815;
            end if; 
        end if;
    end process;

    p_1626_reg_605_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln393_fu_860_p2 = ap_const_lv1_1) and (icmp_ln391_fu_847_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_1626_reg_605 <= ap_const_lv14_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln393_reg_1791 = ap_const_lv1_0))) then 
                p_1626_reg_605 <= xor_ln395_2_cast_reg_1800;
            end if; 
        end if;
    end process;

    p_1_reg_627_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln393_fu_860_p2 = ap_const_lv1_1) and (icmp_ln391_fu_847_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_1_reg_627 <= mlen;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln393_reg_1791 = ap_const_lv1_0))) then 
                p_1_reg_627 <= add_ln397_1_reg_1810;
            end if; 
        end if;
    end process;

    p_23_reg_662_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln403_fu_1037_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((icmp_ln403_1_fu_1057_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln403_fu_1037_p2 = ap_const_lv1_0)))) then 
                p_23_reg_662 <= ap_phi_mux_p_12_phi_fu_620_p4;
            elsif (((ap_const_boolean_0 = ap_block_state15_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln403_1_reg_1903 = ap_const_lv1_0) and (icmp_ln403_reg_1889 = ap_const_lv1_0))) then 
                p_23_reg_662 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_2728_reg_648_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln403_fu_1037_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((icmp_ln403_1_fu_1057_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln403_fu_1037_p2 = ap_const_lv1_0)))) then 
                p_2728_reg_648 <= ap_const_lv14_0;
            elsif (((ap_const_boolean_0 = ap_block_state15_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln403_1_reg_1903 = ap_const_lv1_0) and (icmp_ln403_reg_1889 = ap_const_lv1_0))) then 
                p_2728_reg_648 <= trunc_ln403_reg_1898;
            end if; 
        end if;
    end process;

    p_2_reg_677_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln403_fu_1037_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((icmp_ln403_1_fu_1057_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln403_fu_1037_p2 = ap_const_lv1_0)))) then 
                p_2_reg_677 <= ap_phi_mux_p_1_phi_fu_630_p4;
            elsif (((ap_const_boolean_0 = ap_block_state15_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln403_1_reg_1903 = ap_const_lv1_0) and (icmp_ln403_reg_1889 = ap_const_lv1_0))) then 
                p_2_reg_677 <= sub_ln409_fu_1241_p2;
            end if; 
        end if;
    end process;

    p_34_reg_749_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln431_fu_1644_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                p_34_reg_749 <= add_ln429_fu_1638_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state38) and (icmp_ln431_reg_2177 = ap_const_lv1_0))) then 
                p_34_reg_749 <= add_ln441_fu_1746_p2;
            end if; 
        end if;
    end process;

    p_38_rec_reg_702_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state15_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                p_38_rec_reg_702 <= ap_const_lv64_0;
            elsif (((grp_KeccakF1600_StatePer_1_fu_758_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                p_38_rec_reg_702 <= add_ln418_reg_2046;
            end if; 
        end if;
    end process;

    phi_ln391_reg_573_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln391_fu_847_p2 = ap_const_lv1_0))) then 
                phi_ln391_reg_573 <= add_ln391_fu_836_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln391_reg_573 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    reg_768_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                reg_768 <= t_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                reg_768 <= t_q0;
            end if; 
        end if;
    end process;

    reg_773_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                reg_773 <= t_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                reg_773 <= t_q1;
            end if; 
        end if;
    end process;

    reg_778_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                reg_778 <= t_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                reg_778 <= t_q0;
            end if; 
        end if;
    end process;

    reg_783_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                reg_783 <= t_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                reg_783 <= t_q1;
            end if; 
        end if;
    end process;

    reg_788_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                reg_788 <= t_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                reg_788 <= t_q0;
            end if; 
        end if;
    end process;

    reg_793_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                reg_793 <= t_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                reg_793 <= t_q1;
            end if; 
        end if;
    end process;

    reg_798_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (icmp_ln423_reg_2091 = ap_const_lv1_0)))) then 
                reg_798 <= m_q1;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln404_reg_1922 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                reg_798 <= m_q0;
            end if; 
        end if;
    end process;

    reg_803_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (icmp_ln423_reg_2091 = ap_const_lv1_0)))) then 
                reg_803 <= m_q0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln404_reg_1922 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                reg_803 <= m_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln396_reg_1834 <= add_ln396_fu_969_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln391_fu_847_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln393_fu_860_p2 = ap_const_lv1_0))) then
                add_ln397_1_reg_1810 <= add_ln397_1_fu_937_p2;
                add_ln398_reg_1815 <= add_ln398_fu_942_p2;
                empty_55_reg_1805 <= empty_55_fu_925_p2;
                    m_offset_cast68_reg_1821(12 downto 0) <= m_offset_cast68_fu_947_p1(12 downto 0);
                xor_ln395_2_cast_reg_1800 <= xor_ln395_2_cast_fu_919_p2;
                xor_ln395_2_reg_1795 <= xor_ln395_2_fu_913_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln404_fu_1090_p2 = ap_const_lv1_0))) then
                add_ln406_2_reg_1931 <= add_ln406_2_fu_1122_p2;
                s_addr_1_reg_1951 <= zext_ln406_1_fu_1149_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state15_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                add_ln408_reg_1986 <= add_ln408_fu_1247_p2;
                trunc_ln416_reg_1992 <= trunc_ln416_fu_1253_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln415_fu_1291_p2 = ap_const_lv1_0))) then
                add_ln416_2_reg_2026 <= add_ln416_2_fu_1324_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln415_fu_1291_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                add_ln418_reg_2046 <= add_ln418_fu_1346_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                add_ln423_reg_2095 <= add_ln423_fu_1455_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln423_fu_1450_p2 = ap_const_lv1_0))) then
                add_ln425_3_reg_2100 <= add_ln425_3_fu_1490_p2;
                s_addr_2_reg_2120 <= zext_ln425_1_fu_1517_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                add_ln429_reg_2170 <= add_ln429_fu_1638_p2;
                icmp_ln431_reg_2177 <= icmp_ln431_fu_1644_p2;
                sub_ln428_reg_2160 <= sub_ln428_fu_1628_p2;
                trunc_ln428_reg_2165 <= trunc_ln428_fu_1634_p1;
                    zext_ln428_reg_2155(7 downto 3) <= zext_ln428_fu_1624_p1(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln431_fu_1644_p2 = ap_const_lv1_0))) then
                add_ln438_reg_2191 <= add_ln438_fu_1653_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                i_4_reg_1926 <= i_4_fu_1095_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                i_6_reg_2021 <= i_6_fu_1297_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                i_7_reg_2230 <= i_7_fu_1667_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln391_fu_847_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln393_reg_1791 <= icmp_ln393_fu_860_p2;
                    zext_ln393_reg_1785(2 downto 0) <= zext_ln393_fu_856_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln403_fu_1037_p2 = ap_const_lv1_0))) then
                icmp_ln403_1_reg_1903 <= icmp_ln403_1_fu_1057_p2;
                trunc_ln403_reg_1898 <= trunc_ln403_fu_1053_p1;
                    zext_ln403_reg_1893(31 downto 0) <= zext_ln403_fu_1049_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                icmp_ln403_reg_1889 <= icmp_ln403_fu_1037_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln404_reg_1922 <= icmp_ln404_fu_1090_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln423_reg_2091 <= icmp_ln423_fu_1450_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln436_reg_2226 <= icmp_ln436_fu_1662_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    pos_cast1_reg_1771(6 downto 0) <= pos_cast1_fu_832_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (icmp_ln423_reg_2091 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln404_reg_1922 = ap_const_lv1_0)))) then
                reg_808 <= m_q1;
                reg_812 <= m_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (icmp_ln423_reg_2091 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln404_reg_1922 = ap_const_lv1_0)))) then
                reg_816 <= s_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_const_boolean_0 = ap_block_pp1_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln423_reg_2091 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln404_reg_1922 = ap_const_lv1_0)))) then
                reg_820 <= m_q1;
                reg_824 <= m_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln414_fu_1261_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln414_fu_1261_p2 = ap_const_lv1_0)))) then
                reg_828 <= grp_fu_764_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                s_addr_3_reg_2081 <= zext_ln416_1_fu_1412_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                s_addr_4_reg_2245 <= zext_ln440_fu_1714_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_964_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                s_addr_reg_1849 <= zext_ln400_fu_994_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln414_fu_1261_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                tmp_6739_reg_2012 <= indvars_iv_reg_691(7 downto 3);
                    zext_ln423_1_reg_2007(28 downto 0) <= zext_ln423_1_fu_1277_p1(28 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln403_1_fu_1057_p2 = ap_const_lv1_0) and (icmp_ln403_fu_1037_p2 = ap_const_lv1_0))) then
                tmp_s_reg_1912 <= sub_ln403_fu_1043_p2(31 downto 3);
                    zext_ln404_1_reg_1907(28 downto 0) <= zext_ln404_1_fu_1073_p1(28 downto 0);
                    zext_ln406_reg_1917(12 downto 0) <= zext_ln406_fu_1087_p1(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                trunc_ln414_reg_1998 <= trunc_ln414_fu_1256_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                trunc_ln441_reg_2240 <= trunc_ln441_fu_1702_p1;
            end if;
        end if;
    end process;
    pos_cast1_reg_1771(31 downto 7) <= "0000000000000000000000000";
    zext_ln393_reg_1785(31 downto 3) <= "00000000000000000000000000000";
    m_offset_cast68_reg_1821(13) <= '0';
    zext_ln403_reg_1893(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln404_1_reg_1907(29) <= '0';
    zext_ln406_reg_1917(13) <= '0';
    zext_ln423_1_reg_2007(29) <= '0';
    zext_ln428_reg_2155(2 downto 0) <= "000";
    zext_ln428_reg_2155(13 downto 8) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state16, icmp_ln414_fu_1261_p2, ap_CS_fsm_state2, icmp_ln391_fu_847_p2, icmp_ln393_fu_860_p2, ap_CS_fsm_state3, exitcond_fu_964_p2, icmp_ln403_fu_1037_p2, ap_CS_fsm_state8, icmp_ln403_1_fu_1057_p2, icmp_ln404_fu_1090_p2, ap_CS_fsm_state15, grp_KeccakF1600_StatePer_1_fu_758_ap_done, ap_block_state15_on_subcall_done, ap_CS_fsm_state17, icmp_ln415_fu_1291_p2, ap_CS_fsm_state22, icmp_ln423_fu_1450_p2, ap_CS_fsm_state28, icmp_ln431_fu_1644_p2, icmp_ln436_fu_1662_p2, ap_enable_reg_pp2_iter0, ap_block_pp0_stage0_subdone, ap_block_pp0_stage3_subdone, ap_block_pp1_stage0_subdone, ap_block_pp1_stage3_subdone, ap_block_pp2_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp1_stage1_subdone, ap_block_pp1_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln391_fu_847_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln393_fu_860_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((icmp_ln393_fu_860_p2 = ap_const_lv1_1) and (icmp_ln391_fu_847_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond_fu_964_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln403_1_fu_1057_p2 = ap_const_lv1_0) and (icmp_ln403_fu_1037_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln404_fu_1090_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln404_fu_1090_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_boolean_0 = ap_block_state15_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((icmp_ln414_fu_1261_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                if (((icmp_ln415_fu_1291_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state22 => 
                if (((grp_KeccakF1600_StatePer_1_fu_758_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln423_fu_1450_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln423_fu_1450_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_pp1_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                end if;
            when ap_ST_fsm_state28 => 
                if (((icmp_ln431_fu_1644_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln436_fu_1662_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln436_fu_1662_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln32_13_fu_1154_p2 <= std_logic_vector(unsigned(ap_const_lv14_2) + unsigned(add_ln406_2_reg_1931));
    add_ln32_14_fu_1164_p2 <= std_logic_vector(unsigned(ap_const_lv14_3) + unsigned(add_ln406_2_reg_1931));
    add_ln32_15_fu_1174_p2 <= std_logic_vector(unsigned(ap_const_lv14_4) + unsigned(add_ln406_2_reg_1931));
    add_ln32_16_fu_1184_p2 <= std_logic_vector(unsigned(ap_const_lv14_5) + unsigned(add_ln406_2_reg_1931));
    add_ln32_17_fu_1194_p2 <= std_logic_vector(unsigned(ap_const_lv14_6) + unsigned(add_ln406_2_reg_1931));
    add_ln32_18_fu_1204_p2 <= std_logic_vector(unsigned(ap_const_lv14_7) + unsigned(add_ln406_2_reg_1931));
    add_ln32_19_fu_1501_p2 <= std_logic_vector(unsigned(ap_const_lv14_1) + unsigned(add_ln425_3_fu_1490_p2));
    add_ln32_20_fu_1522_p2 <= std_logic_vector(unsigned(ap_const_lv14_2) + unsigned(add_ln425_3_reg_2100));
    add_ln32_21_fu_1532_p2 <= std_logic_vector(unsigned(ap_const_lv14_3) + unsigned(add_ln425_3_reg_2100));
    add_ln32_22_fu_1542_p2 <= std_logic_vector(unsigned(ap_const_lv14_4) + unsigned(add_ln425_3_reg_2100));
    add_ln32_23_fu_1552_p2 <= std_logic_vector(unsigned(ap_const_lv14_5) + unsigned(add_ln425_3_reg_2100));
    add_ln32_24_fu_1562_p2 <= std_logic_vector(unsigned(ap_const_lv14_6) + unsigned(add_ln425_3_reg_2100));
    add_ln32_25_fu_1572_p2 <= std_logic_vector(unsigned(ap_const_lv14_7) + unsigned(add_ln425_3_reg_2100));
    add_ln32_26_fu_1335_p2 <= std_logic_vector(unsigned(add_ln416_2_fu_1324_p2) + unsigned(ap_const_lv14_1));
    add_ln32_27_fu_1352_p2 <= std_logic_vector(unsigned(add_ln416_2_reg_2026) + unsigned(ap_const_lv14_2));
    add_ln32_28_fu_1362_p2 <= std_logic_vector(unsigned(add_ln416_2_reg_2026) + unsigned(ap_const_lv14_3));
    add_ln32_29_fu_1372_p2 <= std_logic_vector(unsigned(add_ln416_2_reg_2026) + unsigned(ap_const_lv14_4));
    add_ln32_30_fu_1382_p2 <= std_logic_vector(unsigned(add_ln416_2_reg_2026) + unsigned(ap_const_lv14_5));
    add_ln32_31_fu_1392_p2 <= std_logic_vector(unsigned(add_ln416_2_reg_2026) + unsigned(ap_const_lv14_6));
    add_ln32_32_fu_1402_p2 <= std_logic_vector(unsigned(add_ln416_2_reg_2026) + unsigned(ap_const_lv14_7));
    add_ln32_fu_1133_p2 <= std_logic_vector(unsigned(ap_const_lv14_1) + unsigned(add_ln406_2_fu_1122_p2));
    add_ln391_fu_836_p2 <= std_logic_vector(unsigned(phi_ln391_reg_573) + unsigned(ap_const_lv3_1));
    add_ln394_fu_975_p2 <= std_logic_vector(unsigned(zext_ln393_reg_1785) + unsigned(empty_55_reg_1805));
    add_ln396_fu_969_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(p_05_rec_reg_584));
    add_ln397_1_fu_937_p2 <= std_logic_vector(unsigned(mlen) + unsigned(add_ln397_fu_931_p2));
    add_ln397_fu_931_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(umax_fu_897_p3));
    add_ln398_fu_942_p2 <= std_logic_vector(unsigned(empty_55_fu_925_p2) + unsigned(pos_cast1_reg_1771));
    add_ln406_1_fu_1117_p2 <= std_logic_vector(unsigned(zext_ln406_reg_1917) + unsigned(shl_ln_fu_1109_p3));
    add_ln406_2_fu_1122_p2 <= std_logic_vector(unsigned(p_1626_reg_605) + unsigned(add_ln406_1_fu_1117_p2));
    add_ln406_fu_1144_p2 <= std_logic_vector(unsigned(zext_ln404_1_reg_1907) + unsigned(zext_ln404_fu_1101_p1));
    add_ln408_fu_1247_p2 <= std_logic_vector(unsigned(p_1626_reg_605) + unsigned(ap_phi_mux_p_2728_phi_fu_652_p6));
    add_ln416_1_fu_1315_p2 <= std_logic_vector(unsigned(trunc_ln416_reg_1992) + unsigned(zext_ln416_fu_1311_p1));
    add_ln416_2_fu_1324_p2 <= std_logic_vector(unsigned(reg_828) + unsigned(zext_ln416_2_fu_1320_p1));
    add_ln418_fu_1346_p2 <= std_logic_vector(unsigned(p_38_rec_reg_702) + unsigned(ap_const_lv64_88));
    add_ln421_fu_1444_p2 <= std_logic_vector(unsigned(indvars_iv_reg_691) + unsigned(ap_const_lv64_FFFFFFFFFFFFFF78));
    add_ln423_fu_1455_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_3_phi_fu_730_p4) + unsigned(ap_const_lv5_1));
    add_ln425_1_fu_1512_p2 <= std_logic_vector(unsigned(zext_ln423_1_reg_2007) + unsigned(zext_ln423_fu_1461_p1));
    add_ln425_2_fu_1481_p2 <= std_logic_vector(unsigned(trunc_ln416_reg_1992) + unsigned(zext_ln425_fu_1477_p1));
    add_ln425_3_fu_1490_p2 <= std_logic_vector(unsigned(reg_828) + unsigned(zext_ln425_3_fu_1486_p1));
    add_ln429_fu_1638_p2 <= std_logic_vector(unsigned(p_23_reg_662) + unsigned(zext_ln427_1_fu_1616_p1));
    add_ln438_1_fu_1677_p2 <= std_logic_vector(unsigned(zext_ln428_reg_2155) + unsigned(trunc_ln436_fu_1673_p1));
    add_ln438_2_fu_1682_p2 <= std_logic_vector(unsigned(add_ln438_1_fu_1677_p2) + unsigned(trunc_ln414_reg_1998));
    add_ln438_3_fu_1687_p2 <= std_logic_vector(unsigned(add_ln438_2_fu_1682_p2) + unsigned(add_ln438_reg_2191));
    add_ln438_fu_1653_p2 <= std_logic_vector(unsigned(add_ln408_reg_1986) + unsigned(zext_ln438_fu_1650_p1));
    add_ln441_fu_1746_p2 <= std_logic_vector(unsigned(add_ln429_reg_2170) + unsigned(trunc_ln441_reg_2240));
    and_ln_fu_1609_p3 <= (tmp_6739_reg_2012 & ap_const_lv3_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(11);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(21);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(22);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(23);
    ap_CS_fsm_pp1_stage3 <= ap_CS_fsm(24);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(29);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(12);
    ap_CS_fsm_state15 <= ap_CS_fsm(13);
    ap_CS_fsm_state16 <= ap_CS_fsm(14);
    ap_CS_fsm_state17 <= ap_CS_fsm(15);
    ap_CS_fsm_state18 <= ap_CS_fsm(16);
    ap_CS_fsm_state19 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(18);
    ap_CS_fsm_state21 <= ap_CS_fsm(19);
    ap_CS_fsm_state22 <= ap_CS_fsm(20);
    ap_CS_fsm_state28 <= ap_CS_fsm(25);
    ap_CS_fsm_state29 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(27);
    ap_CS_fsm_state31 <= ap_CS_fsm(28);
    ap_CS_fsm_state34 <= ap_CS_fsm(30);
    ap_CS_fsm_state35 <= ap_CS_fsm(31);
    ap_CS_fsm_state36 <= ap_CS_fsm(32);
    ap_CS_fsm_state37 <= ap_CS_fsm(33);
    ap_CS_fsm_state38 <= ap_CS_fsm(34);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state15_on_subcall_done_assign_proc : process(grp_KeccakF1600_StatePer_1_fu_758_ap_done, ap_predicate_op203_call_state15)
    begin
                ap_block_state15_on_subcall_done <= ((ap_predicate_op203_call_state15 = ap_const_boolean_1) and (grp_KeccakF1600_StatePer_1_fu_758_ap_done = ap_const_logic_0));
    end process;

        ap_block_state23_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp1_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp1_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln404_fu_1090_p2)
    begin
        if ((icmp_ln404_fu_1090_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state23_assign_proc : process(icmp_ln423_fu_1450_p2)
    begin
        if ((icmp_ln423_fu_1450_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state23 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state32_assign_proc : process(icmp_ln436_fu_1662_p2)
    begin
        if ((icmp_ln436_fu_1662_p2 = ap_const_lv1_0)) then 
            ap_condition_pp2_exit_iter0_state32 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state32 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_1_phi_fu_641_p4_assign_proc : process(i_1_reg_637, icmp_ln404_reg_1922, ap_CS_fsm_pp0_stage0, i_4_reg_1926, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln404_reg_1922 = ap_const_lv1_0))) then 
            ap_phi_mux_i_1_phi_fu_641_p4 <= i_4_reg_1926;
        else 
            ap_phi_mux_i_1_phi_fu_641_p4 <= i_1_reg_637;
        end if; 
    end process;


    ap_phi_mux_i_3_phi_fu_730_p4_assign_proc : process(i_3_reg_726, icmp_ln423_reg_2091, ap_CS_fsm_pp1_stage0, add_ln423_reg_2095, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln423_reg_2091 = ap_const_lv1_0))) then 
            ap_phi_mux_i_3_phi_fu_730_p4 <= add_ln423_reg_2095;
        else 
            ap_phi_mux_i_3_phi_fu_730_p4 <= i_3_reg_726;
        end if; 
    end process;


    ap_phi_mux_i_5_phi_fu_741_p4_assign_proc : process(i_5_reg_737, icmp_ln436_reg_2226, ap_CS_fsm_pp2_stage0, i_7_reg_2230, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln436_reg_2226 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_i_5_phi_fu_741_p4 <= i_7_reg_2230;
        else 
            ap_phi_mux_i_5_phi_fu_741_p4 <= i_5_reg_737;
        end if; 
    end process;


    ap_phi_mux_p_12_phi_fu_620_p4_assign_proc : process(icmp_ln393_reg_1791, add_ln398_reg_1815, ap_CS_fsm_state8, p_12_reg_617)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln393_reg_1791 = ap_const_lv1_0))) then 
            ap_phi_mux_p_12_phi_fu_620_p4 <= add_ln398_reg_1815;
        else 
            ap_phi_mux_p_12_phi_fu_620_p4 <= p_12_reg_617;
        end if; 
    end process;


    ap_phi_mux_p_1_phi_fu_630_p4_assign_proc : process(icmp_ln393_reg_1791, add_ln397_1_reg_1810, ap_CS_fsm_state8, p_1_reg_627)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln393_reg_1791 = ap_const_lv1_0))) then 
            ap_phi_mux_p_1_phi_fu_630_p4 <= add_ln397_1_reg_1810;
        else 
            ap_phi_mux_p_1_phi_fu_630_p4 <= p_1_reg_627;
        end if; 
    end process;


    ap_phi_mux_p_2728_phi_fu_652_p6_assign_proc : process(icmp_ln403_reg_1889, trunc_ln403_reg_1898, icmp_ln403_1_reg_1903, ap_CS_fsm_state15, p_2728_reg_648)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln403_1_reg_1903 = ap_const_lv1_0) and (icmp_ln403_reg_1889 = ap_const_lv1_0))) then 
            ap_phi_mux_p_2728_phi_fu_652_p6 <= trunc_ln403_reg_1898;
        else 
            ap_phi_mux_p_2728_phi_fu_652_p6 <= p_2728_reg_648;
        end if; 
    end process;


    ap_phi_mux_p_2_phi_fu_680_p6_assign_proc : process(icmp_ln403_reg_1889, icmp_ln403_1_reg_1903, ap_CS_fsm_state15, sub_ln409_fu_1241_p2, p_2_reg_677)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln403_1_reg_1903 = ap_const_lv1_0) and (icmp_ln403_reg_1889 = ap_const_lv1_0))) then 
            ap_phi_mux_p_2_phi_fu_680_p6 <= sub_ln409_fu_1241_p2;
        else 
            ap_phi_mux_p_2_phi_fu_680_p6 <= p_2_reg_677;
        end if; 
    end process;


    ap_phi_mux_p_34_phi_fu_752_p4_assign_proc : process(icmp_ln431_reg_2177, add_ln441_fu_1746_p2, p_34_reg_749, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) and (icmp_ln431_reg_2177 = ap_const_lv1_0))) then 
            ap_phi_mux_p_34_phi_fu_752_p4 <= add_ln441_fu_1746_p2;
        else 
            ap_phi_mux_p_34_phi_fu_752_p4 <= p_34_reg_749;
        end if; 
    end process;


    ap_predicate_op203_call_state15_assign_proc : process(icmp_ln403_reg_1889, icmp_ln403_1_reg_1903)
    begin
                ap_predicate_op203_call_state15 <= ((icmp_ln403_1_reg_1903 = ap_const_lv1_0) and (icmp_ln403_reg_1889 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_p_34_phi_fu_752_p4, ap_CS_fsm_state38, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            ap_return <= ap_phi_mux_p_34_phi_fu_752_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    empty_53_fu_881_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln395_fu_875_p2),64));
    empty_54_fu_891_p2 <= "1" when (unsigned(xor_ln395_fu_866_p2) > unsigned(xor_ln395_1_fu_885_p2)) else "0";
    empty_55_fu_925_p2 <= (trunc_ln395_fu_905_p1 xor ap_const_lv32_FFFFFFFF);
    empty_56_fu_950_p1 <= p_05_rec_reg_584(14 - 1 downto 0);
    exitcond_fu_964_p2 <= "1" when (p_05_rec_reg_584 = xor_ln395_2_reg_1795) else "0";
    grp_KeccakF1600_StatePer_1_fu_758_ap_start <= grp_KeccakF1600_StatePer_1_fu_758_ap_start_reg;
    grp_fu_764_p2 <= std_logic_vector(unsigned(trunc_ln414_fu_1256_p1) + unsigned(add_ln408_reg_1986));
    i_4_fu_1095_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_1_phi_fu_641_p4) + unsigned(ap_const_lv29_1));
    i_6_fu_1297_p2 <= std_logic_vector(unsigned(i_2_reg_714) + unsigned(ap_const_lv5_1));
    i_7_fu_1667_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_5_phi_fu_741_p4) + unsigned(ap_const_lv32_1));
    i_fu_999_p2 <= std_logic_vector(unsigned(i_0_reg_595) + unsigned(ap_const_lv32_1));
    icmp_ln391_fu_847_p2 <= "1" when (phi_ln391_reg_573 = ap_const_lv3_7) else "0";
    icmp_ln393_fu_860_p2 <= "1" when (trunc_ln393_fu_853_p1 = ap_const_lv3_0) else "0";
    icmp_ln403_1_fu_1057_p2 <= "1" when (unsigned(ap_phi_mux_p_1_phi_fu_630_p4) < unsigned(zext_ln403_fu_1049_p1)) else "0";
    icmp_ln403_fu_1037_p2 <= "1" when (ap_phi_mux_p_12_phi_fu_620_p4 = ap_const_lv32_0) else "0";
    icmp_ln404_fu_1090_p2 <= "1" when (ap_phi_mux_i_1_phi_fu_641_p4 = tmp_s_reg_1912) else "0";
    icmp_ln414_fu_1261_p2 <= "1" when (unsigned(indvars_iv_reg_691) < unsigned(ap_const_lv64_88)) else "0";
    icmp_ln415_fu_1291_p2 <= "1" when (i_2_reg_714 = ap_const_lv5_11) else "0";
    icmp_ln423_fu_1450_p2 <= "1" when (ap_phi_mux_i_3_phi_fu_730_p4 = tmp_6739_reg_2012) else "0";
    icmp_ln431_fu_1644_p2 <= "1" when (indvars_iv_reg_691 = zext_ln427_fu_1620_p1) else "0";
    icmp_ln436_fu_1662_p2 <= "1" when (unsigned(zext_ln436_1_fu_1658_p1) < unsigned(trunc_ln428_reg_2165)) else "0";
    lshr_ln9_fu_1705_p4 <= add_ln429_reg_2170(31 downto 3);
    lshr_ln_fu_984_p4 <= sub_ln400_fu_979_p2(31 downto 3);

    m_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_state18, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_state19, ap_CS_fsm_pp1_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_state20, ap_CS_fsm_pp1_stage3, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state17, ap_CS_fsm_pp1_stage0, ap_block_pp0_stage0, ap_block_pp1_stage0, sum1_cast_fu_959_p1, zext_ln406_2_fu_1128_p1, ap_block_pp0_stage1, zext_ln32_20_fu_1169_p1, ap_block_pp0_stage2, zext_ln32_22_fu_1189_p1, ap_block_pp0_stage3, zext_ln32_24_fu_1209_p1, zext_ln32_32_fu_1341_p1, zext_ln32_34_fu_1367_p1, zext_ln32_36_fu_1387_p1, zext_ln32_38_fu_1407_p1, zext_ln32_25_fu_1507_p1, ap_block_pp1_stage1, zext_ln32_27_fu_1537_p1, ap_block_pp1_stage2, zext_ln32_29_fu_1557_p1, ap_block_pp1_stage3, zext_ln32_31_fu_1577_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            m_address0 <= zext_ln32_31_fu_1577_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            m_address0 <= zext_ln32_29_fu_1557_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            m_address0 <= zext_ln32_27_fu_1537_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            m_address0 <= zext_ln32_25_fu_1507_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            m_address0 <= zext_ln32_38_fu_1407_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            m_address0 <= zext_ln32_36_fu_1387_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            m_address0 <= zext_ln32_34_fu_1367_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            m_address0 <= zext_ln32_32_fu_1341_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            m_address0 <= zext_ln32_24_fu_1209_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            m_address0 <= zext_ln32_22_fu_1189_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            m_address0 <= zext_ln32_20_fu_1169_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            m_address0 <= zext_ln406_2_fu_1128_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            m_address0 <= sum1_cast_fu_959_p1(13 - 1 downto 0);
        else 
            m_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    m_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_state18, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_state19, ap_CS_fsm_pp1_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_state20, ap_CS_fsm_pp1_stage3, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state17, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0, zext_ln32_fu_1139_p1, zext_ln32_19_fu_1159_p1, ap_block_pp0_stage1, zext_ln32_21_fu_1179_p1, ap_block_pp0_stage2, zext_ln32_23_fu_1199_p1, ap_block_pp0_stage3, zext_ln416_3_fu_1330_p1, zext_ln32_33_fu_1357_p1, zext_ln32_35_fu_1377_p1, zext_ln32_37_fu_1397_p1, zext_ln425_4_fu_1496_p1, zext_ln32_26_fu_1527_p1, ap_block_pp1_stage1, zext_ln32_28_fu_1547_p1, ap_block_pp1_stage2, zext_ln32_30_fu_1567_p1, ap_block_pp1_stage3, zext_ln438_1_fu_1692_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            m_address1 <= zext_ln438_1_fu_1692_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            m_address1 <= zext_ln32_30_fu_1567_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            m_address1 <= zext_ln32_28_fu_1547_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            m_address1 <= zext_ln32_26_fu_1527_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            m_address1 <= zext_ln425_4_fu_1496_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            m_address1 <= zext_ln32_37_fu_1397_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            m_address1 <= zext_ln32_35_fu_1377_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            m_address1 <= zext_ln32_33_fu_1357_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            m_address1 <= zext_ln416_3_fu_1330_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            m_address1 <= zext_ln32_23_fu_1199_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            m_address1 <= zext_ln32_21_fu_1179_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            m_address1 <= zext_ln32_19_fu_1159_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            m_address1 <= zext_ln32_fu_1139_p1(13 - 1 downto 0);
        else 
            m_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    m_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_state18, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_state19, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_state20, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_11001, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state17, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            m_ce0 <= ap_const_logic_1;
        else 
            m_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    m_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_state18, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_state19, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_state20, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state17, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            m_ce1 <= ap_const_logic_1;
        else 
            m_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    m_offset_cast68_fu_947_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_offset),14));
    pos_cast1_fu_832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pos_r),32));
    r_7_i1_fu_1214_p9 <= (((((((m_q0 & m_q1) & reg_824) & reg_820) & reg_812) & reg_808) & reg_803) & reg_798);
    r_7_i2_fu_1582_p9 <= (((((((m_q0 & m_q1) & reg_824) & reg_820) & reg_812) & reg_808) & reg_803) & reg_798);
    r_7_i3_fu_1719_p9 <= (((((((t_q0 & t_q1) & reg_793) & reg_788) & reg_783) & reg_778) & reg_773) & reg_768);
    r_7_i4_fu_1417_p9 <= (((((((m_q0 & m_q1) & reg_824) & reg_820) & reg_812) & reg_808) & reg_803) & reg_798);
    r_7_i_fu_1010_p9 <= (((((((t_q1 & t_q0) & reg_793) & reg_788) & reg_783) & reg_778) & reg_773) & reg_768);

    s_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state37, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_CS_fsm_state20, s_addr_reg_1849, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, s_addr_1_reg_1951, ap_CS_fsm_state15, ap_predicate_op203_call_state15, s_addr_3_reg_2081, ap_CS_fsm_state22, ap_CS_fsm_pp1_stage0, s_addr_2_reg_2120, s_addr_4_reg_2245, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, grp_KeccakF1600_StatePer_1_fu_758_state_address0, ap_block_pp0_stage0, ap_CS_fsm_state21, ap_block_pp1_stage0, ap_CS_fsm_state38, ap_block_pp0_stage1, zext_ln416_1_fu_1412_p1, ap_block_pp1_stage1, zext_ln440_fu_1714_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            s_address0 <= s_addr_4_reg_2245;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            s_address0 <= zext_ln440_fu_1714_p1(5 - 1 downto 0);
        elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
            s_address0 <= s_addr_2_reg_2120;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            s_address0 <= s_addr_3_reg_2081;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            s_address0 <= zext_ln416_1_fu_1412_p1(5 - 1 downto 0);
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            s_address0 <= s_addr_1_reg_1951;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            s_address0 <= s_addr_reg_1849;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_predicate_op203_call_state15 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            s_address0 <= grp_KeccakF1600_StatePer_1_fu_758_state_address0;
        else 
            s_address0 <= "XXXXX";
        end if; 
    end process;

    s_address1 <= grp_KeccakF1600_StatePer_1_fu_758_state_address1;

    s_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state37, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1_11001, ap_CS_fsm_state20, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state15, ap_predicate_op203_call_state15, ap_CS_fsm_state22, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, grp_KeccakF1600_StatePer_1_fu_758_state_ce0, ap_CS_fsm_state21, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            s_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_predicate_op203_call_state15 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            s_ce0 <= grp_KeccakF1600_StatePer_1_fu_758_state_ce0;
        else 
            s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_ce1_assign_proc : process(ap_CS_fsm_state15, ap_predicate_op203_call_state15, ap_CS_fsm_state22, grp_KeccakF1600_StatePer_1_fu_758_state_ce1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_predicate_op203_call_state15 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            s_ce1 <= grp_KeccakF1600_StatePer_1_fu_758_state_ce1;
        else 
            s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_d0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state15, ap_predicate_op203_call_state15, ap_CS_fsm_state22, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, grp_KeccakF1600_StatePer_1_fu_758_state_d0, ap_block_pp0_stage0, ap_CS_fsm_state21, ap_block_pp1_stage0, ap_CS_fsm_state38, xor_ln400_fu_1030_p2, xor_ln406_fu_1234_p2, xor_ln416_fu_1437_p2, xor_ln425_fu_1602_p2, xor_ln440_fu_1739_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            s_d0 <= xor_ln440_fu_1739_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            s_d0 <= xor_ln425_fu_1602_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            s_d0 <= xor_ln416_fu_1437_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_d0 <= xor_ln406_fu_1234_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            s_d0 <= xor_ln400_fu_1030_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_predicate_op203_call_state15 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            s_d0 <= grp_KeccakF1600_StatePer_1_fu_758_state_d0;
        else 
            s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    s_d1 <= grp_KeccakF1600_StatePer_1_fu_758_state_d1;

    s_we0_assign_proc : process(icmp_ln404_reg_1922, icmp_ln423_reg_2091, icmp_ln393_reg_1791, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state15, ap_predicate_op203_call_state15, ap_CS_fsm_state22, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln431_reg_2177, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, grp_KeccakF1600_StatePer_1_fu_758_state_we0, ap_CS_fsm_state21, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_logic_1 = ap_CS_fsm_state38) and (icmp_ln431_reg_2177 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln393_reg_1791 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln423_reg_2091 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln404_reg_1922 = ap_const_lv1_0)))) then 
            s_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_predicate_op203_call_state15 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            s_we0 <= grp_KeccakF1600_StatePer_1_fu_758_state_we0;
        else 
            s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s_we1_assign_proc : process(ap_CS_fsm_state15, ap_predicate_op203_call_state15, ap_CS_fsm_state22, grp_KeccakF1600_StatePer_1_fu_758_state_we1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_predicate_op203_call_state15 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            s_we1 <= grp_KeccakF1600_StatePer_1_fu_758_state_we1;
        else 
            s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln6_fu_1469_p3 <= (trunc_ln425_fu_1465_p1 & ap_const_lv3_0);
    shl_ln7_fu_1303_p3 <= (i_2_reg_714 & ap_const_lv3_0);
    shl_ln_fu_1109_p3 <= (trunc_ln406_fu_1105_p1 & ap_const_lv3_0);
    sub_ln395_fu_875_p2 <= std_logic_vector(signed(ap_const_lv4_8) - signed(zext_ln395_fu_871_p1));
    sub_ln400_fu_979_p2 <= std_logic_vector(unsigned(add_ln398_reg_1815) - unsigned(add_ln394_fu_975_p2));
    sub_ln403_fu_1043_p2 <= std_logic_vector(unsigned(ap_const_lv32_88) - unsigned(ap_phi_mux_p_12_phi_fu_620_p4));
    sub_ln409_fu_1241_p2 <= std_logic_vector(unsigned(p_1_reg_627) - unsigned(zext_ln403_reg_1893));
    sub_ln428_fu_1628_p2 <= std_logic_vector(unsigned(indvars_iv_reg_691) - unsigned(zext_ln427_fu_1620_p1));
    sum1_cast_fu_959_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_fu_954_p2),64));
    sum1_fu_954_p2 <= std_logic_vector(unsigned(empty_56_fu_950_p1) + unsigned(m_offset_cast68_reg_1821));
    t_addr_10_gep_fu_484_p3 <= ap_const_lv64_0(3 - 1 downto 0);
    t_addr_11_gep_fu_492_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    t_addr_12_gep_fu_501_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    t_addr_13_gep_fu_509_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    t_addr_14_gep_fu_517_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    t_addr_15_gep_fu_525_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    t_addr_16_gep_fu_533_p3 <= ap_const_lv64_6(3 - 1 downto 0);
    t_addr_17_gep_fu_541_p3 <= ap_const_lv64_7(3 - 1 downto 0);

    t_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state35, ap_CS_fsm_state6, ap_CS_fsm_state36, ap_CS_fsm_state7, ap_CS_fsm_state37, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state28, t_addr_10_gep_fu_484_p3, t_addr_12_gep_fu_501_p3, ap_CS_fsm_state29, t_addr_14_gep_fu_517_p3, ap_CS_fsm_state30, t_addr_16_gep_fu_533_p3, ap_CS_fsm_state31, ap_CS_fsm_pp2_stage0, ap_CS_fsm_state34, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, zext_ln391_fu_842_p1, zext_ln436_fu_1697_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            t_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            t_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            t_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            t_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            t_address0 <= zext_ln436_fu_1697_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            t_address0 <= t_addr_16_gep_fu_533_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            t_address0 <= t_addr_14_gep_fu_517_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            t_address0 <= t_addr_12_gep_fu_501_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            t_address0 <= t_addr_10_gep_fu_484_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            t_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            t_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            t_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            t_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_address0 <= zext_ln391_fu_842_p1(3 - 1 downto 0);
        else 
            t_address0 <= "XXX";
        end if; 
    end process;


    t_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state35, ap_CS_fsm_state6, ap_CS_fsm_state36, ap_CS_fsm_state7, ap_CS_fsm_state37, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state28, t_addr_11_gep_fu_492_p3, ap_CS_fsm_state29, t_addr_13_gep_fu_509_p3, ap_CS_fsm_state30, t_addr_15_gep_fu_525_p3, ap_CS_fsm_state31, t_addr_17_gep_fu_541_p3, ap_CS_fsm_state34, zext_ln396_fu_1005_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            t_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            t_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            t_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            t_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            t_address1 <= t_addr_17_gep_fu_541_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            t_address1 <= t_addr_15_gep_fu_525_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            t_address1 <= t_addr_13_gep_fu_509_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            t_address1 <= t_addr_11_gep_fu_492_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            t_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            t_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            t_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_address1 <= zext_ln396_fu_1005_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            t_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            t_address1 <= "XXX";
        end if; 
    end process;


    t_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state35, ap_CS_fsm_state6, ap_CS_fsm_state36, ap_CS_fsm_state7, ap_CS_fsm_state37, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_state34, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            t_ce0 <= ap_const_logic_1;
        else 
            t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state35, ap_CS_fsm_state6, ap_CS_fsm_state36, ap_CS_fsm_state7, ap_CS_fsm_state37, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            t_ce1 <= ap_const_logic_1;
        else 
            t_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    t_d0_assign_proc : process(m_q1, ap_CS_fsm_state2, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            t_d0 <= m_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            t_d0 <= ap_const_lv8_0;
        else 
            t_d0 <= "XXXXXXXX";
        end if; 
    end process;


    t_d1_assign_proc : process(m_q0, ap_CS_fsm_state4, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            t_d1 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_d1 <= m_q0;
        else 
            t_d1 <= "XXXXXXXX";
        end if; 
    end process;


    t_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state28, icmp_ln431_fu_1644_p2, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, icmp_ln436_reg_2226, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln436_reg_2226 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln431_fu_1644_p2 = ap_const_lv1_0)))) then 
            t_we0 <= ap_const_logic_1;
        else 
            t_we0 <= ap_const_logic_0;
        end if; 
    end process;


    t_we1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state28, icmp_ln431_fu_1644_p2, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln431_fu_1644_p2 = ap_const_lv1_0)))) then 
            t_we1 <= ap_const_logic_1;
        else 
            t_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_6738_fu_1267_p4 <= p_23_reg_662(31 downto 3);
    tmp_fu_1063_p4 <= ap_phi_mux_p_12_phi_fu_620_p4(31 downto 3);
    trunc_ln393_fu_853_p1 <= pos_r(3 - 1 downto 0);
    trunc_ln395_2_fu_909_p1 <= umax_fu_897_p3(14 - 1 downto 0);
    trunc_ln395_fu_905_p1 <= umax_fu_897_p3(32 - 1 downto 0);
    trunc_ln403_fu_1053_p1 <= sub_ln403_fu_1043_p2(14 - 1 downto 0);
    trunc_ln406_fu_1105_p1 <= ap_phi_mux_i_1_phi_fu_641_p4(11 - 1 downto 0);
    trunc_ln414_fu_1256_p1 <= p_38_rec_reg_702(14 - 1 downto 0);
    trunc_ln416_fu_1253_p1 <= m_offset(12 - 1 downto 0);
    trunc_ln425_fu_1465_p1 <= ap_phi_mux_i_3_phi_fu_730_p4(4 - 1 downto 0);
    trunc_ln428_fu_1634_p1 <= sub_ln428_fu_1628_p2(33 - 1 downto 0);
    trunc_ln436_fu_1673_p1 <= ap_phi_mux_i_5_phi_fu_741_p4(14 - 1 downto 0);
    trunc_ln441_fu_1702_p1 <= sub_ln428_reg_2160(32 - 1 downto 0);
    umax_fu_897_p3 <= 
        xor_ln395_fu_866_p2 when (empty_54_fu_891_p2(0) = '1') else 
        xor_ln395_1_fu_885_p2;
    xor_ln395_1_fu_885_p2 <= (empty_53_fu_881_p1 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln395_2_cast_fu_919_p2 <= (trunc_ln395_2_fu_909_p1 xor ap_const_lv14_3FFF);
    xor_ln395_2_fu_913_p2 <= (umax_fu_897_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln395_fu_866_p2 <= (mlen xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln400_fu_1030_p2 <= (s_q0 xor r_7_i_fu_1010_p9);
    xor_ln406_fu_1234_p2 <= (reg_816 xor r_7_i1_fu_1214_p9);
    xor_ln416_fu_1437_p2 <= (s_q0 xor r_7_i4_fu_1417_p9);
    xor_ln425_fu_1602_p2 <= (reg_816 xor r_7_i2_fu_1582_p9);
    xor_ln440_fu_1739_p2 <= (s_q0 xor r_7_i3_fu_1719_p9);
    zext_ln32_19_fu_1159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_13_fu_1154_p2),64));
    zext_ln32_20_fu_1169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_14_fu_1164_p2),64));
    zext_ln32_21_fu_1179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_15_fu_1174_p2),64));
    zext_ln32_22_fu_1189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_16_fu_1184_p2),64));
    zext_ln32_23_fu_1199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_17_fu_1194_p2),64));
    zext_ln32_24_fu_1209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_18_fu_1204_p2),64));
    zext_ln32_25_fu_1507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_19_fu_1501_p2),64));
    zext_ln32_26_fu_1527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_20_fu_1522_p2),64));
    zext_ln32_27_fu_1537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_21_fu_1532_p2),64));
    zext_ln32_28_fu_1547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_22_fu_1542_p2),64));
    zext_ln32_29_fu_1557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_23_fu_1552_p2),64));
    zext_ln32_30_fu_1567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_24_fu_1562_p2),64));
    zext_ln32_31_fu_1577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_25_fu_1572_p2),64));
    zext_ln32_32_fu_1341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_26_fu_1335_p2),64));
    zext_ln32_33_fu_1357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_27_fu_1352_p2),64));
    zext_ln32_34_fu_1367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_28_fu_1362_p2),64));
    zext_ln32_35_fu_1377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_29_fu_1372_p2),64));
    zext_ln32_36_fu_1387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_30_fu_1382_p2),64));
    zext_ln32_37_fu_1397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_31_fu_1392_p2),64));
    zext_ln32_38_fu_1407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_32_fu_1402_p2),64));
    zext_ln32_fu_1139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_fu_1133_p2),64));
    zext_ln391_fu_842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln391_reg_573),64));
    zext_ln393_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln393_fu_853_p1),32));
    zext_ln395_fu_871_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln393_fu_853_p1),4));
    zext_ln396_fu_1005_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_595),64));
    zext_ln400_fu_994_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_984_p4),64));
    zext_ln403_fu_1049_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln403_fu_1043_p2),64));
    zext_ln404_1_fu_1073_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_1063_p4),30));
    zext_ln404_fu_1101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_1_phi_fu_641_p4),30));
    zext_ln406_1_fu_1149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln406_fu_1144_p2),64));
    zext_ln406_2_fu_1128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln406_2_fu_1122_p2),64));
    zext_ln406_fu_1087_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_offset),14));
    zext_ln416_1_fu_1412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_714),64));
    zext_ln416_2_fu_1320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln416_1_fu_1315_p2),14));
    zext_ln416_3_fu_1330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln416_2_fu_1324_p2),64));
    zext_ln416_fu_1311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln7_fu_1303_p3),12));
    zext_ln423_1_fu_1277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6738_fu_1267_p4),30));
    zext_ln423_fu_1461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_3_phi_fu_730_p4),30));
    zext_ln425_1_fu_1517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln425_1_fu_1512_p2),64));
    zext_ln425_3_fu_1486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln425_2_fu_1481_p2),14));
    zext_ln425_4_fu_1496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln425_3_fu_1490_p2),64));
    zext_ln425_fu_1477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln6_fu_1469_p3),12));
    zext_ln427_1_fu_1616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_1609_p3),32));
    zext_ln427_fu_1620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_1609_p3),64));
    zext_ln428_fu_1624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_1609_p3),14));
    zext_ln436_1_fu_1658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_5_phi_fu_741_p4),33));
    zext_ln436_fu_1697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_737),64));
    zext_ln438_1_fu_1692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln438_3_fu_1687_p2),64));
    zext_ln438_fu_1650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_offset),14));
    zext_ln440_fu_1714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln9_fu_1705_p4),64));
end behav;
