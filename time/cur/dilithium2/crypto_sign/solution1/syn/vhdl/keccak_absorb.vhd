-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity keccak_absorb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce0 : OUT STD_LOGIC;
    s_we0 : OUT STD_LOGIC;
    s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce1 : OUT STD_LOGIC;
    s_we1 : OUT STD_LOGIC;
    s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    r : IN STD_LOGIC_VECTOR (8 downto 0);
    pos_r : IN STD_LOGIC_VECTOR (6 downto 0);
    m_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    m_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of keccak_absorb is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_518 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal t_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal reg_523 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_528 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal reg_533 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_538 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal reg_543 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_548_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_reg_1153 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_93_fu_552_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_93_reg_1159 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln389_fu_556_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln391_fu_576_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln389_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln391_1_fu_580_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln391_1_reg_1177 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln393_2_fu_624_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln393_2_reg_1185 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln391_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln393_fu_630_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln393_reg_1190 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast6_fu_634_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_cast6_reg_1195 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln395_fu_646_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln395_reg_1200 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln396_fu_652_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln396_reg_1205 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln394_fu_666_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_fu_679_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1234 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln399_fu_713_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln399_reg_1239 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_addr_reg_1274 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln401_fu_751_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln401_reg_1279 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln401_fu_759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln401_reg_1286 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln401_1_fu_770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln401_1_reg_1290 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln406_fu_776_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln406_reg_1294 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln409_fu_780_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln409_reg_1299 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln405_fu_789_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln405_reg_1304 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_KeccakF1600_StatePer_1_fu_512_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_512_ap_done : STD_LOGIC;
    signal ap_predicate_op122_call_state9 : BOOLEAN;
    signal ap_block_state9_on_subcall_done : BOOLEAN;
    signal sext_ln405_fu_793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_99_fu_797_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_99_reg_1314 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_1321 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln414_1_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln414_1_reg_1326 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_2_fu_829_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln32_2_reg_1336 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln411_fu_815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_3_fu_835_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln32_3_reg_1344 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln420_2_fu_851_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln420_2_reg_1352 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_3266_reg_1357 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln421_fu_865_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln421_reg_1363 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_fu_874_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln32_reg_1368 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln32_1_fu_880_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln32_1_reg_1376 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_36_fu_891_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_36_reg_1387 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal s_addr_6_reg_1392 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln413_fu_886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln415_fu_902_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln415_reg_1397 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln418_fu_907_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln418_reg_1402 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln420_fu_940_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln420_reg_1410 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal s_addr_5_reg_1415 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln420_fu_935_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln423_fu_971_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln423_reg_1420 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln423_fu_977_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln423_reg_1425 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln424_fu_981_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln424_reg_1430 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln424_fu_986_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln424_reg_1435 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln426_fu_990_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln426_reg_1441 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_37_fu_1021_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal i_38_fu_1046_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal icmp_ln429_fu_1041_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_addr_7_reg_1471 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln432_fu_1087_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln432_reg_1476 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_ce0 : STD_LOGIC;
    signal t_we0 : STD_LOGIC;
    signal t_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_ce1 : STD_LOGIC;
    signal t_we1 : STD_LOGIC;
    signal t_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_512_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_512_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_512_state_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_512_state_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_512_state_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_512_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_512_state_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_512_state_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_512_state_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_512_state_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_ln389_reg_333 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_05_rec_reg_344 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_reg_355 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln405_reg_364 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal p_12_reg_376 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_1_reg_386 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_phi_ln405_1_phi_fu_401_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln405_1_reg_397 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_p_23_phi_fu_414_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_23_reg_411 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln406_fu_784_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_p_2_phi_fu_429_p6 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_2_reg_426 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvars_iv_reg_437 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal p_38_rec_reg_447 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_reg_459 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_3_reg_470 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i_4_reg_481 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln427_fu_1015_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_reg_492 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln432_fu_1117_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_p_34_phi_fu_506_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_34_reg_503 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_KeccakF1600_StatePer_1_fu_512_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln389_fu_562_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln394_fu_685_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln398_fu_716_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln414_1_fu_897_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln421_1_fu_951_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln428_fu_1027_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln429_fu_1032_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln431_fu_1082_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln394_fu_672_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln430_fu_1066_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln398_fu_740_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln414_fu_924_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln421_fu_1008_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln431_fu_1110_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln391_fu_573_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln393_fu_590_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln393_fu_594_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_96_fu_600_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_97_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln393_1_fu_604_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal umax_fu_616_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln395_fu_642_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln395_fu_638_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_98_fu_657_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln392_fu_690_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln398_fu_694_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln398_fu_698_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_7_i_fu_720_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln401_1_fu_747_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln401_2_fu_755_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln401_fu_765_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln414_fu_820_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln32_1_fu_824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_496_fu_841_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln32_fu_869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_7_i6_fu_912_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln420_fu_931_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln421_1_fu_946_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal and_ln_fu_956_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln422_fu_967_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln422_2_fu_963_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_7_i7_fu_996_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln429_2_fu_1037_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln430_fu_1052_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln430_fu_1056_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln430_1_fu_1061_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_497_fu_1073_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_7_i5_fu_1090_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);

    component KeccakF1600_StatePer_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keccak_absorb_2_t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    t_U : component keccak_absorb_2_t
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t_address0,
        ce0 => t_ce0,
        we0 => t_we0,
        d0 => t_d0,
        q0 => t_q0,
        address1 => t_address1,
        ce1 => t_ce1,
        we1 => t_we1,
        d1 => t_d1,
        q1 => t_q1);

    grp_KeccakF1600_StatePer_1_fu_512 : component KeccakF1600_StatePer_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePer_1_fu_512_ap_start,
        ap_done => grp_KeccakF1600_StatePer_1_fu_512_ap_done,
        ap_idle => grp_KeccakF1600_StatePer_1_fu_512_ap_idle,
        ap_ready => grp_KeccakF1600_StatePer_1_fu_512_ap_ready,
        state_address0 => grp_KeccakF1600_StatePer_1_fu_512_state_address0,
        state_ce0 => grp_KeccakF1600_StatePer_1_fu_512_state_ce0,
        state_we0 => grp_KeccakF1600_StatePer_1_fu_512_state_we0,
        state_d0 => grp_KeccakF1600_StatePer_1_fu_512_state_d0,
        state_q0 => s_q0,
        state_address1 => grp_KeccakF1600_StatePer_1_fu_512_state_address1,
        state_ce1 => grp_KeccakF1600_StatePer_1_fu_512_state_ce1,
        state_we1 => grp_KeccakF1600_StatePer_1_fu_512_state_we1,
        state_d1 => grp_KeccakF1600_StatePer_1_fu_512_state_d1,
        state_q1 => s_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                    ap_return_preg <= ap_phi_mux_p_34_phi_fu_506_p4;
                end if; 
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_1_fu_512_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_1_fu_512_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln413_fu_886_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln401_1_fu_770_p2 = ap_const_lv1_0) and (icmp_ln401_fu_759_p2 = ap_const_lv1_0)))) then 
                    grp_KeccakF1600_StatePer_1_fu_512_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_1_fu_512_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_1_fu_512_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_355_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_661_p2 = ap_const_lv1_0))) then 
                i_0_reg_355 <= i_fu_679_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln391_fu_584_p2 = ap_const_lv1_0) and (icmp_ln389_fu_567_p2 = ap_const_lv1_1))) then 
                i_0_reg_355 <= zext_ln391_fu_576_p1;
            end if; 
        end if;
    end process;

    i_2_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln411_fu_815_p2 = ap_const_lv1_0))) then 
                i_2_reg_459 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_2_reg_459 <= i_36_reg_1387;
            end if; 
        end if;
    end process;

    i_3_reg_470_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_3_reg_470 <= add_ln420_reg_1410;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln411_fu_815_p2 = ap_const_lv1_1))) then 
                i_3_reg_470 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_4_reg_481_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln426_fu_990_p2 = ap_const_lv1_0) and (icmp_ln420_fu_935_p2 = ap_const_lv1_1))) then 
                i_4_reg_481 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln427_fu_1015_p2 = ap_const_lv1_0))) then 
                i_4_reg_481 <= i_37_fu_1021_p2;
            end if; 
        end if;
    end process;

    i_5_reg_492_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln427_fu_1015_p2 = ap_const_lv1_1))) then 
                i_5_reg_492 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln429_fu_1041_p2 = ap_const_lv1_1))) then 
                i_5_reg_492 <= i_38_fu_1046_p2;
            end if; 
        end if;
    end process;

    indvars_iv_reg_437_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                indvars_iv_reg_437 <= sext_ln405_fu_793_p1;
            elsif (((grp_KeccakF1600_StatePer_1_fu_512_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                indvars_iv_reg_437 <= sub_ln418_reg_1402;
            end if; 
        end if;
    end process;

    p_05_rec_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_661_p2 = ap_const_lv1_0))) then 
                p_05_rec_reg_344 <= add_ln394_fu_666_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln391_fu_584_p2 = ap_const_lv1_0) and (icmp_ln389_fu_567_p2 = ap_const_lv1_1))) then 
                p_05_rec_reg_344 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    p_12_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln391_fu_584_p2 = ap_const_lv1_1) and (icmp_ln389_fu_567_p2 = ap_const_lv1_1))) then 
                p_12_reg_376 <= empty_reg_1153;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                p_12_reg_376 <= add_ln396_reg_1205;
            end if; 
        end if;
    end process;

    p_1_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln391_fu_584_p2 = ap_const_lv1_1) and (icmp_ln389_fu_567_p2 = ap_const_lv1_1))) then 
                p_1_reg_386 <= ap_const_lv2_2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                p_1_reg_386 <= add_ln395_reg_1200;
            end if; 
        end if;
    end process;

    p_23_reg_411_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln401_fu_759_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln401_fu_759_p2 = ap_const_lv1_0) and (icmp_ln401_1_fu_770_p2 = ap_const_lv1_1)))) then 
                p_23_reg_411 <= p_12_reg_376;
            elsif (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln401_1_reg_1290 = ap_const_lv1_0) and (icmp_ln401_reg_1286 = ap_const_lv1_0))) then 
                p_23_reg_411 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    p_2_reg_426_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln401_fu_759_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln401_fu_759_p2 = ap_const_lv1_0) and (icmp_ln401_1_fu_770_p2 = ap_const_lv1_1)))) then 
                p_2_reg_426 <= zext_ln401_fu_751_p1;
            elsif (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln401_1_reg_1290 = ap_const_lv1_0) and (icmp_ln401_reg_1286 = ap_const_lv1_0))) then 
                p_2_reg_426 <= sub_ln406_fu_784_p2;
            end if; 
        end if;
    end process;

    p_34_reg_503_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln426_fu_990_p2 = ap_const_lv1_1) and (icmp_ln420_fu_935_p2 = ap_const_lv1_1))) then 
                p_34_reg_503 <= zext_ln424_fu_986_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln426_reg_1441 = ap_const_lv1_0))) then 
                p_34_reg_503 <= add_ln432_fu_1117_p2;
            end if; 
        end if;
    end process;

    p_38_rec_reg_447_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                p_38_rec_reg_447 <= ap_const_lv64_0;
            elsif (((grp_KeccakF1600_StatePer_1_fu_512_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                p_38_rec_reg_447 <= add_ln415_reg_1397;
            end if; 
        end if;
    end process;

    phi_ln389_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln389_fu_567_p2 = ap_const_lv1_0))) then 
                phi_ln389_reg_333 <= add_ln389_fu_556_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln389_reg_333 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    phi_ln405_1_reg_397_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln401_fu_759_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln401_fu_759_p2 = ap_const_lv1_0) and (icmp_ln401_1_fu_770_p2 = ap_const_lv1_1)))) then 
                phi_ln405_1_reg_397 <= ap_const_lv1_0;
            elsif (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln401_1_reg_1290 = ap_const_lv1_0) and (icmp_ln401_reg_1286 = ap_const_lv1_0))) then 
                phi_ln405_1_reg_397 <= trunc_ln409_reg_1299;
            end if; 
        end if;
    end process;

    phi_ln405_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln391_fu_584_p2 = ap_const_lv1_1) and (icmp_ln389_fu_567_p2 = ap_const_lv1_1))) then 
                phi_ln405_reg_364 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                phi_ln405_reg_364 <= trunc_ln399_reg_1239;
            end if; 
        end if;
    end process;

    reg_518_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                reg_518 <= t_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                reg_518 <= t_q0;
            end if; 
        end if;
    end process;

    reg_523_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                reg_523 <= t_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                reg_523 <= t_q1;
            end if; 
        end if;
    end process;

    reg_528_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                reg_528 <= t_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                reg_528 <= t_q1;
            end if; 
        end if;
    end process;

    reg_533_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                reg_533 <= t_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                reg_533 <= t_q0;
            end if; 
        end if;
    end process;

    reg_538_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                reg_538 <= t_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                reg_538 <= t_q1;
            end if; 
        end if;
    end process;

    reg_543_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                reg_543 <= t_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                reg_543 <= t_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln391_fu_584_p2 = ap_const_lv1_0) and (icmp_ln389_fu_567_p2 = ap_const_lv1_1))) then
                add_ln395_reg_1200 <= add_ln395_fu_646_p2;
                add_ln396_reg_1205 <= add_ln396_fu_652_p2;
                p_cast6_reg_1195 <= p_cast6_fu_634_p1;
                sext_ln393_reg_1190 <= sext_ln393_fu_630_p1;
                xor_ln393_2_reg_1185 <= xor_ln393_2_fu_624_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln413_fu_886_p2 = ap_const_lv1_1))) then
                add_ln415_reg_1397 <= add_ln415_fu_902_p2;
                sub_ln418_reg_1402 <= sub_ln418_fu_907_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln420_reg_1410 <= add_ln420_fu_940_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln420_fu_935_p2 = ap_const_lv1_1))) then
                add_ln424_reg_1430 <= add_ln424_fu_981_p2;
                icmp_ln426_reg_1441 <= icmp_ln426_fu_990_p2;
                sub_ln423_reg_1420 <= sub_ln423_fu_971_p2;
                trunc_ln423_reg_1425 <= trunc_ln423_fu_977_p1;
                    zext_ln424_reg_1435(8 downto 0) <= zext_ln424_fu_986_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_93_reg_1159 <= empty_93_fu_552_p1;
                empty_reg_1153 <= empty_fu_548_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    empty_99_reg_1314(8 downto 0) <= empty_99_fu_797_p1(8 downto 0);
                tmp_s_reg_1321 <= r(7 downto 3);
                xor_ln414_1_reg_1326 <= xor_ln414_1_fu_809_p2;
                    zext_ln405_reg_1304(5 downto 0) <= zext_ln405_fu_789_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_36_reg_1387 <= i_36_fu_891_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln401_fu_759_p2 = ap_const_lv1_0))) then
                icmp_ln401_1_reg_1290 <= icmp_ln401_1_fu_770_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                icmp_ln401_reg_1286 <= icmp_ln401_fu_759_p2;
                    zext_ln401_reg_1279(1 downto 0) <= zext_ln401_fu_751_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln420_fu_935_p2 = ap_const_lv1_0))) then
                s_addr_5_reg_1415 <= zext_ln421_1_fu_951_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln413_fu_886_p2 = ap_const_lv1_0))) then
                s_addr_6_reg_1392 <= zext_ln414_1_fu_897_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln429_fu_1041_p2 = ap_const_lv1_0))) then
                s_addr_7_reg_1471 <= zext_ln431_fu_1082_p1(5 - 1 downto 0);
                trunc_ln432_reg_1476 <= trunc_ln432_fu_1087_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    s_addr_reg_1274(2 downto 0) <= zext_ln398_fu_716_p1(5 - 1 downto 0)(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln411_fu_815_p2 = ap_const_lv1_1))) then
                select_ln32_1_reg_1376 <= select_ln32_1_fu_880_p3;
                select_ln32_reg_1368 <= select_ln32_fu_874_p3;
                tmp_3266_reg_1357 <= indvars_iv_reg_437(7 downto 3);
                trunc_ln421_reg_1363 <= trunc_ln421_fu_865_p1;
                    zext_ln420_2_reg_1352(2 downto 0) <= zext_ln420_2_fu_851_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln411_fu_815_p2 = ap_const_lv1_0))) then
                select_ln32_2_reg_1336 <= select_ln32_2_fu_829_p3;
                select_ln32_3_reg_1344 <= select_ln32_3_fu_835_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_661_p2 = ap_const_lv1_1))) then
                tmp_reg_1234 <= sub_ln398_fu_698_p2(5 downto 3);
                trunc_ln399_reg_1239 <= trunc_ln399_fu_713_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln401_1_fu_770_p2 = ap_const_lv1_0) and (icmp_ln401_fu_759_p2 = ap_const_lv1_0))) then
                trunc_ln406_reg_1294 <= trunc_ln406_fu_776_p1;
                trunc_ln409_reg_1299 <= trunc_ln409_fu_780_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln389_fu_567_p2 = ap_const_lv1_1))) then
                    zext_ln391_1_reg_1177(2 downto 0) <= zext_ln391_1_fu_580_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln391_1_reg_1177(4 downto 3) <= "00";
    s_addr_reg_1274(4 downto 3) <= "00";
    zext_ln401_reg_1279(2) <= '0';
    zext_ln405_reg_1304(8 downto 6) <= "000";
    empty_99_reg_1314(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln420_2_reg_1352(29 downto 3) <= "000000000000000000000000000";
    zext_ln424_reg_1435(31 downto 9) <= "00000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln389_fu_567_p2, icmp_ln391_fu_584_p2, ap_CS_fsm_state3, exitcond_fu_661_p2, ap_CS_fsm_state9, grp_KeccakF1600_StatePer_1_fu_512_ap_done, ap_block_state9_on_subcall_done, ap_CS_fsm_state10, icmp_ln411_fu_815_p2, ap_CS_fsm_state11, icmp_ln413_fu_886_p2, ap_CS_fsm_state14, icmp_ln420_fu_935_p2, icmp_ln426_fu_990_p2, ap_CS_fsm_state16, ap_CS_fsm_state17, icmp_ln429_fu_1041_p2, ap_CS_fsm_state13, icmp_ln427_fu_1015_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln391_fu_584_p2 = ap_const_lv1_0) and (icmp_ln389_fu_567_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln391_fu_584_p2 = ap_const_lv1_1) and (icmp_ln389_fu_567_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_661_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln411_fu_815_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln413_fu_886_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state13 => 
                if (((grp_KeccakF1600_StatePer_1_fu_512_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln426_fu_990_p2 = ap_const_lv1_0) and (icmp_ln420_fu_935_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln426_fu_990_p2 = ap_const_lv1_1) and (icmp_ln420_fu_935_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln427_fu_1015_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln429_fu_1041_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln389_fu_556_p2 <= std_logic_vector(unsigned(phi_ln389_reg_333) + unsigned(ap_const_lv3_1));
    add_ln392_fu_690_p2 <= std_logic_vector(unsigned(zext_ln391_1_reg_1177) + unsigned(p_cast6_reg_1195));
    add_ln394_fu_666_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(p_05_rec_reg_344));
    add_ln395_fu_646_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(trunc_ln395_fu_642_p1));
    add_ln396_fu_652_p2 <= std_logic_vector(signed(sext_ln395_fu_638_p1) + signed(empty_reg_1153));
    add_ln415_fu_902_p2 <= std_logic_vector(unsigned(empty_99_reg_1314) + unsigned(p_38_rec_reg_447));
    add_ln420_fu_940_p2 <= std_logic_vector(unsigned(i_3_reg_470) + unsigned(ap_const_lv5_1));
    add_ln421_1_fu_946_p2 <= std_logic_vector(unsigned(zext_ln420_2_reg_1352) + unsigned(zext_ln420_fu_931_p1));
    add_ln424_fu_981_p2 <= std_logic_vector(unsigned(zext_ln405_reg_1304) + unsigned(zext_ln422_2_fu_963_p1));
    add_ln432_fu_1117_p2 <= std_logic_vector(unsigned(zext_ln424_reg_1435) + unsigned(trunc_ln432_reg_1476));
    and_ln_fu_956_p3 <= (tmp_3266_reg_1357 & ap_const_lv3_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state9_on_subcall_done_assign_proc : process(grp_KeccakF1600_StatePer_1_fu_512_ap_done, ap_predicate_op122_call_state9)
    begin
                ap_block_state9_on_subcall_done <= ((grp_KeccakF1600_StatePer_1_fu_512_ap_done = ap_const_logic_0) and (ap_predicate_op122_call_state9 = ap_const_boolean_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_23_phi_fu_414_p6_assign_proc : process(icmp_ln401_reg_1286, icmp_ln401_1_reg_1290, ap_CS_fsm_state9, p_23_reg_411)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln401_1_reg_1290 = ap_const_lv1_0) and (icmp_ln401_reg_1286 = ap_const_lv1_0))) then 
            ap_phi_mux_p_23_phi_fu_414_p6 <= ap_const_lv6_0;
        else 
            ap_phi_mux_p_23_phi_fu_414_p6 <= p_23_reg_411;
        end if; 
    end process;


    ap_phi_mux_p_2_phi_fu_429_p6_assign_proc : process(icmp_ln401_reg_1286, icmp_ln401_1_reg_1290, ap_CS_fsm_state9, sub_ln406_fu_784_p2, p_2_reg_426)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln401_1_reg_1290 = ap_const_lv1_0) and (icmp_ln401_reg_1286 = ap_const_lv1_0))) then 
            ap_phi_mux_p_2_phi_fu_429_p6 <= sub_ln406_fu_784_p2;
        else 
            ap_phi_mux_p_2_phi_fu_429_p6 <= p_2_reg_426;
        end if; 
    end process;


    ap_phi_mux_p_34_phi_fu_506_p4_assign_proc : process(icmp_ln426_reg_1441, add_ln432_fu_1117_p2, p_34_reg_503, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln426_reg_1441 = ap_const_lv1_0))) then 
            ap_phi_mux_p_34_phi_fu_506_p4 <= add_ln432_fu_1117_p2;
        else 
            ap_phi_mux_p_34_phi_fu_506_p4 <= p_34_reg_503;
        end if; 
    end process;


    ap_phi_mux_phi_ln405_1_phi_fu_401_p6_assign_proc : process(icmp_ln401_reg_1286, icmp_ln401_1_reg_1290, trunc_ln409_reg_1299, ap_CS_fsm_state9, phi_ln405_1_reg_397)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln401_1_reg_1290 = ap_const_lv1_0) and (icmp_ln401_reg_1286 = ap_const_lv1_0))) then 
            ap_phi_mux_phi_ln405_1_phi_fu_401_p6 <= trunc_ln409_reg_1299;
        else 
            ap_phi_mux_phi_ln405_1_phi_fu_401_p6 <= phi_ln405_1_reg_397;
        end if; 
    end process;


    ap_predicate_op122_call_state9_assign_proc : process(icmp_ln401_reg_1286, icmp_ln401_1_reg_1290)
    begin
                ap_predicate_op122_call_state9 <= ((icmp_ln401_1_reg_1290 = ap_const_lv1_0) and (icmp_ln401_reg_1286 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_p_34_phi_fu_506_p4, ap_CS_fsm_state21, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            ap_return <= ap_phi_mux_p_34_phi_fu_506_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    empty_93_fu_552_p1 <= r(8 - 1 downto 0);
    empty_96_fu_600_p1 <= sub_ln393_fu_594_p2(3 - 1 downto 0);
    empty_97_fu_610_p2 <= "1" when (unsigned(sub_ln393_fu_594_p2) > unsigned(ap_const_lv4_2)) else "0";
    empty_98_fu_657_p1 <= p_05_rec_reg_344(1 - 1 downto 0);
    empty_99_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r),64));
    empty_fu_548_p1 <= pos_r(6 - 1 downto 0);
    exitcond_fu_661_p2 <= "1" when (p_05_rec_reg_344 = sext_ln393_reg_1190) else "0";
    grp_KeccakF1600_StatePer_1_fu_512_ap_start <= grp_KeccakF1600_StatePer_1_fu_512_ap_start_reg;
    i_36_fu_891_p2 <= std_logic_vector(unsigned(i_2_reg_459) + unsigned(ap_const_lv5_1));
    i_37_fu_1021_p2 <= std_logic_vector(unsigned(i_4_reg_481) + unsigned(ap_const_lv4_1));
    i_38_fu_1046_p2 <= std_logic_vector(unsigned(i_5_reg_492) + unsigned(ap_const_lv32_1));
    i_fu_679_p2 <= std_logic_vector(unsigned(i_0_reg_355) + unsigned(ap_const_lv32_1));
    icmp_ln389_fu_567_p2 <= "1" when (phi_ln389_reg_333 = ap_const_lv3_7) else "0";
    icmp_ln391_fu_584_p2 <= "1" when (trunc_ln391_fu_573_p1 = ap_const_lv3_0) else "0";
    icmp_ln401_1_fu_770_p2 <= "1" when (unsigned(zext_ln401_2_fu_755_p1) < unsigned(sub_ln401_fu_765_p2)) else "0";
    icmp_ln401_fu_759_p2 <= "1" when (p_12_reg_376 = ap_const_lv6_0) else "0";
    icmp_ln411_fu_815_p2 <= "1" when (unsigned(indvars_iv_reg_437) < unsigned(empty_99_reg_1314)) else "0";
    icmp_ln413_fu_886_p2 <= "1" when (i_2_reg_459 = tmp_s_reg_1321) else "0";
    icmp_ln420_fu_935_p2 <= "1" when (i_3_reg_470 = tmp_3266_reg_1357) else "0";
    icmp_ln426_fu_990_p2 <= "1" when (indvars_iv_reg_437 = zext_ln422_fu_967_p1) else "0";
    icmp_ln427_fu_1015_p2 <= "1" when (i_4_reg_481 = ap_const_lv4_8) else "0";
    icmp_ln429_fu_1041_p2 <= "1" when (unsigned(zext_ln429_2_fu_1037_p1) < unsigned(trunc_ln423_reg_1425)) else "0";
        p_cast6_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln393_2_fu_624_p2),5));

    r_7_i5_fu_1090_p9 <= (((((((t_q1 & t_q0) & reg_543) & reg_538) & reg_533) & reg_528) & reg_523) & reg_518);
    r_7_i6_fu_912_p9 <= (((((((select_ln32_3_reg_1344 & select_ln32_2_reg_1336) & select_ln32_3_reg_1344) & select_ln32_2_reg_1336) & select_ln32_3_reg_1344) & select_ln32_2_reg_1336) & select_ln32_3_reg_1344) & select_ln32_2_reg_1336);
    r_7_i7_fu_996_p9 <= (((((((select_ln32_1_reg_1376 & select_ln32_reg_1368) & select_ln32_1_reg_1376) & select_ln32_reg_1368) & select_ln32_1_reg_1376) & select_ln32_reg_1368) & select_ln32_1_reg_1376) & select_ln32_reg_1368);
    r_7_i_fu_720_p9 <= (((((((t_q0 & t_q1) & reg_543) & reg_538) & reg_533) & reg_528) & reg_523) & reg_518);

    s_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state20, s_addr_reg_1274, ap_CS_fsm_state9, ap_predicate_op122_call_state9, ap_CS_fsm_state11, s_addr_6_reg_1392, icmp_ln413_fu_886_p2, ap_CS_fsm_state14, s_addr_5_reg_1415, s_addr_7_reg_1471, grp_KeccakF1600_StatePer_1_fu_512_state_address0, ap_CS_fsm_state7, ap_CS_fsm_state13, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state21, zext_ln398_fu_716_p1, zext_ln414_1_fu_897_p1, zext_ln421_1_fu_951_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            s_address0 <= s_addr_7_reg_1471;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            s_address0 <= s_addr_5_reg_1415;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            s_address0 <= zext_ln421_1_fu_951_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            s_address0 <= s_addr_6_reg_1392;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln413_fu_886_p2 = ap_const_lv1_0))) then 
            s_address0 <= zext_ln414_1_fu_897_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_address0 <= s_addr_reg_1274;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            s_address0 <= zext_ln398_fu_716_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_predicate_op122_call_state9 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            s_address0 <= grp_KeccakF1600_StatePer_1_fu_512_state_address0;
        else 
            s_address0 <= "XXXXX";
        end if; 
    end process;

    s_address1 <= grp_KeccakF1600_StatePer_1_fu_512_state_address1;

    s_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state20, ap_CS_fsm_state9, ap_predicate_op122_call_state9, ap_CS_fsm_state11, icmp_ln413_fu_886_p2, ap_CS_fsm_state14, grp_KeccakF1600_StatePer_1_fu_512_state_ce0, ap_CS_fsm_state7, ap_CS_fsm_state13, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln413_fu_886_p2 = ap_const_lv1_0)))) then 
            s_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_predicate_op122_call_state9 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            s_ce0 <= grp_KeccakF1600_StatePer_1_fu_512_state_ce0;
        else 
            s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_ce1_assign_proc : process(ap_CS_fsm_state9, ap_predicate_op122_call_state9, grp_KeccakF1600_StatePer_1_fu_512_state_ce1, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_predicate_op122_call_state9 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            s_ce1 <= grp_KeccakF1600_StatePer_1_fu_512_state_ce1;
        else 
            s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_d0_assign_proc : process(ap_CS_fsm_state9, ap_predicate_op122_call_state9, grp_KeccakF1600_StatePer_1_fu_512_state_d0, ap_CS_fsm_state7, ap_CS_fsm_state13, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state21, xor_ln398_fu_740_p2, xor_ln414_fu_924_p2, xor_ln421_fu_1008_p2, xor_ln431_fu_1110_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            s_d0 <= xor_ln431_fu_1110_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            s_d0 <= xor_ln421_fu_1008_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            s_d0 <= xor_ln414_fu_924_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_d0 <= xor_ln398_fu_740_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_predicate_op122_call_state9 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            s_d0 <= grp_KeccakF1600_StatePer_1_fu_512_state_d0;
        else 
            s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    s_d1 <= grp_KeccakF1600_StatePer_1_fu_512_state_d1;

    s_we0_assign_proc : process(ap_CS_fsm_state9, ap_predicate_op122_call_state9, icmp_ln426_reg_1441, grp_KeccakF1600_StatePer_1_fu_512_state_we0, ap_CS_fsm_state7, ap_CS_fsm_state13, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln426_reg_1441 = ap_const_lv1_0)))) then 
            s_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_predicate_op122_call_state9 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            s_we0 <= grp_KeccakF1600_StatePer_1_fu_512_state_we0;
        else 
            s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s_we1_assign_proc : process(ap_CS_fsm_state9, ap_predicate_op122_call_state9, grp_KeccakF1600_StatePer_1_fu_512_state_we1, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_predicate_op122_call_state9 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            s_we1 <= grp_KeccakF1600_StatePer_1_fu_512_state_we1;
        else 
            s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln32_1_fu_880_p3 <= 
        m_0_read when (xor_ln32_fu_869_p2(0) = '1') else 
        m_1_read;
    select_ln32_2_fu_829_p3 <= 
        m_1_read when (xor_ln32_1_fu_824_p2(0) = '1') else 
        m_0_read;
    select_ln32_3_fu_835_p3 <= 
        m_0_read when (xor_ln32_1_fu_824_p2(0) = '1') else 
        m_1_read;
    select_ln32_fu_874_p3 <= 
        m_1_read when (xor_ln32_fu_869_p2(0) = '1') else 
        m_0_read;
    select_ln394_fu_672_p3 <= 
        m_1_read when (empty_98_fu_657_p1(0) = '1') else 
        m_0_read;
    select_ln430_fu_1066_p3 <= 
        m_1_read when (xor_ln430_1_fu_1061_p2(0) = '1') else 
        m_0_read;
        sext_ln393_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln393_2_fu_624_p2),64));

        sext_ln395_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln393_2_fu_624_p2),6));

        sext_ln398_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln392_fu_690_p2),6));

        sext_ln405_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_p_2_phi_fu_429_p6),64));

    sub_ln393_fu_594_p2 <= std_logic_vector(signed(ap_const_lv4_8) - signed(zext_ln393_fu_590_p1));
    sub_ln398_fu_698_p2 <= std_logic_vector(unsigned(add_ln396_reg_1205) - unsigned(sext_ln398_fu_694_p1));
    sub_ln401_fu_765_p2 <= std_logic_vector(unsigned(empty_93_reg_1159) - unsigned(zext_ln401_1_fu_747_p1));
    sub_ln406_fu_784_p2 <= std_logic_vector(unsigned(zext_ln401_reg_1279) - unsigned(trunc_ln406_reg_1294));
    sub_ln418_fu_907_p2 <= std_logic_vector(unsigned(indvars_iv_reg_437) - unsigned(empty_99_reg_1314));
    sub_ln423_fu_971_p2 <= std_logic_vector(unsigned(indvars_iv_reg_437) - unsigned(zext_ln422_fu_967_p1));

    t_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state18, ap_CS_fsm_state5, ap_CS_fsm_state19, ap_CS_fsm_state6, ap_CS_fsm_state20, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond_fu_661_p2, ap_CS_fsm_state17, zext_ln389_fu_562_p1, zext_ln394_fu_685_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            t_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            t_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            t_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            t_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            t_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            t_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_661_p2 = ap_const_lv1_1))) then 
            t_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_661_p2 = ap_const_lv1_0))) then 
            t_address0 <= zext_ln394_fu_685_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_address0 <= zext_ln389_fu_562_p1(3 - 1 downto 0);
        else 
            t_address0 <= "XXX";
        end if; 
    end process;


    t_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state18, ap_CS_fsm_state5, ap_CS_fsm_state19, ap_CS_fsm_state6, ap_CS_fsm_state20, ap_CS_fsm_state3, ap_CS_fsm_state16, ap_CS_fsm_state17, icmp_ln429_fu_1041_p2, zext_ln428_fu_1027_p1, zext_ln429_fu_1032_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            t_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            t_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            t_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln429_fu_1041_p2 = ap_const_lv1_0))) then 
            t_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln429_fu_1041_p2 = ap_const_lv1_1))) then 
            t_address1 <= zext_ln429_fu_1032_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            t_address1 <= zext_ln428_fu_1027_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            t_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            t_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            t_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            t_address1 <= "XXX";
        end if; 
    end process;


    t_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state18, ap_CS_fsm_state5, ap_CS_fsm_state19, ap_CS_fsm_state6, ap_CS_fsm_state20, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond_fu_661_p2, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_661_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_661_p2 = ap_const_lv1_0)))) then 
            t_ce0 <= ap_const_logic_1;
        else 
            t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state18, ap_CS_fsm_state5, ap_CS_fsm_state19, ap_CS_fsm_state6, ap_CS_fsm_state20, ap_CS_fsm_state3, ap_CS_fsm_state16, ap_CS_fsm_state17, icmp_ln429_fu_1041_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln429_fu_1041_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln429_fu_1041_p2 = ap_const_lv1_0)))) then 
            t_ce1 <= ap_const_logic_1;
        else 
            t_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    t_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond_fu_661_p2, select_ln394_fu_672_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_661_p2 = ap_const_lv1_0))) then 
            t_d0 <= select_ln394_fu_672_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_d0 <= ap_const_lv8_0;
        else 
            t_d0 <= "XXXXXXXX";
        end if; 
    end process;


    t_d1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state17, icmp_ln429_fu_1041_p2, select_ln430_fu_1066_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln429_fu_1041_p2 = ap_const_lv1_1))) then 
            t_d1 <= select_ln430_fu_1066_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            t_d1 <= ap_const_lv8_0;
        else 
            t_d1 <= "XXXXXXXX";
        end if; 
    end process;


    t_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond_fu_661_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_661_p2 = ap_const_lv1_0)))) then 
            t_we0 <= ap_const_logic_1;
        else 
            t_we0 <= ap_const_logic_0;
        end if; 
    end process;


    t_we1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state17, icmp_ln429_fu_1041_p2, icmp_ln427_fu_1015_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln429_fu_1041_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln427_fu_1015_p2 = ap_const_lv1_0)))) then 
            t_we1 <= ap_const_logic_1;
        else 
            t_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_496_fu_841_p4 <= p_23_reg_411(5 downto 3);
    tmp_497_fu_1073_p4 <= add_ln424_reg_1430(8 downto 3);
    trunc_ln391_fu_573_p1 <= pos_r(3 - 1 downto 0);
    trunc_ln395_fu_642_p1 <= umax_fu_616_p3(2 - 1 downto 0);
    trunc_ln399_fu_713_p1 <= xor_ln393_2_reg_1185(1 - 1 downto 0);
    trunc_ln406_fu_776_p1 <= sub_ln401_fu_765_p2(3 - 1 downto 0);
    trunc_ln409_fu_780_p1 <= sub_ln401_fu_765_p2(1 - 1 downto 0);
    trunc_ln414_fu_820_p1 <= p_38_rec_reg_447(1 - 1 downto 0);
    trunc_ln421_fu_865_p1 <= p_38_rec_reg_447(1 - 1 downto 0);
    trunc_ln423_fu_977_p1 <= sub_ln423_fu_971_p2(33 - 1 downto 0);
    trunc_ln430_fu_1052_p1 <= i_5_reg_492(1 - 1 downto 0);
    trunc_ln432_fu_1087_p1 <= sub_ln423_reg_1420(32 - 1 downto 0);
    umax_fu_616_p3 <= 
        ap_const_lv3_5 when (empty_97_fu_610_p2(0) = '1') else 
        xor_ln393_1_fu_604_p2;
    xor_ln32_1_fu_824_p2 <= (xor_ln414_1_reg_1326 xor trunc_ln414_fu_820_p1);
    xor_ln32_fu_869_p2 <= (xor_ln414_1_reg_1326 xor trunc_ln421_fu_865_p1);
    xor_ln393_1_fu_604_p2 <= (empty_96_fu_600_p1 xor ap_const_lv3_7);
    xor_ln393_2_fu_624_p2 <= (umax_fu_616_p3 xor ap_const_lv3_7);
    xor_ln398_fu_740_p2 <= (s_q0 xor r_7_i_fu_720_p9);
    xor_ln414_1_fu_809_p2 <= (phi_ln405_reg_364 xor ap_phi_mux_phi_ln405_1_phi_fu_401_p6);
    xor_ln414_fu_924_p2 <= (s_q0 xor r_7_i6_fu_912_p9);
    xor_ln421_fu_1008_p2 <= (s_q0 xor r_7_i7_fu_996_p9);
    xor_ln430_1_fu_1061_p2 <= (xor_ln430_fu_1056_p2 xor xor_ln414_1_reg_1326);
    xor_ln430_fu_1056_p2 <= (trunc_ln430_fu_1052_p1 xor trunc_ln421_reg_1363);
    xor_ln431_fu_1110_p2 <= (s_q0 xor r_7_i5_fu_1090_p9);
    zext_ln389_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln389_reg_333),64));
    zext_ln391_1_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln391_fu_573_p1),5));
    zext_ln391_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln391_fu_573_p1),32));
    zext_ln393_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln391_fu_573_p1),4));
    zext_ln394_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_355),64));
    zext_ln398_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_1234),64));
    zext_ln401_1_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_12_reg_376),8));
    zext_ln401_2_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_1_reg_386),8));
    zext_ln401_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_1_reg_386),3));
    zext_ln405_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_23_phi_fu_414_p6),9));
    zext_ln414_1_fu_897_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_459),64));
    zext_ln420_2_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_496_fu_841_p4),30));
    zext_ln420_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_470),30));
    zext_ln421_1_fu_951_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln421_1_fu_946_p2),64));
    zext_ln422_2_fu_963_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_956_p3),9));
    zext_ln422_fu_967_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_956_p3),64));
    zext_ln424_fu_986_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln424_fu_981_p2),32));
    zext_ln428_fu_1027_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_481),64));
    zext_ln429_2_fu_1037_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_492),33));
    zext_ln429_fu_1032_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_492),64));
    zext_ln431_fu_1082_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_497_fu_1073_p4),64));
end behav;
