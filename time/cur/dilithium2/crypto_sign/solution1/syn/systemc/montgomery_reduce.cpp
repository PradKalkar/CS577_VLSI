// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "montgomery_reduce.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic montgomery_reduce::ap_const_logic_1 = sc_dt::Log_1;
const bool montgomery_reduce::ap_const_boolean_1 = true;
const sc_lv<32> montgomery_reduce::ap_const_lv32_3802001 = "11100000000010000000000001";
const sc_lv<55> montgomery_reduce::ap_const_lv55_7FFFFFFF801FFF = "1111111111111111111111111111111100000000001111111111111";
const sc_lv<32> montgomery_reduce::ap_const_lv32_20 = "100000";
const sc_lv<32> montgomery_reduce::ap_const_lv32_3F = "111111";
const sc_logic montgomery_reduce::ap_const_logic_0 = sc_dt::Log_0;

montgomery_reduce::montgomery_reduce(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_add_ln19_fu_44_p2);
    sensitive << ( a );
    sensitive << ( sext_ln19_6_fu_40_p1 );

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return);
    sensitive << ( add_ln19_fu_44_p2 );

    SC_METHOD(thread_mul_ln19_fu_34_p1);
    sensitive << ( t_fu_24_p2 );

    SC_METHOD(thread_mul_ln19_fu_34_p2);
    sensitive << ( mul_ln19_fu_34_p1 );

    SC_METHOD(thread_sext_ln19_6_fu_40_p1);
    sensitive << ( mul_ln19_fu_34_p2 );

    SC_METHOD(thread_t_fu_24_p2);
    sensitive << ( trunc_ln18_fu_20_p1 );

    SC_METHOD(thread_trunc_ln18_fu_20_p1);
    sensitive << ( a );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "montgomery_reduce_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a, "(port)a");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, trunc_ln18_fu_20_p1, "trunc_ln18_fu_20_p1");
    sc_trace(mVcdFile, t_fu_24_p2, "t_fu_24_p2");
    sc_trace(mVcdFile, mul_ln19_fu_34_p1, "mul_ln19_fu_34_p1");
    sc_trace(mVcdFile, mul_ln19_fu_34_p2, "mul_ln19_fu_34_p2");
    sc_trace(mVcdFile, sext_ln19_6_fu_40_p1, "sext_ln19_6_fu_40_p1");
    sc_trace(mVcdFile, add_ln19_fu_44_p2, "add_ln19_fu_44_p2");
#endif

    }
}

montgomery_reduce::~montgomery_reduce() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void montgomery_reduce::thread_add_ln19_fu_44_p2() {
    add_ln19_fu_44_p2 = (!a.read().is_01() || !sext_ln19_6_fu_40_p1.read().is_01())? sc_lv<64>(): (sc_biguint<64>(a.read()) + sc_bigint<64>(sext_ln19_6_fu_40_p1.read()));
}

void montgomery_reduce::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void montgomery_reduce::thread_ap_return() {
    ap_return = add_ln19_fu_44_p2.read().range(63, 32);
}

void montgomery_reduce::thread_mul_ln19_fu_34_p1() {
    mul_ln19_fu_34_p1 = t_fu_24_p2.read();
}

void montgomery_reduce::thread_mul_ln19_fu_34_p2() {
    mul_ln19_fu_34_p2 = (!ap_const_lv55_7FFFFFFF801FFF.is_01() || !mul_ln19_fu_34_p1.read().is_01())? sc_lv<55>(): sc_bigint<55>(ap_const_lv55_7FFFFFFF801FFF) * sc_bigint<32>(mul_ln19_fu_34_p1.read());
}

void montgomery_reduce::thread_sext_ln19_6_fu_40_p1() {
    sext_ln19_6_fu_40_p1 = esl_sext<64,55>(mul_ln19_fu_34_p2.read());
}

void montgomery_reduce::thread_t_fu_24_p2() {
    t_fu_24_p2 = (!ap_const_lv32_3802001.is_01() || !trunc_ln18_fu_20_p1.read().is_01())? sc_lv<32>(): sc_biguint<32>(ap_const_lv32_3802001) * sc_bigint<32>(trunc_ln18_fu_20_p1.read());
}

void montgomery_reduce::thread_trunc_ln18_fu_20_p1() {
    trunc_ln18_fu_20_p1 = a.read().range(32-1, 0);
}

}

