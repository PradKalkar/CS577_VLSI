// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "keccak_absorb_3199.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic keccak_absorb_3199::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic keccak_absorb_3199::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> keccak_absorb_3199::ap_ST_fsm_state1 = "1";
const sc_lv<5> keccak_absorb_3199::ap_ST_fsm_state2 = "10";
const sc_lv<5> keccak_absorb_3199::ap_ST_fsm_state3 = "100";
const sc_lv<5> keccak_absorb_3199::ap_ST_fsm_state4 = "1000";
const sc_lv<5> keccak_absorb_3199::ap_ST_fsm_state5 = "10000";
const sc_lv<32> keccak_absorb_3199::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> keccak_absorb_3199::ap_const_lv32_1 = "1";
const sc_lv<1> keccak_absorb_3199::ap_const_lv1_0 = "0";
const sc_lv<32> keccak_absorb_3199::ap_const_lv32_2 = "10";
const sc_lv<1> keccak_absorb_3199::ap_const_lv1_1 = "1";
const sc_lv<32> keccak_absorb_3199::ap_const_lv32_3 = "11";
const sc_lv<32> keccak_absorb_3199::ap_const_lv32_4 = "100";
const sc_lv<3> keccak_absorb_3199::ap_const_lv3_0 = "000";
const sc_lv<4> keccak_absorb_3199::ap_const_lv4_0 = "0000";
const sc_lv<64> keccak_absorb_3199::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<3> keccak_absorb_3199::ap_const_lv3_6 = "110";
const sc_lv<3> keccak_absorb_3199::ap_const_lv3_1 = "1";
const sc_lv<4> keccak_absorb_3199::ap_const_lv4_8 = "1000";
const sc_lv<4> keccak_absorb_3199::ap_const_lv4_1 = "1";
const bool keccak_absorb_3199::ap_const_boolean_1 = true;

keccak_absorb_3199::keccak_absorb_3199(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln31_1_fu_137_p2);
    sensitive << ( shl_ln_reg_213 );
    sensitive << ( zext_ln30_fu_121_p1 );

    SC_METHOD(thread_add_ln31_fu_146_p2);
    sensitive << ( m_offset );
    sensitive << ( zext_ln31_fu_142_p1 );

    SC_METHOD(thread_add_ln416_fu_107_p2);
    sensitive << ( i_3_reg_62 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln416_fu_101_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln416_fu_101_p2 );

    SC_METHOD(thread_i_fu_131_p2);
    sensitive << ( i_0_i1_reg_73 );

    SC_METHOD(thread_icmp_ln30_fu_125_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_0_i1_reg_73 );

    SC_METHOD(thread_icmp_ln416_fu_101_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_3_reg_62 );

    SC_METHOD(thread_m_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln31_7_fu_151_p1 );

    SC_METHOD(thread_m_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_r_fu_182_p2);
    sensitive << ( r_0_i2_reg_85 );
    sensitive << ( shl_ln31_fu_176_p2 );

    SC_METHOD(thread_s_address0);
    sensitive << ( zext_ln416_reg_200 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( s_addr_reg_231 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_s_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_s_d0);
    sensitive << ( s_q0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( r_0_i2_reg_85 );

    SC_METHOD(thread_s_we0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_shl_ln15_fu_164_p3);
    sensitive << ( trunc_ln31_fu_160_p1 );

    SC_METHOD(thread_shl_ln31_fu_176_p2);
    sensitive << ( zext_ln31_3_fu_156_p1 );
    sensitive << ( zext_ln31_4_fu_172_p1 );

    SC_METHOD(thread_shl_ln_fu_113_p3);
    sensitive << ( i_3_reg_62 );

    SC_METHOD(thread_trunc_ln31_fu_160_p1);
    sensitive << ( i_0_i1_reg_73 );

    SC_METHOD(thread_zext_ln30_fu_121_p1);
    sensitive << ( i_0_i1_reg_73 );

    SC_METHOD(thread_zext_ln31_3_fu_156_p1);
    sensitive << ( m_q0 );

    SC_METHOD(thread_zext_ln31_4_fu_172_p1);
    sensitive << ( shl_ln15_fu_164_p3 );

    SC_METHOD(thread_zext_ln31_7_fu_151_p1);
    sensitive << ( add_ln31_fu_146_p2 );

    SC_METHOD(thread_zext_ln31_fu_142_p1);
    sensitive << ( add_ln31_1_fu_137_p2 );

    SC_METHOD(thread_zext_ln416_fu_97_p1);
    sensitive << ( i_3_reg_62 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln416_fu_101_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln30_fu_125_p2 );

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "keccak_absorb_3199_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, s_address0, "(port)s_address0");
    sc_trace(mVcdFile, s_ce0, "(port)s_ce0");
    sc_trace(mVcdFile, s_we0, "(port)s_we0");
    sc_trace(mVcdFile, s_d0, "(port)s_d0");
    sc_trace(mVcdFile, s_q0, "(port)s_q0");
    sc_trace(mVcdFile, m_address0, "(port)m_address0");
    sc_trace(mVcdFile, m_ce0, "(port)m_ce0");
    sc_trace(mVcdFile, m_q0, "(port)m_q0");
    sc_trace(mVcdFile, m_offset, "(port)m_offset");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, zext_ln416_fu_97_p1, "zext_ln416_fu_97_p1");
    sc_trace(mVcdFile, zext_ln416_reg_200, "zext_ln416_reg_200");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, add_ln416_fu_107_p2, "add_ln416_fu_107_p2");
    sc_trace(mVcdFile, add_ln416_reg_208, "add_ln416_reg_208");
    sc_trace(mVcdFile, shl_ln_fu_113_p3, "shl_ln_fu_113_p3");
    sc_trace(mVcdFile, shl_ln_reg_213, "shl_ln_reg_213");
    sc_trace(mVcdFile, icmp_ln416_fu_101_p2, "icmp_ln416_fu_101_p2");
    sc_trace(mVcdFile, i_fu_131_p2, "i_fu_131_p2");
    sc_trace(mVcdFile, i_reg_221, "i_reg_221");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln30_fu_125_p2, "icmp_ln30_fu_125_p2");
    sc_trace(mVcdFile, s_addr_reg_231, "s_addr_reg_231");
    sc_trace(mVcdFile, r_fu_182_p2, "r_fu_182_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_3_reg_62, "i_3_reg_62");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, i_0_i1_reg_73, "i_0_i1_reg_73");
    sc_trace(mVcdFile, r_0_i2_reg_85, "r_0_i2_reg_85");
    sc_trace(mVcdFile, zext_ln31_7_fu_151_p1, "zext_ln31_7_fu_151_p1");
    sc_trace(mVcdFile, zext_ln30_fu_121_p1, "zext_ln30_fu_121_p1");
    sc_trace(mVcdFile, add_ln31_1_fu_137_p2, "add_ln31_1_fu_137_p2");
    sc_trace(mVcdFile, zext_ln31_fu_142_p1, "zext_ln31_fu_142_p1");
    sc_trace(mVcdFile, add_ln31_fu_146_p2, "add_ln31_fu_146_p2");
    sc_trace(mVcdFile, trunc_ln31_fu_160_p1, "trunc_ln31_fu_160_p1");
    sc_trace(mVcdFile, shl_ln15_fu_164_p3, "shl_ln15_fu_164_p3");
    sc_trace(mVcdFile, zext_ln31_3_fu_156_p1, "zext_ln31_3_fu_156_p1");
    sc_trace(mVcdFile, zext_ln31_4_fu_172_p1, "zext_ln31_4_fu_172_p1");
    sc_trace(mVcdFile, shl_ln31_fu_176_p2, "shl_ln31_fu_176_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

keccak_absorb_3199::~keccak_absorb_3199() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void keccak_absorb_3199::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_0_i1_reg_73 = i_reg_221.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln416_fu_101_p2.read(), ap_const_lv1_0))) {
        i_0_i1_reg_73 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_3_reg_62 = ap_const_lv3_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_3_reg_62 = add_ln416_reg_208.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        r_0_i2_reg_85 = r_fu_182_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln416_fu_101_p2.read(), ap_const_lv1_0))) {
        r_0_i2_reg_85 = ap_const_lv64_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        add_ln416_reg_208 = add_ln416_fu_107_p2.read();
        zext_ln416_reg_200 = zext_ln416_fu_97_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_reg_221 = i_fu_131_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln30_fu_125_p2.read(), ap_const_lv1_1))) {
        s_addr_reg_231 =  (sc_lv<5>) (zext_ln416_reg_200.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln416_fu_101_p2.read(), ap_const_lv1_0))) {
        shl_ln_reg_213 = shl_ln_fu_113_p3.read();
    }
}

void keccak_absorb_3199::thread_add_ln31_1_fu_137_p2() {
    add_ln31_1_fu_137_p2 = (!zext_ln30_fu_121_p1.read().is_01() || !shl_ln_reg_213.read().is_01())? sc_lv<6>(): (sc_biguint<6>(zext_ln30_fu_121_p1.read()) + sc_biguint<6>(shl_ln_reg_213.read()));
}

void keccak_absorb_3199::thread_add_ln31_fu_146_p2() {
    add_ln31_fu_146_p2 = (!m_offset.read().is_01() || !zext_ln31_fu_142_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(m_offset.read()) + sc_biguint<8>(zext_ln31_fu_142_p1.read()));
}

void keccak_absorb_3199::thread_add_ln416_fu_107_p2() {
    add_ln416_fu_107_p2 = (!i_3_reg_62.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_3_reg_62.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void keccak_absorb_3199::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void keccak_absorb_3199::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void keccak_absorb_3199::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void keccak_absorb_3199::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void keccak_absorb_3199::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void keccak_absorb_3199::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln416_fu_101_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void keccak_absorb_3199::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void keccak_absorb_3199::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln416_fu_101_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void keccak_absorb_3199::thread_i_fu_131_p2() {
    i_fu_131_p2 = (!i_0_i1_reg_73.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_0_i1_reg_73.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void keccak_absorb_3199::thread_icmp_ln30_fu_125_p2() {
    icmp_ln30_fu_125_p2 = (!i_0_i1_reg_73.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i1_reg_73.read() == ap_const_lv4_8);
}

void keccak_absorb_3199::thread_icmp_ln416_fu_101_p2() {
    icmp_ln416_fu_101_p2 = (!i_3_reg_62.read().is_01() || !ap_const_lv3_6.is_01())? sc_lv<1>(): sc_lv<1>(i_3_reg_62.read() == ap_const_lv3_6);
}

void keccak_absorb_3199::thread_m_address0() {
    m_address0 =  (sc_lv<8>) (zext_ln31_7_fu_151_p1.read());
}

void keccak_absorb_3199::thread_m_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        m_ce0 = ap_const_logic_1;
    } else {
        m_ce0 = ap_const_logic_0;
    }
}

void keccak_absorb_3199::thread_r_fu_182_p2() {
    r_fu_182_p2 = (shl_ln31_fu_176_p2.read() | r_0_i2_reg_85.read());
}

void keccak_absorb_3199::thread_s_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        s_address0 = s_addr_reg_231.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        s_address0 =  (sc_lv<5>) (zext_ln416_reg_200.read());
    } else {
        s_address0 = "XXXXX";
    }
}

void keccak_absorb_3199::thread_s_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        s_ce0 = ap_const_logic_1;
    } else {
        s_ce0 = ap_const_logic_0;
    }
}

void keccak_absorb_3199::thread_s_d0() {
    s_d0 = (s_q0.read() ^ r_0_i2_reg_85.read());
}

void keccak_absorb_3199::thread_s_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        s_we0 = ap_const_logic_1;
    } else {
        s_we0 = ap_const_logic_0;
    }
}

void keccak_absorb_3199::thread_shl_ln15_fu_164_p3() {
    shl_ln15_fu_164_p3 = esl_concat<3,3>(trunc_ln31_fu_160_p1.read(), ap_const_lv3_0);
}

void keccak_absorb_3199::thread_shl_ln31_fu_176_p2() {
    shl_ln31_fu_176_p2 = (!zext_ln31_4_fu_172_p1.read().is_01())? sc_lv<64>(): zext_ln31_3_fu_156_p1.read() << (unsigned short)zext_ln31_4_fu_172_p1.read().to_uint();
}

void keccak_absorb_3199::thread_shl_ln_fu_113_p3() {
    shl_ln_fu_113_p3 = esl_concat<3,3>(i_3_reg_62.read(), ap_const_lv3_0);
}

void keccak_absorb_3199::thread_trunc_ln31_fu_160_p1() {
    trunc_ln31_fu_160_p1 = i_0_i1_reg_73.read().range(3-1, 0);
}

void keccak_absorb_3199::thread_zext_ln30_fu_121_p1() {
    zext_ln30_fu_121_p1 = esl_zext<6,4>(i_0_i1_reg_73.read());
}

void keccak_absorb_3199::thread_zext_ln31_3_fu_156_p1() {
    zext_ln31_3_fu_156_p1 = esl_zext<64,8>(m_q0.read());
}

void keccak_absorb_3199::thread_zext_ln31_4_fu_172_p1() {
    zext_ln31_4_fu_172_p1 = esl_zext<64,6>(shl_ln15_fu_164_p3.read());
}

void keccak_absorb_3199::thread_zext_ln31_7_fu_151_p1() {
    zext_ln31_7_fu_151_p1 = esl_zext<64,8>(add_ln31_fu_146_p2.read());
}

void keccak_absorb_3199::thread_zext_ln31_fu_142_p1() {
    zext_ln31_fu_142_p1 = esl_zext<8,6>(add_ln31_1_fu_137_p2.read());
}

void keccak_absorb_3199::thread_zext_ln416_fu_97_p1() {
    zext_ln416_fu_97_p1 = esl_zext<64,3>(i_3_reg_62.read());
}

void keccak_absorb_3199::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln416_fu_101_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln30_fu_125_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

}

