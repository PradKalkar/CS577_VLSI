// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "keccak_absorb_3199.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic keccak_absorb_3199::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic keccak_absorb_3199::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> keccak_absorb_3199::ap_ST_fsm_state1 = "1";
const sc_lv<6> keccak_absorb_3199::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<6> keccak_absorb_3199::ap_ST_fsm_pp0_stage1 = "100";
const sc_lv<6> keccak_absorb_3199::ap_ST_fsm_pp0_stage2 = "1000";
const sc_lv<6> keccak_absorb_3199::ap_ST_fsm_pp0_stage3 = "10000";
const sc_lv<6> keccak_absorb_3199::ap_ST_fsm_state7 = "100000";
const bool keccak_absorb_3199::ap_const_boolean_1 = true;
const sc_lv<32> keccak_absorb_3199::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> keccak_absorb_3199::ap_const_lv32_1 = "1";
const bool keccak_absorb_3199::ap_const_boolean_0 = false;
const sc_lv<1> keccak_absorb_3199::ap_const_lv1_0 = "0";
const sc_lv<32> keccak_absorb_3199::ap_const_lv32_2 = "10";
const sc_lv<32> keccak_absorb_3199::ap_const_lv32_3 = "11";
const sc_lv<32> keccak_absorb_3199::ap_const_lv32_4 = "100";
const sc_lv<1> keccak_absorb_3199::ap_const_lv1_1 = "1";
const sc_lv<3> keccak_absorb_3199::ap_const_lv3_0 = "000";
const sc_lv<3> keccak_absorb_3199::ap_const_lv3_6 = "110";
const sc_lv<3> keccak_absorb_3199::ap_const_lv3_1 = "1";
const sc_lv<8> keccak_absorb_3199::ap_const_lv8_1 = "1";
const sc_lv<8> keccak_absorb_3199::ap_const_lv8_2 = "10";
const sc_lv<8> keccak_absorb_3199::ap_const_lv8_3 = "11";
const sc_lv<8> keccak_absorb_3199::ap_const_lv8_4 = "100";
const sc_lv<8> keccak_absorb_3199::ap_const_lv8_5 = "101";
const sc_lv<8> keccak_absorb_3199::ap_const_lv8_6 = "110";
const sc_lv<8> keccak_absorb_3199::ap_const_lv8_7 = "111";
const sc_lv<32> keccak_absorb_3199::ap_const_lv32_5 = "101";

keccak_absorb_3199::keccak_absorb_3199(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln32_10_fu_241_p2);
    sensitive << ( add_ln424_reg_305 );

    SC_METHOD(thread_add_ln32_11_fu_251_p2);
    sensitive << ( add_ln424_reg_305 );

    SC_METHOD(thread_add_ln32_12_fu_261_p2);
    sensitive << ( add_ln424_reg_305 );

    SC_METHOD(thread_add_ln32_7_fu_211_p2);
    sensitive << ( add_ln424_reg_305 );

    SC_METHOD(thread_add_ln32_8_fu_221_p2);
    sensitive << ( add_ln424_reg_305 );

    SC_METHOD(thread_add_ln32_9_fu_231_p2);
    sensitive << ( add_ln424_reg_305 );

    SC_METHOD(thread_add_ln32_fu_200_p2);
    sensitive << ( add_ln424_fu_190_p2 );

    SC_METHOD(thread_add_ln422_fu_167_p2);
    sensitive << ( ap_phi_mux_i_3_phi_fu_154_p4 );

    SC_METHOD(thread_add_ln424_fu_190_p2);
    sensitive << ( m_offset );
    sensitive << ( zext_ln424_fu_186_p1 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_pp0_stage1);

    SC_METHOD(thread_ap_block_pp0_stage1_11001);

    SC_METHOD(thread_ap_block_pp0_stage1_subdone);

    SC_METHOD(thread_ap_block_pp0_stage2);

    SC_METHOD(thread_ap_block_pp0_stage2_11001);

    SC_METHOD(thread_ap_block_pp0_stage2_subdone);

    SC_METHOD(thread_ap_block_pp0_stage3);

    SC_METHOD(thread_ap_block_pp0_stage3_11001);

    SC_METHOD(thread_ap_block_pp0_stage3_subdone);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage1_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage2_iter0);

    SC_METHOD(thread_ap_block_state5_pp0_stage3_iter0);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter1);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln422_fu_161_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_phi_mux_i_3_phi_fu_154_p4);
    sensitive << ( i_3_reg_150 );
    sensitive << ( icmp_ln422_reg_296 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( add_ln422_reg_300 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_icmp_ln422_fu_161_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_phi_mux_i_3_phi_fu_154_p4 );

    SC_METHOD(thread_m_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln424_2_fu_195_p1 );
    sensitive << ( zext_ln32_13_fu_216_p1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( zext_ln32_15_fu_236_p1 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( zext_ln32_17_fu_256_p1 );
    sensitive << ( ap_block_pp0_stage3 );

    SC_METHOD(thread_m_address1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln32_fu_206_p1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( zext_ln32_14_fu_226_p1 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( zext_ln32_16_fu_246_p1 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( zext_ln32_18_fu_266_p1 );

    SC_METHOD(thread_m_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );

    SC_METHOD(thread_m_ce1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );

    SC_METHOD(thread_r_7_i1_fu_271_p9);
    sensitive << ( m_q0 );
    sensitive << ( m_q1 );
    sensitive << ( m_load_reg_331 );
    sensitive << ( m_load_1_reg_336 );
    sensitive << ( m_load_2_reg_356 );
    sensitive << ( m_load_3_reg_361 );
    sensitive << ( m_load_4_reg_376 );
    sensitive << ( m_load_5_reg_381 );

    SC_METHOD(thread_s_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln422_fu_173_p1 );

    SC_METHOD(thread_s_address1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( s_addr_reg_325 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_s_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_s_ce1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_s_d1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( s_load_reg_351 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( r_7_i1_fu_271_p9 );

    SC_METHOD(thread_s_we1);
    sensitive << ( icmp_ln422_reg_296 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_shl_ln_fu_178_p3);
    sensitive << ( ap_phi_mux_i_3_phi_fu_154_p4 );

    SC_METHOD(thread_zext_ln32_13_fu_216_p1);
    sensitive << ( add_ln32_7_fu_211_p2 );

    SC_METHOD(thread_zext_ln32_14_fu_226_p1);
    sensitive << ( add_ln32_8_fu_221_p2 );

    SC_METHOD(thread_zext_ln32_15_fu_236_p1);
    sensitive << ( add_ln32_9_fu_231_p2 );

    SC_METHOD(thread_zext_ln32_16_fu_246_p1);
    sensitive << ( add_ln32_10_fu_241_p2 );

    SC_METHOD(thread_zext_ln32_17_fu_256_p1);
    sensitive << ( add_ln32_11_fu_251_p2 );

    SC_METHOD(thread_zext_ln32_18_fu_266_p1);
    sensitive << ( add_ln32_12_fu_261_p2 );

    SC_METHOD(thread_zext_ln32_fu_206_p1);
    sensitive << ( add_ln32_fu_200_p2 );

    SC_METHOD(thread_zext_ln422_fu_173_p1);
    sensitive << ( ap_phi_mux_i_3_phi_fu_154_p4 );

    SC_METHOD(thread_zext_ln424_2_fu_195_p1);
    sensitive << ( add_ln424_fu_190_p2 );

    SC_METHOD(thread_zext_ln424_fu_186_p1);
    sensitive << ( shl_ln_fu_178_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln422_fu_161_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp0_stage3_subdone );
    sensitive << ( ap_block_pp0_stage1_subdone );
    sensitive << ( ap_block_pp0_stage2_subdone );

    ap_CS_fsm = "000001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "keccak_absorb_3199_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, s_address0, "(port)s_address0");
    sc_trace(mVcdFile, s_ce0, "(port)s_ce0");
    sc_trace(mVcdFile, s_q0, "(port)s_q0");
    sc_trace(mVcdFile, s_address1, "(port)s_address1");
    sc_trace(mVcdFile, s_ce1, "(port)s_ce1");
    sc_trace(mVcdFile, s_we1, "(port)s_we1");
    sc_trace(mVcdFile, s_d1, "(port)s_d1");
    sc_trace(mVcdFile, m_address0, "(port)m_address0");
    sc_trace(mVcdFile, m_ce0, "(port)m_ce0");
    sc_trace(mVcdFile, m_q0, "(port)m_q0");
    sc_trace(mVcdFile, m_address1, "(port)m_address1");
    sc_trace(mVcdFile, m_ce1, "(port)m_ce1");
    sc_trace(mVcdFile, m_q1, "(port)m_q1");
    sc_trace(mVcdFile, m_offset, "(port)m_offset");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_3_reg_150, "i_3_reg_150");
    sc_trace(mVcdFile, icmp_ln422_fu_161_p2, "icmp_ln422_fu_161_p2");
    sc_trace(mVcdFile, icmp_ln422_reg_296, "icmp_ln422_reg_296");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter1, "ap_block_state6_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, add_ln422_fu_167_p2, "add_ln422_fu_167_p2");
    sc_trace(mVcdFile, add_ln422_reg_300, "add_ln422_reg_300");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, add_ln424_fu_190_p2, "add_ln424_fu_190_p2");
    sc_trace(mVcdFile, add_ln424_reg_305, "add_ln424_reg_305");
    sc_trace(mVcdFile, s_addr_reg_325, "s_addr_reg_325");
    sc_trace(mVcdFile, m_load_reg_331, "m_load_reg_331");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage1_iter0, "ap_block_state3_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage1_11001, "ap_block_pp0_stage1_11001");
    sc_trace(mVcdFile, m_load_1_reg_336, "m_load_1_reg_336");
    sc_trace(mVcdFile, s_load_reg_351, "s_load_reg_351");
    sc_trace(mVcdFile, m_load_2_reg_356, "m_load_2_reg_356");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage2, "ap_CS_fsm_pp0_stage2");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage2_iter0, "ap_block_state4_pp0_stage2_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage2_11001, "ap_block_pp0_stage2_11001");
    sc_trace(mVcdFile, m_load_3_reg_361, "m_load_3_reg_361");
    sc_trace(mVcdFile, m_load_4_reg_376, "m_load_4_reg_376");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage3, "ap_CS_fsm_pp0_stage3");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage3_iter0, "ap_block_state5_pp0_stage3_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage3_11001, "ap_block_pp0_stage3_11001");
    sc_trace(mVcdFile, m_load_5_reg_381, "m_load_5_reg_381");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage3_subdone, "ap_block_pp0_stage3_subdone");
    sc_trace(mVcdFile, ap_phi_mux_i_3_phi_fu_154_p4, "ap_phi_mux_i_3_phi_fu_154_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, zext_ln424_2_fu_195_p1, "zext_ln424_2_fu_195_p1");
    sc_trace(mVcdFile, zext_ln32_fu_206_p1, "zext_ln32_fu_206_p1");
    sc_trace(mVcdFile, zext_ln422_fu_173_p1, "zext_ln422_fu_173_p1");
    sc_trace(mVcdFile, zext_ln32_13_fu_216_p1, "zext_ln32_13_fu_216_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage1, "ap_block_pp0_stage1");
    sc_trace(mVcdFile, zext_ln32_14_fu_226_p1, "zext_ln32_14_fu_226_p1");
    sc_trace(mVcdFile, zext_ln32_15_fu_236_p1, "zext_ln32_15_fu_236_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage2, "ap_block_pp0_stage2");
    sc_trace(mVcdFile, zext_ln32_16_fu_246_p1, "zext_ln32_16_fu_246_p1");
    sc_trace(mVcdFile, zext_ln32_17_fu_256_p1, "zext_ln32_17_fu_256_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage3, "ap_block_pp0_stage3");
    sc_trace(mVcdFile, zext_ln32_18_fu_266_p1, "zext_ln32_18_fu_266_p1");
    sc_trace(mVcdFile, shl_ln_fu_178_p3, "shl_ln_fu_178_p3");
    sc_trace(mVcdFile, zext_ln424_fu_186_p1, "zext_ln424_fu_186_p1");
    sc_trace(mVcdFile, add_ln32_fu_200_p2, "add_ln32_fu_200_p2");
    sc_trace(mVcdFile, add_ln32_7_fu_211_p2, "add_ln32_7_fu_211_p2");
    sc_trace(mVcdFile, add_ln32_8_fu_221_p2, "add_ln32_8_fu_221_p2");
    sc_trace(mVcdFile, add_ln32_9_fu_231_p2, "add_ln32_9_fu_231_p2");
    sc_trace(mVcdFile, add_ln32_10_fu_241_p2, "add_ln32_10_fu_241_p2");
    sc_trace(mVcdFile, add_ln32_11_fu_251_p2, "add_ln32_11_fu_251_p2");
    sc_trace(mVcdFile, add_ln32_12_fu_261_p2, "add_ln32_12_fu_261_p2");
    sc_trace(mVcdFile, r_7_i1_fu_271_p9, "r_7_i1_fu_271_p9");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_block_pp0_stage1_subdone, "ap_block_pp0_stage1_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage2_subdone, "ap_block_pp0_stage2_subdone");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

keccak_absorb_3199::~keccak_absorb_3199() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void keccak_absorb_3199::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage3_subdone.read(), ap_const_boolean_0)))) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_3_reg_150 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(icmp_ln422_reg_296.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        i_3_reg_150 = add_ln422_reg_300.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        add_ln422_reg_300 = add_ln422_fu_167_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln422_fu_161_p2.read(), ap_const_lv1_0))) {
        add_ln424_reg_305 = add_ln424_fu_190_p2.read();
        s_addr_reg_325 =  (sc_lv<5>) (zext_ln422_fu_173_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln422_reg_296 = icmp_ln422_fu_161_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln422_reg_296.read(), ap_const_lv1_0))) {
        m_load_1_reg_336 = m_q1.read();
        m_load_reg_331 = m_q0.read();
        s_load_reg_351 = s_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(icmp_ln422_reg_296.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0))) {
        m_load_2_reg_356 = m_q0.read();
        m_load_3_reg_361 = m_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(icmp_ln422_reg_296.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0))) {
        m_load_4_reg_376 = m_q0.read();
        m_load_5_reg_381 = m_q1.read();
    }
}

void keccak_absorb_3199::thread_add_ln32_10_fu_241_p2() {
    add_ln32_10_fu_241_p2 = (!add_ln424_reg_305.read().is_01() || !ap_const_lv8_5.is_01())? sc_lv<8>(): (sc_biguint<8>(add_ln424_reg_305.read()) + sc_biguint<8>(ap_const_lv8_5));
}

void keccak_absorb_3199::thread_add_ln32_11_fu_251_p2() {
    add_ln32_11_fu_251_p2 = (!add_ln424_reg_305.read().is_01() || !ap_const_lv8_6.is_01())? sc_lv<8>(): (sc_biguint<8>(add_ln424_reg_305.read()) + sc_biguint<8>(ap_const_lv8_6));
}

void keccak_absorb_3199::thread_add_ln32_12_fu_261_p2() {
    add_ln32_12_fu_261_p2 = (!add_ln424_reg_305.read().is_01() || !ap_const_lv8_7.is_01())? sc_lv<8>(): (sc_biguint<8>(add_ln424_reg_305.read()) + sc_biguint<8>(ap_const_lv8_7));
}

void keccak_absorb_3199::thread_add_ln32_7_fu_211_p2() {
    add_ln32_7_fu_211_p2 = (!add_ln424_reg_305.read().is_01() || !ap_const_lv8_2.is_01())? sc_lv<8>(): (sc_biguint<8>(add_ln424_reg_305.read()) + sc_biguint<8>(ap_const_lv8_2));
}

void keccak_absorb_3199::thread_add_ln32_8_fu_221_p2() {
    add_ln32_8_fu_221_p2 = (!add_ln424_reg_305.read().is_01() || !ap_const_lv8_3.is_01())? sc_lv<8>(): (sc_biguint<8>(add_ln424_reg_305.read()) + sc_biguint<8>(ap_const_lv8_3));
}

void keccak_absorb_3199::thread_add_ln32_9_fu_231_p2() {
    add_ln32_9_fu_231_p2 = (!add_ln424_reg_305.read().is_01() || !ap_const_lv8_4.is_01())? sc_lv<8>(): (sc_biguint<8>(add_ln424_reg_305.read()) + sc_biguint<8>(ap_const_lv8_4));
}

void keccak_absorb_3199::thread_add_ln32_fu_200_p2() {
    add_ln32_fu_200_p2 = (!add_ln424_fu_190_p2.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(add_ln424_fu_190_p2.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void keccak_absorb_3199::thread_add_ln422_fu_167_p2() {
    add_ln422_fu_167_p2 = (!ap_phi_mux_i_3_phi_fu_154_p4.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(ap_phi_mux_i_3_phi_fu_154_p4.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void keccak_absorb_3199::thread_add_ln424_fu_190_p2() {
    add_ln424_fu_190_p2 = (!zext_ln424_fu_186_p1.read().is_01() || !m_offset.read().is_01())? sc_lv<8>(): (sc_biguint<8>(zext_ln424_fu_186_p1.read()) + sc_biguint<8>(m_offset.read()));
}

void keccak_absorb_3199::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void keccak_absorb_3199::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read()[2];
}

void keccak_absorb_3199::thread_ap_CS_fsm_pp0_stage2() {
    ap_CS_fsm_pp0_stage2 = ap_CS_fsm.read()[3];
}

void keccak_absorb_3199::thread_ap_CS_fsm_pp0_stage3() {
    ap_CS_fsm_pp0_stage3 = ap_CS_fsm.read()[4];
}

void keccak_absorb_3199::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void keccak_absorb_3199::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[5];
}

void keccak_absorb_3199::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void keccak_absorb_3199::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void keccak_absorb_3199::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void keccak_absorb_3199::thread_ap_block_pp0_stage1() {
    ap_block_pp0_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void keccak_absorb_3199::thread_ap_block_pp0_stage1_11001() {
    ap_block_pp0_stage1_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void keccak_absorb_3199::thread_ap_block_pp0_stage1_subdone() {
    ap_block_pp0_stage1_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void keccak_absorb_3199::thread_ap_block_pp0_stage2() {
    ap_block_pp0_stage2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void keccak_absorb_3199::thread_ap_block_pp0_stage2_11001() {
    ap_block_pp0_stage2_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void keccak_absorb_3199::thread_ap_block_pp0_stage2_subdone() {
    ap_block_pp0_stage2_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void keccak_absorb_3199::thread_ap_block_pp0_stage3() {
    ap_block_pp0_stage3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void keccak_absorb_3199::thread_ap_block_pp0_stage3_11001() {
    ap_block_pp0_stage3_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void keccak_absorb_3199::thread_ap_block_pp0_stage3_subdone() {
    ap_block_pp0_stage3_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void keccak_absorb_3199::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void keccak_absorb_3199::thread_ap_block_state3_pp0_stage1_iter0() {
    ap_block_state3_pp0_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void keccak_absorb_3199::thread_ap_block_state4_pp0_stage2_iter0() {
    ap_block_state4_pp0_stage2_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void keccak_absorb_3199::thread_ap_block_state5_pp0_stage3_iter0() {
    ap_block_state5_pp0_stage3_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void keccak_absorb_3199::thread_ap_block_state6_pp0_stage0_iter1() {
    ap_block_state6_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void keccak_absorb_3199::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(icmp_ln422_fu_161_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void keccak_absorb_3199::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void keccak_absorb_3199::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void keccak_absorb_3199::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void keccak_absorb_3199::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void keccak_absorb_3199::thread_ap_phi_mux_i_3_phi_fu_154_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(icmp_ln422_reg_296.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_i_3_phi_fu_154_p4 = add_ln422_reg_300.read();
    } else {
        ap_phi_mux_i_3_phi_fu_154_p4 = i_3_reg_150.read();
    }
}

void keccak_absorb_3199::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void keccak_absorb_3199::thread_icmp_ln422_fu_161_p2() {
    icmp_ln422_fu_161_p2 = (!ap_phi_mux_i_3_phi_fu_154_p4.read().is_01() || !ap_const_lv3_6.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_i_3_phi_fu_154_p4.read() == ap_const_lv3_6);
}

void keccak_absorb_3199::thread_m_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
            m_address0 =  (sc_lv<8>) (zext_ln32_17_fu_256_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
            m_address0 =  (sc_lv<8>) (zext_ln32_15_fu_236_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
            m_address0 =  (sc_lv<8>) (zext_ln32_13_fu_216_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
            m_address0 =  (sc_lv<8>) (zext_ln424_2_fu_195_p1.read());
        } else {
            m_address0 = "XXXXXXXX";
        }
    } else {
        m_address0 = "XXXXXXXX";
    }
}

void keccak_absorb_3199::thread_m_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
            m_address1 =  (sc_lv<8>) (zext_ln32_18_fu_266_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
            m_address1 =  (sc_lv<8>) (zext_ln32_16_fu_246_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
            m_address1 =  (sc_lv<8>) (zext_ln32_14_fu_226_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
            m_address1 =  (sc_lv<8>) (zext_ln32_fu_206_p1.read());
        } else {
            m_address1 = "XXXXXXXX";
        }
    } else {
        m_address1 = "XXXXXXXX";
    }
}

void keccak_absorb_3199::thread_m_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)))) {
        m_ce0 = ap_const_logic_1;
    } else {
        m_ce0 = ap_const_logic_0;
    }
}

void keccak_absorb_3199::thread_m_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)))) {
        m_ce1 = ap_const_logic_1;
    } else {
        m_ce1 = ap_const_logic_0;
    }
}

void keccak_absorb_3199::thread_r_7_i1_fu_271_p9() {
    r_7_i1_fu_271_p9 = esl_concat<56,8>(esl_concat<48,8>(esl_concat<40,8>(esl_concat<32,8>(esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(m_q1.read(), m_q0.read()), m_load_5_reg_381.read()), m_load_4_reg_376.read()), m_load_3_reg_361.read()), m_load_2_reg_356.read()), m_load_1_reg_336.read()), m_load_reg_331.read());
}

void keccak_absorb_3199::thread_s_address0() {
    s_address0 =  (sc_lv<5>) (zext_ln422_fu_173_p1.read());
}

void keccak_absorb_3199::thread_s_address1() {
    s_address1 = s_addr_reg_325.read();
}

void keccak_absorb_3199::thread_s_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        s_ce0 = ap_const_logic_1;
    } else {
        s_ce0 = ap_const_logic_0;
    }
}

void keccak_absorb_3199::thread_s_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        s_ce1 = ap_const_logic_1;
    } else {
        s_ce1 = ap_const_logic_0;
    }
}

void keccak_absorb_3199::thread_s_d1() {
    s_d1 = (s_load_reg_351.read() ^ r_7_i1_fu_271_p9.read());
}

void keccak_absorb_3199::thread_s_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln422_reg_296.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        s_we1 = ap_const_logic_1;
    } else {
        s_we1 = ap_const_logic_0;
    }
}

void keccak_absorb_3199::thread_shl_ln_fu_178_p3() {
    shl_ln_fu_178_p3 = esl_concat<3,3>(ap_phi_mux_i_3_phi_fu_154_p4.read(), ap_const_lv3_0);
}

void keccak_absorb_3199::thread_zext_ln32_13_fu_216_p1() {
    zext_ln32_13_fu_216_p1 = esl_zext<64,8>(add_ln32_7_fu_211_p2.read());
}

void keccak_absorb_3199::thread_zext_ln32_14_fu_226_p1() {
    zext_ln32_14_fu_226_p1 = esl_zext<64,8>(add_ln32_8_fu_221_p2.read());
}

void keccak_absorb_3199::thread_zext_ln32_15_fu_236_p1() {
    zext_ln32_15_fu_236_p1 = esl_zext<64,8>(add_ln32_9_fu_231_p2.read());
}

void keccak_absorb_3199::thread_zext_ln32_16_fu_246_p1() {
    zext_ln32_16_fu_246_p1 = esl_zext<64,8>(add_ln32_10_fu_241_p2.read());
}

void keccak_absorb_3199::thread_zext_ln32_17_fu_256_p1() {
    zext_ln32_17_fu_256_p1 = esl_zext<64,8>(add_ln32_11_fu_251_p2.read());
}

void keccak_absorb_3199::thread_zext_ln32_18_fu_266_p1() {
    zext_ln32_18_fu_266_p1 = esl_zext<64,8>(add_ln32_12_fu_261_p2.read());
}

void keccak_absorb_3199::thread_zext_ln32_fu_206_p1() {
    zext_ln32_fu_206_p1 = esl_zext<64,8>(add_ln32_fu_200_p2.read());
}

void keccak_absorb_3199::thread_zext_ln422_fu_173_p1() {
    zext_ln422_fu_173_p1 = esl_zext<64,3>(ap_phi_mux_i_3_phi_fu_154_p4.read());
}

void keccak_absorb_3199::thread_zext_ln424_2_fu_195_p1() {
    zext_ln424_2_fu_195_p1 = esl_zext<64,8>(add_ln424_fu_190_p2.read());
}

void keccak_absorb_3199::thread_zext_ln424_fu_186_p1() {
    zext_ln424_fu_186_p1 = esl_zext<8,6>(shl_ln_fu_178_p3.read());
}

void keccak_absorb_3199::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln422_fu_161_p2.read(), ap_const_lv1_1)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln422_fu_161_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        case 8 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage2_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            }
            break;
        case 16 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage3_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

}

