// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _pqcrystals_dilithium_16_HH_
#define _pqcrystals_dilithium_16_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct pqcrystals_dilithium_16 : public sc_module {
    // Port declarations 12
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > a_coeffs_address0;
    sc_out< sc_logic > a_coeffs_ce0;
    sc_in< sc_lv<32> > a_coeffs_q0;
    sc_in< sc_lv<4> > a_coeffs_offset;
    sc_in< sc_lv<17> > B;
    sc_out< sc_lv<1> > ap_return;


    // Module declarations
    pqcrystals_dilithium_16(sc_module_name name);
    SC_HAS_PROCESS(pqcrystals_dilithium_16);

    ~pqcrystals_dilithium_16();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > B_cast_fu_92_p1;
    sc_signal< sc_lv<32> > B_cast_reg_169;
    sc_signal< sc_lv<12> > tmp_fu_96_p3;
    sc_signal< sc_lv<12> > tmp_reg_174;
    sc_signal< sc_lv<1> > icmp_ln302_fu_104_p2;
    sc_signal< sc_lv<1> > icmp_ln302_reg_179;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<9> > i_fu_110_p2;
    sc_signal< sc_lv<9> > i_reg_183;
    sc_signal< sc_lv<9> > i_0_reg_69;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > icmp_ln307_fu_164_p2;
    sc_signal< sc_lv<1> > ap_phi_mux_p_0_ph_phi_fu_84_p4;
    sc_signal< sc_lv<1> > p_0_ph_reg_80;
    sc_signal< sc_lv<64> > zext_ln304_1_fu_125_p1;
    sc_signal< sc_lv<12> > zext_ln304_fu_116_p1;
    sc_signal< sc_lv<12> > add_ln304_fu_120_p2;
    sc_signal< sc_lv<1> > tmp_491_fu_130_p3;
    sc_signal< sc_lv<32> > shl_ln305_fu_146_p2;
    sc_signal< sc_lv<32> > t_fu_138_p3;
    sc_signal< sc_lv<32> > and_ln305_fu_152_p2;
    sc_signal< sc_lv<32> > t_2_fu_158_p2;
    sc_signal< sc_lv<1> > ap_return_preg;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<9> ap_const_lv9_100;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_FFFFFFFF;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_B_cast_fu_92_p1();
    void thread_a_coeffs_address0();
    void thread_a_coeffs_ce0();
    void thread_add_ln304_fu_120_p2();
    void thread_and_ln305_fu_152_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_mux_p_0_ph_phi_fu_84_p4();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_i_fu_110_p2();
    void thread_icmp_ln302_fu_104_p2();
    void thread_icmp_ln307_fu_164_p2();
    void thread_shl_ln305_fu_146_p2();
    void thread_t_2_fu_158_p2();
    void thread_t_fu_138_p3();
    void thread_tmp_491_fu_130_p3();
    void thread_tmp_fu_96_p3();
    void thread_zext_ln304_1_fu_125_p1();
    void thread_zext_ln304_fu_116_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
