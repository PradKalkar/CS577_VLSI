// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _keccak_absorb_3199_HH_
#define _keccak_absorb_3199_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct keccak_absorb_3199 : public sc_module {
    // Port declarations 18
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<5> > s_address0;
    sc_out< sc_logic > s_ce0;
    sc_out< sc_logic > s_we0;
    sc_out< sc_lv<64> > s_d0;
    sc_in< sc_lv<64> > s_q0;
    sc_out< sc_lv<8> > m_address0;
    sc_out< sc_logic > m_ce0;
    sc_in< sc_lv<8> > m_q0;
    sc_out< sc_lv<8> > m_address1;
    sc_out< sc_logic > m_ce1;
    sc_in< sc_lv<8> > m_q1;
    sc_in< sc_lv<8> > m_offset;


    // Module declarations
    keccak_absorb_3199(sc_module_name name);
    SC_HAS_PROCESS(keccak_absorb_3199);

    ~keccak_absorb_3199();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > add_ln420_fu_151_p2;
    sc_signal< sc_lv<3> > add_ln420_reg_279;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > add_ln421_fu_169_p2;
    sc_signal< sc_lv<8> > add_ln421_reg_284;
    sc_signal< sc_lv<1> > icmp_ln420_fu_145_p2;
    sc_signal< sc_lv<5> > s_addr_reg_304;
    sc_signal< sc_lv<8> > m_load_reg_309;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<8> > m_load_1_reg_314;
    sc_signal< sc_lv<8> > m_load_2_reg_329;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<8> > m_load_3_reg_334;
    sc_signal< sc_lv<8> > m_load_4_reg_349;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<8> > m_load_5_reg_354;
    sc_signal< sc_lv<3> > i_3_reg_129;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<64> > zext_ln421_2_fu_174_p1;
    sc_signal< sc_lv<64> > zext_ln32_fu_185_p1;
    sc_signal< sc_lv<64> > zext_ln420_fu_140_p1;
    sc_signal< sc_lv<64> > zext_ln32_13_fu_195_p1;
    sc_signal< sc_lv<64> > zext_ln32_14_fu_205_p1;
    sc_signal< sc_lv<64> > zext_ln32_15_fu_215_p1;
    sc_signal< sc_lv<64> > zext_ln32_16_fu_225_p1;
    sc_signal< sc_lv<64> > zext_ln32_17_fu_235_p1;
    sc_signal< sc_lv<64> > zext_ln32_18_fu_245_p1;
    sc_signal< sc_lv<6> > shl_ln_fu_157_p3;
    sc_signal< sc_lv<8> > zext_ln421_fu_165_p1;
    sc_signal< sc_lv<8> > add_ln32_fu_179_p2;
    sc_signal< sc_lv<8> > add_ln32_7_fu_190_p2;
    sc_signal< sc_lv<8> > add_ln32_8_fu_200_p2;
    sc_signal< sc_lv<8> > add_ln32_9_fu_210_p2;
    sc_signal< sc_lv<8> > add_ln32_10_fu_220_p2;
    sc_signal< sc_lv<8> > add_ln32_11_fu_230_p2;
    sc_signal< sc_lv<8> > add_ln32_12_fu_240_p2;
    sc_signal< sc_lv<64> > r_7_i1_fu_250_p9;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<3> ap_const_lv3_6;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<8> ap_const_lv8_2;
    static const sc_lv<8> ap_const_lv8_3;
    static const sc_lv<8> ap_const_lv8_4;
    static const sc_lv<8> ap_const_lv8_5;
    static const sc_lv<8> ap_const_lv8_6;
    static const sc_lv<8> ap_const_lv8_7;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln32_10_fu_220_p2();
    void thread_add_ln32_11_fu_230_p2();
    void thread_add_ln32_12_fu_240_p2();
    void thread_add_ln32_7_fu_190_p2();
    void thread_add_ln32_8_fu_200_p2();
    void thread_add_ln32_9_fu_210_p2();
    void thread_add_ln32_fu_179_p2();
    void thread_add_ln420_fu_151_p2();
    void thread_add_ln421_fu_169_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_icmp_ln420_fu_145_p2();
    void thread_m_address0();
    void thread_m_address1();
    void thread_m_ce0();
    void thread_m_ce1();
    void thread_r_7_i1_fu_250_p9();
    void thread_s_address0();
    void thread_s_ce0();
    void thread_s_d0();
    void thread_s_we0();
    void thread_shl_ln_fu_157_p3();
    void thread_zext_ln32_13_fu_195_p1();
    void thread_zext_ln32_14_fu_205_p1();
    void thread_zext_ln32_15_fu_215_p1();
    void thread_zext_ln32_16_fu_225_p1();
    void thread_zext_ln32_17_fu_235_p1();
    void thread_zext_ln32_18_fu_245_p1();
    void thread_zext_ln32_fu_185_p1();
    void thread_zext_ln420_fu_140_p1();
    void thread_zext_ln421_2_fu_174_p1();
    void thread_zext_ln421_fu_165_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
