// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _keccak_absorb_3199_HH_
#define _keccak_absorb_3199_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct keccak_absorb_3199 : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<5> > s_address0;
    sc_out< sc_logic > s_ce0;
    sc_in< sc_lv<64> > s_q0;
    sc_out< sc_lv<5> > s_address1;
    sc_out< sc_logic > s_ce1;
    sc_out< sc_logic > s_we1;
    sc_out< sc_lv<64> > s_d1;
    sc_out< sc_lv<8> > m_address0;
    sc_out< sc_logic > m_ce0;
    sc_in< sc_lv<8> > m_q0;
    sc_out< sc_lv<8> > m_address1;
    sc_out< sc_logic > m_ce1;
    sc_in< sc_lv<8> > m_q1;
    sc_in< sc_lv<8> > m_offset;


    // Module declarations
    keccak_absorb_3199(sc_module_name name);
    SC_HAS_PROCESS(keccak_absorb_3199);

    ~keccak_absorb_3199();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > i_3_reg_150;
    sc_signal< sc_lv<1> > icmp_ln423_fu_161_p2;
    sc_signal< sc_lv<1> > icmp_ln423_reg_296;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<3> > add_ln423_fu_167_p2;
    sc_signal< sc_lv<3> > add_ln423_reg_300;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<8> > add_ln425_fu_190_p2;
    sc_signal< sc_lv<8> > add_ln425_reg_305;
    sc_signal< sc_lv<5> > s_addr_reg_325;
    sc_signal< sc_lv<8> > m_load_reg_331;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<8> > m_load_1_reg_336;
    sc_signal< sc_lv<64> > s_load_reg_351;
    sc_signal< sc_lv<8> > m_load_2_reg_356;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage2;
    sc_signal< bool > ap_block_state4_pp0_stage2_iter0;
    sc_signal< bool > ap_block_pp0_stage2_11001;
    sc_signal< sc_lv<8> > m_load_3_reg_361;
    sc_signal< sc_lv<8> > m_load_4_reg_376;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage3;
    sc_signal< bool > ap_block_state5_pp0_stage3_iter0;
    sc_signal< bool > ap_block_pp0_stage3_11001;
    sc_signal< sc_lv<8> > m_load_5_reg_381;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage3_subdone;
    sc_signal< sc_lv<3> > ap_phi_mux_i_3_phi_fu_154_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > zext_ln425_2_fu_195_p1;
    sc_signal< sc_lv<64> > zext_ln32_fu_206_p1;
    sc_signal< sc_lv<64> > zext_ln423_fu_173_p1;
    sc_signal< sc_lv<64> > zext_ln32_13_fu_216_p1;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<64> > zext_ln32_14_fu_226_p1;
    sc_signal< sc_lv<64> > zext_ln32_15_fu_236_p1;
    sc_signal< bool > ap_block_pp0_stage2;
    sc_signal< sc_lv<64> > zext_ln32_16_fu_246_p1;
    sc_signal< sc_lv<64> > zext_ln32_17_fu_256_p1;
    sc_signal< bool > ap_block_pp0_stage3;
    sc_signal< sc_lv<64> > zext_ln32_18_fu_266_p1;
    sc_signal< sc_lv<6> > shl_ln_fu_178_p3;
    sc_signal< sc_lv<8> > zext_ln425_fu_186_p1;
    sc_signal< sc_lv<8> > add_ln32_fu_200_p2;
    sc_signal< sc_lv<8> > add_ln32_7_fu_211_p2;
    sc_signal< sc_lv<8> > add_ln32_8_fu_221_p2;
    sc_signal< sc_lv<8> > add_ln32_9_fu_231_p2;
    sc_signal< sc_lv<8> > add_ln32_10_fu_241_p2;
    sc_signal< sc_lv<8> > add_ln32_11_fu_251_p2;
    sc_signal< sc_lv<8> > add_ln32_12_fu_261_p2;
    sc_signal< sc_lv<64> > r_7_i1_fu_271_p9;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< bool > ap_block_pp0_stage2_subdone;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_pp0_stage0;
    static const sc_lv<6> ap_ST_fsm_pp0_stage1;
    static const sc_lv<6> ap_ST_fsm_pp0_stage2;
    static const sc_lv<6> ap_ST_fsm_pp0_stage3;
    static const sc_lv<6> ap_ST_fsm_state7;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<3> ap_const_lv3_6;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<8> ap_const_lv8_2;
    static const sc_lv<8> ap_const_lv8_3;
    static const sc_lv<8> ap_const_lv8_4;
    static const sc_lv<8> ap_const_lv8_5;
    static const sc_lv<8> ap_const_lv8_6;
    static const sc_lv<8> ap_const_lv8_7;
    static const sc_lv<32> ap_const_lv32_5;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln32_10_fu_241_p2();
    void thread_add_ln32_11_fu_251_p2();
    void thread_add_ln32_12_fu_261_p2();
    void thread_add_ln32_7_fu_211_p2();
    void thread_add_ln32_8_fu_221_p2();
    void thread_add_ln32_9_fu_231_p2();
    void thread_add_ln32_fu_200_p2();
    void thread_add_ln423_fu_167_p2();
    void thread_add_ln425_fu_190_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_pp0_stage2();
    void thread_ap_CS_fsm_pp0_stage3();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_pp0_stage2();
    void thread_ap_block_pp0_stage2_11001();
    void thread_ap_block_pp0_stage2_subdone();
    void thread_ap_block_pp0_stage3();
    void thread_ap_block_pp0_stage3_11001();
    void thread_ap_block_pp0_stage3_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage1_iter0();
    void thread_ap_block_state4_pp0_stage2_iter0();
    void thread_ap_block_state5_pp0_stage3_iter0();
    void thread_ap_block_state6_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_3_phi_fu_154_p4();
    void thread_ap_ready();
    void thread_icmp_ln423_fu_161_p2();
    void thread_m_address0();
    void thread_m_address1();
    void thread_m_ce0();
    void thread_m_ce1();
    void thread_r_7_i1_fu_271_p9();
    void thread_s_address0();
    void thread_s_address1();
    void thread_s_ce0();
    void thread_s_ce1();
    void thread_s_d1();
    void thread_s_we1();
    void thread_shl_ln_fu_178_p3();
    void thread_zext_ln32_13_fu_216_p1();
    void thread_zext_ln32_14_fu_226_p1();
    void thread_zext_ln32_15_fu_236_p1();
    void thread_zext_ln32_16_fu_246_p1();
    void thread_zext_ln32_17_fu_256_p1();
    void thread_zext_ln32_18_fu_266_p1();
    void thread_zext_ln32_fu_206_p1();
    void thread_zext_ln423_fu_173_p1();
    void thread_zext_ln425_2_fu_195_p1();
    void thread_zext_ln425_fu_186_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
