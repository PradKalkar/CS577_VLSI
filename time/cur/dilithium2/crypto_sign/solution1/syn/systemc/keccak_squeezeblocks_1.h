// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _keccak_squeezeblocks_1_HH_
#define _keccak_squeezeblocks_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "KeccakF1600_StatePer_1.h"

namespace ap_rtl {

struct keccak_squeezeblocks_1 : public sc_module {
    // Port declarations 24
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > out_r_address0;
    sc_out< sc_logic > out_r_ce0;
    sc_out< sc_logic > out_r_we0;
    sc_out< sc_lv<8> > out_r_d0;
    sc_out< sc_lv<10> > out_r_address1;
    sc_out< sc_logic > out_r_ce1;
    sc_out< sc_logic > out_r_we1;
    sc_out< sc_lv<8> > out_r_d1;
    sc_out< sc_lv<5> > s_address0;
    sc_out< sc_logic > s_ce0;
    sc_out< sc_logic > s_we0;
    sc_out< sc_lv<64> > s_d0;
    sc_in< sc_lv<64> > s_q0;
    sc_out< sc_lv<5> > s_address1;
    sc_out< sc_logic > s_ce1;
    sc_out< sc_logic > s_we1;
    sc_out< sc_lv<64> > s_d1;
    sc_in< sc_lv<64> > s_q1;


    // Module declarations
    keccak_squeezeblocks_1(sc_module_name name);
    SC_HAS_PROCESS(keccak_squeezeblocks_1);

    ~keccak_squeezeblocks_1();

    sc_trace_file* mVcdFile;

    KeccakF1600_StatePer_1* grp_KeccakF1600_StatePer_1_fu_213;
    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > i_0_reg_202;
    sc_signal< sc_lv<1> > icmp_ln488_fu_225_p2;
    sc_signal< sc_lv<1> > icmp_ln488_reg_426;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<5> > i_fu_231_p2;
    sc_signal< sc_lv<5> > i_reg_430;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<8> > shl_ln_fu_237_p3;
    sc_signal< sc_lv<8> > shl_ln_reg_435;
    sc_signal< sc_lv<10> > add_ln490_fu_253_p2;
    sc_signal< sc_lv<10> > add_ln490_reg_445;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_state5_pp0_stage1_iter0;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<8> > trunc_ln49_9_reg_455;
    sc_signal< sc_lv<8> > trunc_ln49_s_reg_460;
    sc_signal< sc_lv<8> > trunc_ln49_1_reg_465;
    sc_signal< sc_lv<8> > trunc_ln49_2_reg_470;
    sc_signal< sc_lv<8> > trunc_ln49_3_reg_475;
    sc_signal< sc_lv<8> > trunc_ln49_4_reg_480;
    sc_signal< sc_lv<10> > add_ln492_fu_411_p2;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<3> > add_ln493_fu_417_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > grp_KeccakF1600_StatePer_1_fu_213_ap_ready;
    sc_signal< sc_logic > grp_KeccakF1600_StatePer_1_fu_213_ap_done;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_state7_pp0_stage3_iter0;
    sc_signal< bool > ap_block_pp0_stage3_subdone;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage3;
    sc_signal< sc_logic > grp_KeccakF1600_StatePer_1_fu_213_ap_start;
    sc_signal< sc_logic > grp_KeccakF1600_StatePer_1_fu_213_ap_idle;
    sc_signal< sc_lv<5> > grp_KeccakF1600_StatePer_1_fu_213_state_address0;
    sc_signal< sc_logic > grp_KeccakF1600_StatePer_1_fu_213_state_ce0;
    sc_signal< sc_logic > grp_KeccakF1600_StatePer_1_fu_213_state_we0;
    sc_signal< sc_lv<64> > grp_KeccakF1600_StatePer_1_fu_213_state_d0;
    sc_signal< sc_lv<5> > grp_KeccakF1600_StatePer_1_fu_213_state_address1;
    sc_signal< sc_logic > grp_KeccakF1600_StatePer_1_fu_213_state_ce1;
    sc_signal< sc_logic > grp_KeccakF1600_StatePer_1_fu_213_state_we1;
    sc_signal< sc_lv<64> > grp_KeccakF1600_StatePer_1_fu_213_state_d1;
    sc_signal< sc_lv<3> > p_01_reg_178;
    sc_signal< sc_lv<10> > p_0_rec_reg_190;
    sc_signal< sc_lv<5> > ap_phi_mux_i_0_phi_fu_206_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > grp_KeccakF1600_StatePer_1_fu_213_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln486_fu_219_p2;
    sc_signal< sc_lv<64> > zext_ln490_1_fu_245_p1;
    sc_signal< sc_lv<64> > zext_ln490_3_fu_259_p1;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<64> > zext_ln49_fu_286_p1;
    sc_signal< sc_lv<64> > zext_ln49_7_fu_356_p1;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage2;
    sc_signal< bool > ap_block_pp0_stage2;
    sc_signal< sc_lv<64> > zext_ln49_8_fu_366_p1;
    sc_signal< sc_lv<64> > zext_ln49_9_fu_376_p1;
    sc_signal< bool > ap_block_pp0_stage3;
    sc_signal< sc_lv<64> > zext_ln49_10_fu_386_p1;
    sc_signal< sc_lv<64> > zext_ln49_11_fu_396_p1;
    sc_signal< sc_lv<64> > zext_ln49_12_fu_406_p1;
    sc_signal< sc_lv<8> > trunc_ln49_fu_264_p1;
    sc_signal< bool > ap_block_state6_pp0_stage2_iter0;
    sc_signal< bool > ap_block_pp0_stage2_11001;
    sc_signal< bool > ap_block_pp0_stage3_11001;
    sc_signal< sc_lv<10> > zext_ln490_fu_250_p1;
    sc_signal< sc_lv<10> > or_ln49_fu_280_p2;
    sc_signal< sc_lv<10> > or_ln49_1_fu_351_p2;
    sc_signal< sc_lv<10> > or_ln49_2_fu_361_p2;
    sc_signal< sc_lv<10> > or_ln49_3_fu_371_p2;
    sc_signal< sc_lv<10> > or_ln49_4_fu_381_p2;
    sc_signal< sc_lv<10> > or_ln49_5_fu_391_p2;
    sc_signal< sc_lv<10> > or_ln49_6_fu_401_p2;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< bool > ap_block_pp0_stage2_subdone;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_fsm_state1;
    static const sc_lv<8> ap_ST_fsm_state2;
    static const sc_lv<8> ap_ST_fsm_state3;
    static const sc_lv<8> ap_ST_fsm_pp0_stage0;
    static const sc_lv<8> ap_ST_fsm_pp0_stage1;
    static const sc_lv<8> ap_ST_fsm_pp0_stage2;
    static const sc_lv<8> ap_ST_fsm_pp0_stage3;
    static const sc_lv<8> ap_ST_fsm_state9;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<5> ap_const_lv5_11;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_27;
    static const sc_lv<32> ap_const_lv32_28;
    static const sc_lv<32> ap_const_lv32_2F;
    static const sc_lv<32> ap_const_lv32_30;
    static const sc_lv<32> ap_const_lv32_37;
    static const sc_lv<32> ap_const_lv32_38;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<10> ap_const_lv10_2;
    static const sc_lv<10> ap_const_lv10_3;
    static const sc_lv<10> ap_const_lv10_4;
    static const sc_lv<10> ap_const_lv10_5;
    static const sc_lv<10> ap_const_lv10_6;
    static const sc_lv<10> ap_const_lv10_7;
    static const sc_lv<10> ap_const_lv10_88;
    static const sc_lv<3> ap_const_lv3_7;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln490_fu_253_p2();
    void thread_add_ln492_fu_411_p2();
    void thread_add_ln493_fu_417_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_pp0_stage2();
    void thread_ap_CS_fsm_pp0_stage3();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_pp0_stage2();
    void thread_ap_block_pp0_stage2_11001();
    void thread_ap_block_pp0_stage2_subdone();
    void thread_ap_block_pp0_stage3();
    void thread_ap_block_pp0_stage3_11001();
    void thread_ap_block_pp0_stage3_subdone();
    void thread_ap_block_state4_pp0_stage0_iter0();
    void thread_ap_block_state5_pp0_stage1_iter0();
    void thread_ap_block_state6_pp0_stage2_iter0();
    void thread_ap_block_state7_pp0_stage3_iter0();
    void thread_ap_block_state8_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state4();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_0_phi_fu_206_p4();
    void thread_ap_ready();
    void thread_grp_KeccakF1600_StatePer_1_fu_213_ap_start();
    void thread_i_fu_231_p2();
    void thread_icmp_ln486_fu_219_p2();
    void thread_icmp_ln488_fu_225_p2();
    void thread_or_ln49_1_fu_351_p2();
    void thread_or_ln49_2_fu_361_p2();
    void thread_or_ln49_3_fu_371_p2();
    void thread_or_ln49_4_fu_381_p2();
    void thread_or_ln49_5_fu_391_p2();
    void thread_or_ln49_6_fu_401_p2();
    void thread_or_ln49_fu_280_p2();
    void thread_out_r_address0();
    void thread_out_r_address1();
    void thread_out_r_ce0();
    void thread_out_r_ce1();
    void thread_out_r_d0();
    void thread_out_r_d1();
    void thread_out_r_we0();
    void thread_out_r_we1();
    void thread_s_address0();
    void thread_s_address1();
    void thread_s_ce0();
    void thread_s_ce1();
    void thread_s_d0();
    void thread_s_d1();
    void thread_s_we0();
    void thread_s_we1();
    void thread_shl_ln_fu_237_p3();
    void thread_trunc_ln49_fu_264_p1();
    void thread_zext_ln490_1_fu_245_p1();
    void thread_zext_ln490_3_fu_259_p1();
    void thread_zext_ln490_fu_250_p1();
    void thread_zext_ln49_10_fu_386_p1();
    void thread_zext_ln49_11_fu_396_p1();
    void thread_zext_ln49_12_fu_406_p1();
    void thread_zext_ln49_7_fu_356_p1();
    void thread_zext_ln49_8_fu_366_p1();
    void thread_zext_ln49_9_fu_376_p1();
    void thread_zext_ln49_fu_286_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
