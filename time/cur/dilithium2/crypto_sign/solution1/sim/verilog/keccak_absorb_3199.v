// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module keccak_absorb_3199 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_address0,
        s_ce0,
        s_we0,
        s_d0,
        s_q0,
        m_address0,
        m_ce0,
        m_q0,
        m_address1,
        m_ce1,
        m_q1,
        m_offset
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] s_address0;
output   s_ce0;
output   s_we0;
output  [63:0] s_d0;
input  [63:0] s_q0;
output  [7:0] m_address0;
output   m_ce0;
input  [7:0] m_q0;
output  [7:0] m_address1;
output   m_ce1;
input  [7:0] m_q1;
input  [7:0] m_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg s_ce0;
reg s_we0;
reg[7:0] m_address0;
reg m_ce0;
reg[7:0] m_address1;
reg m_ce1;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] add_ln420_fu_151_p2;
reg   [2:0] add_ln420_reg_279;
wire    ap_CS_fsm_state2;
wire   [7:0] add_ln421_fu_169_p2;
reg   [7:0] add_ln421_reg_284;
wire   [0:0] icmp_ln420_fu_145_p2;
reg   [4:0] s_addr_reg_304;
reg   [7:0] m_load_reg_309;
wire    ap_CS_fsm_state3;
reg   [7:0] m_load_1_reg_314;
reg   [7:0] m_load_2_reg_329;
wire    ap_CS_fsm_state4;
reg   [7:0] m_load_3_reg_334;
reg   [7:0] m_load_4_reg_349;
wire    ap_CS_fsm_state5;
reg   [7:0] m_load_5_reg_354;
reg   [2:0] i_3_reg_129;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln421_2_fu_174_p1;
wire   [63:0] zext_ln32_fu_185_p1;
wire   [63:0] zext_ln420_fu_140_p1;
wire   [63:0] zext_ln32_13_fu_195_p1;
wire   [63:0] zext_ln32_14_fu_205_p1;
wire   [63:0] zext_ln32_15_fu_215_p1;
wire   [63:0] zext_ln32_16_fu_225_p1;
wire   [63:0] zext_ln32_17_fu_235_p1;
wire   [63:0] zext_ln32_18_fu_245_p1;
wire   [5:0] shl_ln_fu_157_p3;
wire   [7:0] zext_ln421_fu_165_p1;
wire   [7:0] add_ln32_fu_179_p2;
wire   [7:0] add_ln32_7_fu_190_p2;
wire   [7:0] add_ln32_8_fu_200_p2;
wire   [7:0] add_ln32_9_fu_210_p2;
wire   [7:0] add_ln32_10_fu_220_p2;
wire   [7:0] add_ln32_11_fu_230_p2;
wire   [7:0] add_ln32_12_fu_240_p2;
wire   [63:0] r_7_i1_fu_250_p9;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_3_reg_129 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i_3_reg_129 <= add_ln420_reg_279;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln420_reg_279 <= add_ln420_fu_151_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln420_fu_145_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln421_reg_284 <= add_ln421_fu_169_p2;
        s_addr_reg_304[2 : 0] <= zext_ln420_fu_140_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        m_load_1_reg_314 <= m_q1;
        m_load_reg_309 <= m_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        m_load_2_reg_329 <= m_q0;
        m_load_3_reg_334 <= m_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_load_4_reg_349 <= m_q0;
        m_load_5_reg_354 <= m_q1;
    end
end

always @ (*) begin
    if ((((icmp_ln420_fu_145_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln420_fu_145_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_address0 = zext_ln32_17_fu_235_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        m_address0 = zext_ln32_15_fu_215_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        m_address0 = zext_ln32_13_fu_195_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        m_address0 = zext_ln421_2_fu_174_p1;
    end else begin
        m_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_address1 = zext_ln32_18_fu_245_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        m_address1 = zext_ln32_16_fu_225_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        m_address1 = zext_ln32_14_fu_205_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        m_address1 = zext_ln32_fu_185_p1;
    end else begin
        m_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_ce0 = 1'b1;
    end else begin
        m_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_ce1 = 1'b1;
    end else begin
        m_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        s_ce0 = 1'b1;
    end else begin
        s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        s_we0 = 1'b1;
    end else begin
        s_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln420_fu_145_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln32_10_fu_220_p2 = (add_ln421_reg_284 + 8'd5);

assign add_ln32_11_fu_230_p2 = (add_ln421_reg_284 + 8'd6);

assign add_ln32_12_fu_240_p2 = (add_ln421_reg_284 + 8'd7);

assign add_ln32_7_fu_190_p2 = (add_ln421_reg_284 + 8'd2);

assign add_ln32_8_fu_200_p2 = (add_ln421_reg_284 + 8'd3);

assign add_ln32_9_fu_210_p2 = (add_ln421_reg_284 + 8'd4);

assign add_ln32_fu_179_p2 = (add_ln421_fu_169_p2 + 8'd1);

assign add_ln420_fu_151_p2 = (i_3_reg_129 + 3'd1);

assign add_ln421_fu_169_p2 = (zext_ln421_fu_165_p1 + m_offset);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign icmp_ln420_fu_145_p2 = ((i_3_reg_129 == 3'd6) ? 1'b1 : 1'b0);

assign r_7_i1_fu_250_p9 = {{{{{{{{m_q1}, {m_q0}}, {m_load_5_reg_354}}, {m_load_4_reg_349}}, {m_load_3_reg_334}}, {m_load_2_reg_329}}, {m_load_1_reg_314}}, {m_load_reg_309}};

assign s_address0 = s_addr_reg_304;

assign s_d0 = (s_q0 ^ r_7_i1_fu_250_p9);

assign shl_ln_fu_157_p3 = {{i_3_reg_129}, {3'd0}};

assign zext_ln32_13_fu_195_p1 = add_ln32_7_fu_190_p2;

assign zext_ln32_14_fu_205_p1 = add_ln32_8_fu_200_p2;

assign zext_ln32_15_fu_215_p1 = add_ln32_9_fu_210_p2;

assign zext_ln32_16_fu_225_p1 = add_ln32_10_fu_220_p2;

assign zext_ln32_17_fu_235_p1 = add_ln32_11_fu_230_p2;

assign zext_ln32_18_fu_245_p1 = add_ln32_12_fu_240_p2;

assign zext_ln32_fu_185_p1 = add_ln32_fu_179_p2;

assign zext_ln420_fu_140_p1 = i_3_reg_129;

assign zext_ln421_2_fu_174_p1 = add_ln421_fu_169_p2;

assign zext_ln421_fu_165_p1 = shl_ln_fu_157_p3;

always @ (posedge ap_clk) begin
    s_addr_reg_304[4:3] <= 2'b00;
end

endmodule //keccak_absorb_3199
