// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module polyvecl_pointwise_a (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        w_coeffs_address0,
        w_coeffs_ce0,
        w_coeffs_we0,
        w_coeffs_d0,
        w_coeffs_q0,
        w_coeffs_offset,
        u_vec_coeffs_address0,
        u_vec_coeffs_ce0,
        u_vec_coeffs_q0,
        v_vec_coeffs_address0,
        v_vec_coeffs_ce0,
        v_vec_coeffs_q0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_pp0_stage0 = 8'd2;
parameter    ap_ST_fsm_state4 = 8'd4;
parameter    ap_ST_fsm_state5 = 8'd8;
parameter    ap_ST_fsm_pp1_stage0 = 8'd16;
parameter    ap_ST_fsm_state8 = 8'd32;
parameter    ap_ST_fsm_state9 = 8'd64;
parameter    ap_ST_fsm_state10 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] w_coeffs_address0;
output   w_coeffs_ce0;
output   w_coeffs_we0;
output  [31:0] w_coeffs_d0;
input  [31:0] w_coeffs_q0;
input  [2:0] w_coeffs_offset;
output  [11:0] u_vec_coeffs_address0;
output   u_vec_coeffs_ce0;
input  [22:0] u_vec_coeffs_q0;
output  [9:0] v_vec_coeffs_address0;
output   v_vec_coeffs_ce0;
input  [31:0] v_vec_coeffs_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] w_coeffs_address0;
reg w_coeffs_ce0;
reg w_coeffs_we0;
reg[31:0] w_coeffs_d0;
reg[11:0] u_vec_coeffs_address0;
reg u_vec_coeffs_ce0;
reg[9:0] v_vec_coeffs_address0;
reg v_vec_coeffs_ce0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] i_0_i_reg_162;
reg   [8:0] i_0_i1_reg_185;
wire   [11:0] zext_ln186_2_fu_216_p1;
reg   [11:0] zext_ln186_2_reg_531;
wire   [5:0] zext_ln186_3_cast_fu_228_p1;
reg   [5:0] zext_ln186_3_cast_reg_537;
wire   [0:0] icmp_ln184_fu_232_p2;
reg   [0:0] icmp_ln184_reg_542;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [8:0] i_14_fu_238_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [11:0] add_ln186_fu_253_p2;
reg   [11:0] add_ln186_reg_551;
wire   [0:0] icmp_ln141_fu_339_p2;
wire    ap_CS_fsm_state5;
wire   [13:0] tmp_918_cast_fu_354_p3;
reg   [13:0] tmp_918_cast_reg_570;
wire   [11:0] zext_ln180_fu_370_p1;
reg   [11:0] zext_ln180_reg_575;
wire   [0:0] icmp_ln184_1_fu_374_p2;
reg   [0:0] icmp_ln184_1_reg_580;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state6_pp1_stage0_iter0;
wire    ap_block_state7_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [8:0] i_15_fu_380_p2;
reg   [8:0] i_15_reg_584;
reg    ap_enable_reg_pp1_iter0;
wire   [8:0] i_16_fu_488_p2;
reg   [8:0] i_16_reg_602;
wire    ap_CS_fsm_state9;
reg   [9:0] w_coeffs_addr_1_reg_607;
wire   [0:0] icmp_ln91_fu_482_p2;
wire   [2:0] i_fu_513_p2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state6;
reg    ap_enable_reg_pp1_iter1;
reg   [7:0] t_coeffs_address0;
reg    t_coeffs_ce0;
reg    t_coeffs_we0;
wire   [31:0] t_coeffs_d0;
wire   [31:0] t_coeffs_q0;
reg   [2:0] i_0_reg_173;
wire    ap_CS_fsm_state4;
reg   [8:0] ap_phi_mux_i_0_i1_phi_fu_189_p4;
wire    ap_block_pp1_stage0;
reg   [8:0] i_0_i20_reg_197;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state8;
wire   [63:0] zext_ln186_4_fu_267_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln186_fu_244_p1;
wire   [63:0] zext_ln186_5_fu_272_p1;
wire   [63:0] zext_ln186_10_fu_399_p1;
wire   [63:0] zext_ln186_11_fu_409_p1;
wire   [63:0] zext_ln186_1_fu_414_p1;
wire   [63:0] zext_ln92_2_fu_508_p1;
wire   [63:0] zext_ln92_fu_494_p1;
wire  signed [31:0] t_2_fu_334_p1;
wire   [31:0] add_ln92_fu_519_p2;
wire   [10:0] tmp_fu_208_p3;
wire   [4:0] tmp_s_fu_220_p3;
wire   [11:0] zext_ln186_3_fu_249_p1;
wire   [12:0] tmp_512_fu_258_p4;
wire   [22:0] mul_ln186_fu_284_p0;
wire  signed [31:0] mul_ln186_fu_284_p1;
wire  signed [54:0] mul_ln186_fu_284_p2;
wire  signed [31:0] trunc_ln18_fu_294_p1;
wire   [31:0] t_fu_298_p2;
wire  signed [31:0] mul_ln19_fu_308_p1;
wire   [54:0] mul_ln19_fu_308_p2;
wire  signed [55:0] sext_ln186_1_fu_290_p1;
wire  signed [55:0] sext_ln19_1_fu_314_p1;
wire   [55:0] add_ln19_fu_318_p2;
wire   [23:0] tmp_1_fu_324_p4;
wire   [5:0] zext_ln186_7_fu_345_p1;
wire   [5:0] add_ln186_1_fu_349_p2;
wire   [10:0] tmp_513_fu_362_p3;
wire   [13:0] zext_ln186_9_fu_390_p1;
wire   [13:0] add_ln186_2_fu_394_p2;
wire   [11:0] zext_ln186_8_fu_386_p1;
wire   [11:0] add_ln186_3_fu_404_p2;
wire   [22:0] mul_ln186_1_fu_427_p0;
wire  signed [31:0] mul_ln186_1_fu_427_p1;
wire  signed [54:0] mul_ln186_1_fu_427_p2;
wire  signed [31:0] trunc_ln18_1_fu_437_p1;
wire   [31:0] t_3_fu_441_p2;
wire  signed [31:0] mul_ln19_1_fu_451_p1;
wire   [54:0] mul_ln19_1_fu_451_p2;
wire  signed [55:0] sext_ln186_3_fu_433_p1;
wire  signed [55:0] sext_ln19_4_fu_457_p1;
wire   [55:0] add_ln19_1_fu_461_p2;
wire   [23:0] tmp_2_fu_467_p4;
wire   [11:0] zext_ln92_1_fu_499_p1;
wire   [11:0] add_ln92_1_fu_503_p2;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [54:0] mul_ln186_1_fu_427_p00;
wire   [54:0] mul_ln186_fu_284_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

polyvecl_pointwishbi #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
t_coeffs_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(t_coeffs_address0),
    .ce0(t_coeffs_ce0),
    .we0(t_coeffs_we0),
    .d0(t_coeffs_d0),
    .q0(t_coeffs_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln141_fu_339_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state6);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((icmp_ln141_fu_339_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln184_1_reg_580 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_0_i1_reg_185 <= i_15_reg_584;
    end else if (((icmp_ln141_fu_339_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i_0_i1_reg_185 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_0_i20_reg_197 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        i_0_i20_reg_197 <= i_16_reg_602;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln184_fu_232_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_i_reg_162 <= i_14_fu_238_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_i_reg_162 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_reg_173 <= 3'd1;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln91_fu_482_p2 == 1'd1))) begin
        i_0_reg_173 <= i_fu_513_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln184_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln186_reg_551 <= add_ln186_fu_253_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_15_reg_584 <= i_15_fu_380_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_16_reg_602 <= i_16_fu_488_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln184_1_reg_580 <= icmp_ln184_1_fu_374_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln184_reg_542 <= icmp_ln184_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln141_fu_339_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_918_cast_reg_570[13 : 8] <= tmp_918_cast_fu_354_p3[13 : 8];
        zext_ln180_reg_575[10 : 8] <= zext_ln180_fu_370_p1[10 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln91_fu_482_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        w_coeffs_addr_1_reg_607 <= zext_ln92_2_fu_508_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        zext_ln186_2_reg_531[10 : 8] <= zext_ln186_2_fu_216_p1[10 : 8];
        zext_ln186_3_cast_reg_537[4 : 2] <= zext_ln186_3_cast_fu_228_p1[4 : 2];
    end
end

always @ (*) begin
    if ((icmp_ln184_fu_232_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln184_1_fu_374_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln141_fu_339_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln184_1_reg_580 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_i_0_i1_phi_fu_189_p4 = i_15_reg_584;
    end else begin
        ap_phi_mux_i_0_i1_phi_fu_189_p4 = i_0_i1_reg_185;
    end
end

always @ (*) begin
    if (((icmp_ln141_fu_339_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        t_coeffs_address0 = zext_ln92_fu_494_p1;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        t_coeffs_address0 = zext_ln186_1_fu_414_p1;
    end else begin
        t_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        t_coeffs_ce0 = 1'b1;
    end else begin
        t_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln184_1_reg_580 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        t_coeffs_we0 = 1'b1;
    end else begin
        t_coeffs_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        u_vec_coeffs_address0 = zext_ln186_10_fu_399_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        u_vec_coeffs_address0 = zext_ln186_4_fu_267_p1;
    end else begin
        u_vec_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        u_vec_coeffs_ce0 = 1'b1;
    end else begin
        u_vec_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        v_vec_coeffs_address0 = zext_ln186_11_fu_409_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_vec_coeffs_address0 = zext_ln186_fu_244_p1;
    end else begin
        v_vec_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        v_vec_coeffs_ce0 = 1'b1;
    end else begin
        v_vec_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        w_coeffs_address0 = w_coeffs_addr_1_reg_607;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        w_coeffs_address0 = zext_ln92_2_fu_508_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        w_coeffs_address0 = zext_ln186_5_fu_272_p1;
    end else begin
        w_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        w_coeffs_ce0 = 1'b1;
    end else begin
        w_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        w_coeffs_d0 = add_ln92_fu_519_p2;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        w_coeffs_d0 = t_2_fu_334_p1;
    end else begin
        w_coeffs_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln184_reg_542 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        w_coeffs_we0 = 1'b1;
    end else begin
        w_coeffs_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln184_fu_232_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln184_fu_232_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln141_fu_339_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln184_1_fu_374_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln184_1_fu_374_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln91_fu_482_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln186_1_fu_349_p2 = (zext_ln186_7_fu_345_p1 + zext_ln186_3_cast_reg_537);

assign add_ln186_2_fu_394_p2 = (tmp_918_cast_reg_570 + zext_ln186_9_fu_390_p1);

assign add_ln186_3_fu_404_p2 = (zext_ln180_reg_575 + zext_ln186_8_fu_386_p1);

assign add_ln186_fu_253_p2 = (zext_ln186_2_reg_531 + zext_ln186_3_fu_249_p1);

assign add_ln19_1_fu_461_p2 = ($signed(sext_ln186_3_fu_433_p1) + $signed(sext_ln19_4_fu_457_p1));

assign add_ln19_fu_318_p2 = ($signed(sext_ln186_1_fu_290_p1) + $signed(sext_ln19_1_fu_314_p1));

assign add_ln92_1_fu_503_p2 = (zext_ln186_2_reg_531 + zext_ln92_1_fu_499_p1);

assign add_ln92_fu_519_p2 = (w_coeffs_q0 + t_coeffs_q0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign i_14_fu_238_p2 = (i_0_i_reg_162 + 9'd1);

assign i_15_fu_380_p2 = (ap_phi_mux_i_0_i1_phi_fu_189_p4 + 9'd1);

assign i_16_fu_488_p2 = (i_0_i20_reg_197 + 9'd1);

assign i_fu_513_p2 = (i_0_reg_173 + 3'd1);

assign icmp_ln141_fu_339_p2 = ((i_0_reg_173 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln184_1_fu_374_p2 = ((ap_phi_mux_i_0_i1_phi_fu_189_p4 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln184_fu_232_p2 = ((i_0_i_reg_162 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln91_fu_482_p2 = ((i_0_i20_reg_197 == 9'd256) ? 1'b1 : 1'b0);

assign mul_ln186_1_fu_427_p0 = mul_ln186_1_fu_427_p00;

assign mul_ln186_1_fu_427_p00 = u_vec_coeffs_q0;

assign mul_ln186_1_fu_427_p1 = v_vec_coeffs_q0;

assign mul_ln186_1_fu_427_p2 = ($signed({{1'b0}, {mul_ln186_1_fu_427_p0}}) * $signed(mul_ln186_1_fu_427_p1));

assign mul_ln186_fu_284_p0 = mul_ln186_fu_284_p00;

assign mul_ln186_fu_284_p00 = u_vec_coeffs_q0;

assign mul_ln186_fu_284_p1 = v_vec_coeffs_q0;

assign mul_ln186_fu_284_p2 = ($signed({{1'b0}, {mul_ln186_fu_284_p0}}) * $signed(mul_ln186_fu_284_p1));

assign mul_ln19_1_fu_451_p1 = t_3_fu_441_p2;

assign mul_ln19_1_fu_451_p2 = ($signed(55'd36028797010583551) * $signed(mul_ln19_1_fu_451_p1));

assign mul_ln19_fu_308_p1 = t_fu_298_p2;

assign mul_ln19_fu_308_p2 = ($signed(55'd36028797010583551) * $signed(mul_ln19_fu_308_p1));

assign sext_ln186_1_fu_290_p1 = mul_ln186_fu_284_p2;

assign sext_ln186_3_fu_433_p1 = mul_ln186_1_fu_427_p2;

assign sext_ln19_1_fu_314_p1 = $signed(mul_ln19_fu_308_p2);

assign sext_ln19_4_fu_457_p1 = $signed(mul_ln19_1_fu_451_p2);

assign t_2_fu_334_p1 = $signed(tmp_1_fu_324_p4);

assign t_3_fu_441_p2 = ($signed({{1'b0}, {32'd58728449}}) * $signed(trunc_ln18_1_fu_437_p1));

assign t_coeffs_d0 = $signed(tmp_2_fu_467_p4);

assign t_fu_298_p2 = ($signed({{1'b0}, {32'd58728449}}) * $signed(trunc_ln18_fu_294_p1));

assign tmp_1_fu_324_p4 = {{add_ln19_fu_318_p2[55:32]}};

assign tmp_2_fu_467_p4 = {{add_ln19_1_fu_461_p2[55:32]}};

assign tmp_512_fu_258_p4 = {{{w_coeffs_offset}, {1'd0}}, {i_0_i_reg_162}};

assign tmp_513_fu_362_p3 = {{i_0_reg_173}, {8'd0}};

assign tmp_918_cast_fu_354_p3 = {{add_ln186_1_fu_349_p2}, {8'd0}};

assign tmp_fu_208_p3 = {{w_coeffs_offset}, {8'd0}};

assign tmp_s_fu_220_p3 = {{w_coeffs_offset}, {2'd0}};

assign trunc_ln18_1_fu_437_p1 = mul_ln186_1_fu_427_p2[31:0];

assign trunc_ln18_fu_294_p1 = mul_ln186_fu_284_p2[31:0];

assign zext_ln180_fu_370_p1 = tmp_513_fu_362_p3;

assign zext_ln186_10_fu_399_p1 = add_ln186_2_fu_394_p2;

assign zext_ln186_11_fu_409_p1 = add_ln186_3_fu_404_p2;

assign zext_ln186_1_fu_414_p1 = i_0_i1_reg_185;

assign zext_ln186_2_fu_216_p1 = tmp_fu_208_p3;

assign zext_ln186_3_cast_fu_228_p1 = tmp_s_fu_220_p3;

assign zext_ln186_3_fu_249_p1 = i_0_i_reg_162;

assign zext_ln186_4_fu_267_p1 = tmp_512_fu_258_p4;

assign zext_ln186_5_fu_272_p1 = add_ln186_reg_551;

assign zext_ln186_7_fu_345_p1 = i_0_reg_173;

assign zext_ln186_8_fu_386_p1 = ap_phi_mux_i_0_i1_phi_fu_189_p4;

assign zext_ln186_9_fu_390_p1 = ap_phi_mux_i_0_i1_phi_fu_189_p4;

assign zext_ln186_fu_244_p1 = i_0_i_reg_162;

assign zext_ln92_1_fu_499_p1 = i_0_i20_reg_197;

assign zext_ln92_2_fu_508_p1 = add_ln92_1_fu_503_p2;

assign zext_ln92_fu_494_p1 = i_0_i20_reg_197;

always @ (posedge ap_clk) begin
    zext_ln186_2_reg_531[7:0] <= 8'b00000000;
    zext_ln186_2_reg_531[11] <= 1'b0;
    zext_ln186_3_cast_reg_537[1:0] <= 2'b00;
    zext_ln186_3_cast_reg_537[5] <= 1'b0;
    tmp_918_cast_reg_570[7:0] <= 8'b00000000;
    zext_ln180_reg_575[7:0] <= 8'b00000000;
    zext_ln180_reg_575[11] <= 1'b0;
end

endmodule //polyvecl_pointwise_a
